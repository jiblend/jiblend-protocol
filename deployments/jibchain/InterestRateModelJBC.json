{
  "address": "0x05E42EE95C10390cEdffE94f91658202726aAFaA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jumpMultiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kink_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseRatePerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplierPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jumpMultiplierPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kink",
          "type": "uint256"
        }
      ],
      "name": "NewInterestParams",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "baseRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksPerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        }
      ],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "getSupplyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInterestRateModel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jumpMultiplierPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kink",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiplierPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jumpMultiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kink_",
          "type": "uint256"
        }
      ],
      "name": "updateJumpRateModel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        }
      ],
      "name": "utilizationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f87fba6c7e0e1d6e3122e937fc0a568912854512b519734319aa50a900272a8",
  "receipt": {
    "to": null,
    "from": "0x57a37B57b4809582E8E52Cc4602cb70143f3d76e",
    "contractAddress": "0x05E42EE95C10390cEdffE94f91658202726aAFaA",
    "transactionIndex": 3,
    "gasUsed": "469498",
    "logsBloom": "0x
    "blockHash": "0x8b45a3aa25def1d13b5fcf382a0630f40e87d1d72fae00111bf4157fb6fdc99f",
    "transactionHash": "0x8f87fba6c7e0e1d6e3122e937fc0a568912854512b519734319aa50a900272a8",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 2460698,
        "transactionHash": "0x8f87fba6c7e0e1d6e3122e937fc0a568912854512b519734319aa50a900272a8",
        "address": "0x05E42EE95C10390cEdffE94f91658202726aAFaA",
        "topics": [
          "0x6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000001c59cb9fc00000000000000000000000000000000000000000000000000000018eaebf769000000000000000000000000000000000000000000000000000010f535ebeeb50000000000000000000000000000000000000000000000000b1a2bc2ec500000",
        "logIndex": 2,
        "blockHash": "0x8b45a3aa25def1d13b5fcf382a0630f40e87d1d72fae00111bf4157fb6fdc99f"
      }
    ],
    "blockNumber": 2460698,
    "cumulativeGasUsed": "597361",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "15999999999782400",
    "179999999999654400",
    "39199999999998787200",
    "800000000000000000",
    "0x57a37B57b4809582E8E52Cc4602cb70143f3d76e"
  ],
  "numDeployments": 1,
  "solcInputHash": "d89ba6bd5d1c370bbf965df5987212b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseRatePerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplierPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"}],\"name\":\"NewInterestParams\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInterestRateModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jumpMultiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink_\",\"type\":\"uint256\"}],\"name\":\"updateJumpRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Arr00\",\"kind\":\"dev\",\"methods\":{\"getBorrowRate(uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserves\":\"The amount of reserves in the market\"},\"returns\":{\"_0\":\"The borrow rate percentage per block as a mantissa (scaled by 1e18)\"}},\"getSupplyRate(uint256,uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserveFactorMantissa\":\"The current reserve factor for the market\",\"reserves\":\"The amount of reserves in the market\"},\"returns\":{\"_0\":\"The supply rate percentage per block as a mantissa (scaled by BASE)\"}},\"updateJumpRateModel(uint256,uint256,uint256,uint256)\":{\"params\":{\"baseRatePerYear\":\"The approximate target base APR, as a mantissa (scaled by BASE)\",\"jumpMultiplierPerYear\":\"The multiplierPerBlock after hitting a specified utilization point\",\"kink_\":\"The utilization point at which the jump multiplier is applied\",\"multiplierPerYear\":\"The rate of increase in interest rate wrt utilization (scaled by BASE)\"}},\"utilizationRate(uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserves\":\"The amount of reserves in the market (currently unused)\"},\"returns\":{\"_0\":\"The utilization rate as a mantissa between [0, BASE]\"}}},\"title\":\"JLEND's JumpRateModel Contract V2 for V2 jTokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"baseRatePerBlock()\":{\"notice\":\"The base interest rate which is the y-intercept when utilization rate is 0\"},\"blocksPerYear()\":{\"notice\":\"The approximate number of blocks per year that is assumed by the interest rate model\"},\"getBorrowRate(uint256,uint256,uint256)\":{\"notice\":\"Calculates the current borrow rate per block\"},\"getSupplyRate(uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculates the current supply rate per block\"},\"isInterestRateModel()\":{\"notice\":\"Indicator that this is an InterestRateModel contract (for inspection)\"},\"jumpMultiplierPerBlock()\":{\"notice\":\"The multiplierPerBlock after hitting a specified utilization point\"},\"kink()\":{\"notice\":\"The utilization point at which the jump multiplier is applied\"},\"multiplierPerBlock()\":{\"notice\":\"The multiplier of utilization rate that gives the slope of the interest rate\"},\"owner()\":{\"notice\":\"The address of the owner, i.e. the Timelock contract, which can update parameters directly\"},\"updateJumpRateModel(uint256,uint256,uint256,uint256)\":{\"notice\":\"Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\"},\"utilizationRate(uint256,uint256,uint256)\":{\"notice\":\"Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\"}},\"notice\":\"Supports only for V2 jTokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JumpRateModelV2.sol\":\"JumpRateModelV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BaseJumpRateModelV2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Logic for JLEND's JumpRateModel Contract V2.\\n * @author JLEND (modified by Dharma Labs, refactored by Arr00)\\n * @notice Version 2 modifies Version 1 by enabling updateable parameters.\\n */\\nabstract contract BaseJumpRateModelV2 is InterestRateModel {\\n  event NewInterestParams(\\n    uint baseRatePerBlock,\\n    uint multiplierPerBlock,\\n    uint jumpMultiplierPerBlock,\\n    uint kink\\n  );\\n\\n  uint256 private constant BASE = 1e18;\\n\\n  /**\\n   * @notice The address of the owner, i.e. the Timelock contract, which can update parameters directly\\n   */\\n  address public owner;\\n\\n  /**\\n   * @notice The approximate number of blocks per year that is assumed by the interest rate model\\n   */\\n  uint public constant blocksPerYear = 2102400;\\n\\n  /**\\n   * @notice The multiplier of utilization rate that gives the slope of the interest rate\\n   */\\n  uint public multiplierPerBlock;\\n\\n  /**\\n   * @notice The base interest rate which is the y-intercept when utilization rate is 0\\n   */\\n  uint public baseRatePerBlock;\\n\\n  /**\\n   * @notice The multiplierPerBlock after hitting a specified utilization point\\n   */\\n  uint public jumpMultiplierPerBlock;\\n\\n  /**\\n   * @notice The utilization point at which the jump multiplier is applied\\n   */\\n  uint public kink;\\n\\n  /**\\n   * @notice Construct an interest rate model\\n   * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\\n   * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\\n   * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n   * @param kink_ The utilization point at which the jump multiplier is applied\\n   * @param owner_ The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)\\n   */\\n  constructor(\\n    uint baseRatePerYear,\\n    uint multiplierPerYear,\\n    uint jumpMultiplierPerYear,\\n    uint kink_,\\n    address owner_\\n  ) internal {\\n    owner = owner_;\\n\\n    updateJumpRateModelInternal(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\\n  }\\n\\n  /**\\n   * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\\n   * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\\n   * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\\n   * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n   * @param kink_ The utilization point at which the jump multiplier is applied\\n   */\\n  function updateJumpRateModel(\\n    uint baseRatePerYear,\\n    uint multiplierPerYear,\\n    uint jumpMultiplierPerYear,\\n    uint kink_\\n  ) external virtual {\\n    require(msg.sender == owner, \\\"only the owner may call this function.\\\");\\n\\n    updateJumpRateModelInternal(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\\n  }\\n\\n  /**\\n   * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n   * @param cash The amount of cash in the market\\n   * @param borrows The amount of borrows in the market\\n   * @param reserves The amount of reserves in the market (currently unused)\\n   * @return The utilization rate as a mantissa between [0, BASE]\\n   */\\n  function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns (uint) {\\n    // Utilization rate is 0 when there are no borrows\\n    if (borrows == 0) {\\n      return 0;\\n    }\\n\\n    return (borrows * BASE) / (cash + borrows - reserves);\\n  }\\n\\n  /**\\n   * @notice Calculates the current borrow rate per block, with the error code expected by the market\\n   * @param cash The amount of cash in the market\\n   * @param borrows The amount of borrows in the market\\n   * @param reserves The amount of reserves in the market\\n   * @return The borrow rate percentage per block as a mantissa (scaled by BASE)\\n   */\\n  function getBorrowRateInternal(uint cash, uint borrows, uint reserves) internal view returns (uint) {\\n    uint util = utilizationRate(cash, borrows, reserves);\\n\\n    if (util <= kink) {\\n      return ((util * multiplierPerBlock) / BASE) + baseRatePerBlock;\\n    } else {\\n      uint normalRate = ((kink * multiplierPerBlock) / BASE) + baseRatePerBlock;\\n      uint excessUtil = util - kink;\\n      return ((excessUtil * jumpMultiplierPerBlock) / BASE) + normalRate;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the current supply rate per block\\n   * @param cash The amount of cash in the market\\n   * @param borrows The amount of borrows in the market\\n   * @param reserves The amount of reserves in the market\\n   * @param reserveFactorMantissa The current reserve factor for the market\\n   * @return The supply rate percentage per block as a mantissa (scaled by BASE)\\n   */\\n  function getSupplyRate(\\n    uint cash,\\n    uint borrows,\\n    uint reserves,\\n    uint reserveFactorMantissa\\n  ) public view virtual override returns (uint) {\\n    uint oneMinusReserveFactor = BASE - reserveFactorMantissa;\\n    uint borrowRate = getBorrowRateInternal(cash, borrows, reserves);\\n    uint rateToPool = (borrowRate * oneMinusReserveFactor) / BASE;\\n    return (utilizationRate(cash, borrows, reserves) * rateToPool) / BASE;\\n  }\\n\\n  /**\\n   * @notice Internal function to update the parameters of the interest rate model\\n   * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\\n   * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\\n   * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n   * @param kink_ The utilization point at which the jump multiplier is applied\\n   */\\n  function updateJumpRateModelInternal(\\n    uint baseRatePerYear,\\n    uint multiplierPerYear,\\n    uint jumpMultiplierPerYear,\\n    uint kink_\\n  ) internal {\\n    baseRatePerBlock = baseRatePerYear / blocksPerYear;\\n    multiplierPerBlock = (multiplierPerYear * BASE) / (blocksPerYear * kink_);\\n    jumpMultiplierPerBlock = jumpMultiplierPerYear / blocksPerYear;\\n    kink = kink_;\\n\\n    emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\\n  }\\n}\\n\",\"keccak256\":\"0x4b6c9c0892fc25f02375b7fc5cd39508f918d396435b6d086a806bf63f68324e\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title JLEND's InterestRateModel Interface\\n * @author JLEND\\n */\\nabstract contract InterestRateModel {\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n  bool public constant isInterestRateModel = true;\\n\\n  /**\\n   * @notice Calculates the current borrow interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getBorrowRate(uint cash, uint borrows, uint reserves) external view virtual returns (uint);\\n\\n  /**\\n   * @notice Calculates the current supply interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @param reserveFactorMantissa The current reserve factor the market has\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint cash,\\n    uint borrows,\\n    uint reserves,\\n    uint reserveFactorMantissa\\n  ) external view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x52139203b262483398066a0d6100691d5d738b87aced3159b9b5ea7a400b42c0\",\"license\":\"BSD-3-Clause\"},\"contracts/JumpRateModelV2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./BaseJumpRateModelV2.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title JLEND's JumpRateModel Contract V2 for V2 jTokens\\n * @author Arr00\\n * @notice Supports only for V2 jTokens\\n */\\ncontract JumpRateModelV2 is InterestRateModel, BaseJumpRateModelV2 {\\n  /**\\n   * @notice Calculates the current borrow rate per block\\n   * @param cash The amount of cash in the market\\n   * @param borrows The amount of borrows in the market\\n   * @param reserves The amount of reserves in the market\\n   * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n   */\\n  function getBorrowRate(uint cash, uint borrows, uint reserves) external view override returns (uint) {\\n    return getBorrowRateInternal(cash, borrows, reserves);\\n  }\\n\\n  constructor(\\n    uint baseRatePerYear,\\n    uint multiplierPerYear,\\n    uint jumpMultiplierPerYear,\\n    uint kink_,\\n    address owner_\\n  ) public BaseJumpRateModelV2(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_, owner_) {}\\n}\\n\",\"keccak256\":\"0x642b8a5df004032eebf95a5cfdbbcfc5605183605b49a662f096403c922e6414\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161072038038061072083398101604081905261002f91610112565b600080546001600160a01b0319166001600160a01b038316179055848484848461005b8585858561006a565b505050505050505050506101ba565b610077622014808561016d565b600255610087816220148061018f565b610099670de0b6b3a76400008561018f565b6100a3919061016d565b6001556100b3622014808361016d565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b600080600080600060a0868803121561012a57600080fd5b855160208701516040880151606089015160808a0151939850919650945092506001600160a01b038116811461015f57600080fd5b809150509295509295909350565b60008261018a57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176101b457634e487b7160e01b600052601160045260246000fd5b92915050565b610557806101c96000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b1461011d578063a385fb9614610148578063b816881614610152578063b9f9850a14610165578063f14039de1461016e578063fd2da3391461017757600080fd5b806315f24053146100ae5780632037f3e7146100d45780632191f92a146100e95780636e71e2d8146101015780638726bb8914610114575b600080fd5b6100c16100bc366004610448565b610180565b6040519081526020015b60405180910390f35b6100e76100e2366004610474565b610197565b005b6100f1600181565b60405190151581526020016100cb565b6100c161010f366004610448565b610216565b6100c160015481565b600054610130906001600160a01b031681565b6040516001600160a01b0390911681526020016100cb565b6100c16220148081565b6100c1610160366004610474565b610259565b6100c160035481565b6100c160025481565b6100c160045481565b600061018d8484846102d5565b90505b9392505050565b6000546001600160a01b031633146102045760405162461bcd60e51b815260206004820152602660248201527f6f6e6c7920746865206f776e6572206d61792063616c6c20746869732066756e60448201526531ba34b7b71760d11b606482015260840160405180910390fd5b610210848484846103a0565b50505050565b60008260000361022857506000610190565b8161023384866104bc565b61023d91906104d5565b61024f670de0b6b3a7640000856104e8565b61018d91906104ff565b60008061026e83670de0b6b3a76400006104d5565b9050600061027d8787876102d5565b90506000670de0b6b3a764000061029484846104e8565b61029e91906104ff565b9050670de0b6b3a7640000816102b58a8a8a610216565b6102bf91906104e8565b6102c991906104ff565b98975050505050505050565b6000806102e3858585610216565b9050600454811161032457600254670de0b6b3a76400006001548361030891906104e8565b61031291906104ff565b61031c91906104bc565b915050610190565b6000600254670de0b6b3a764000060015460045461034291906104e8565b61034c91906104ff565b61035691906104bc565b905060006004548361036891906104d5565b905081670de0b6b3a76400006003548361038291906104e8565b61038c91906104ff565b61039691906104bc565b9350505050610190565b6103ad62201480856104ff565b6002556103bd81622014806104e8565b6103cf670de0b6b3a7640000856104e8565b6103d991906104ff565b6001556103e962201480836104ff565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b60008060006060848603121561045d57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561048a57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b808201808211156104cf576104cf6104a6565b92915050565b818103818111156104cf576104cf6104a6565b80820281158282048414176104cf576104cf6104a6565b60008261051c57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212201ae9dc586f949da56e264908a012898d46e49e0b675dfa54a9abb698b755865c64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b1461011d578063a385fb9614610148578063b816881614610152578063b9f9850a14610165578063f14039de1461016e578063fd2da3391461017757600080fd5b806315f24053146100ae5780632037f3e7146100d45780632191f92a146100e95780636e71e2d8146101015780638726bb8914610114575b600080fd5b6100c16100bc366004610448565b610180565b6040519081526020015b60405180910390f35b6100e76100e2366004610474565b610197565b005b6100f1600181565b60405190151581526020016100cb565b6100c161010f366004610448565b610216565b6100c160015481565b600054610130906001600160a01b031681565b6040516001600160a01b0390911681526020016100cb565b6100c16220148081565b6100c1610160366004610474565b610259565b6100c160035481565b6100c160025481565b6100c160045481565b600061018d8484846102d5565b90505b9392505050565b6000546001600160a01b031633146102045760405162461bcd60e51b815260206004820152602660248201527f6f6e6c7920746865206f776e6572206d61792063616c6c20746869732066756e60448201526531ba34b7b71760d11b606482015260840160405180910390fd5b610210848484846103a0565b50505050565b60008260000361022857506000610190565b8161023384866104bc565b61023d91906104d5565b61024f670de0b6b3a7640000856104e8565b61018d91906104ff565b60008061026e83670de0b6b3a76400006104d5565b9050600061027d8787876102d5565b90506000670de0b6b3a764000061029484846104e8565b61029e91906104ff565b9050670de0b6b3a7640000816102b58a8a8a610216565b6102bf91906104e8565b6102c991906104ff565b98975050505050505050565b6000806102e3858585610216565b9050600454811161032457600254670de0b6b3a76400006001548361030891906104e8565b61031291906104ff565b61031c91906104bc565b915050610190565b6000600254670de0b6b3a764000060015460045461034291906104e8565b61034c91906104ff565b61035691906104bc565b905060006004548361036891906104d5565b905081670de0b6b3a76400006003548361038291906104e8565b61038c91906104ff565b61039691906104bc565b9350505050610190565b6103ad62201480856104ff565b6002556103bd81622014806104e8565b6103cf670de0b6b3a7640000856104e8565b6103d991906104ff565b6001556103e962201480836104ff565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b60008060006060848603121561045d57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561048a57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b808201808211156104cf576104cf6104a6565b92915050565b818103818111156104cf576104cf6104a6565b80820281158282048414176104cf576104cf6104a6565b60008261051c57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212201ae9dc586f949da56e264908a012898d46e49e0b675dfa54a9abb698b755865c64736f6c63430008140033",
  "libraries": {},
  "devdoc": {
    "author": "Arr00",
    "kind": "dev",
    "methods": {
      "getBorrowRate(uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserves": "The amount of reserves in the market"
        },
        "returns": {
          "_0": "The borrow rate percentage per block as a mantissa (scaled by 1e18)"
        }
      },
      "getSupplyRate(uint256,uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserveFactorMantissa": "The current reserve factor for the market",
          "reserves": "The amount of reserves in the market"
        },
        "returns": {
          "_0": "The supply rate percentage per block as a mantissa (scaled by BASE)"
        }
      },
      "updateJumpRateModel(uint256,uint256,uint256,uint256)": {
        "params": {
          "baseRatePerYear": "The approximate target base APR, as a mantissa (scaled by BASE)",
          "jumpMultiplierPerYear": "The multiplierPerBlock after hitting a specified utilization point",
          "kink_": "The utilization point at which the jump multiplier is applied",
          "multiplierPerYear": "The rate of increase in interest rate wrt utilization (scaled by BASE)"
        }
      },
      "utilizationRate(uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserves": "The amount of reserves in the market (currently unused)"
        },
        "returns": {
          "_0": "The utilization rate as a mantissa between [0, BASE]"
        }
      }
    },
    "title": "JLEND's JumpRateModel Contract V2 for V2 jTokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "baseRatePerBlock()": {
        "notice": "The base interest rate which is the y-intercept when utilization rate is 0"
      },
      "blocksPerYear()": {
        "notice": "The approximate number of blocks per year that is assumed by the interest rate model"
      },
      "getBorrowRate(uint256,uint256,uint256)": {
        "notice": "Calculates the current borrow rate per block"
      },
      "getSupplyRate(uint256,uint256,uint256,uint256)": {
        "notice": "Calculates the current supply rate per block"
      },
      "isInterestRateModel()": {
        "notice": "Indicator that this is an InterestRateModel contract (for inspection)"
      },
      "jumpMultiplierPerBlock()": {
        "notice": "The multiplierPerBlock after hitting a specified utilization point"
      },
      "kink()": {
        "notice": "The utilization point at which the jump multiplier is applied"
      },
      "multiplierPerBlock()": {
        "notice": "The multiplier of utilization rate that gives the slope of the interest rate"
      },
      "owner()": {
        "notice": "The address of the owner, i.e. the Timelock contract, which can update parameters directly"
      },
      "updateJumpRateModel(uint256,uint256,uint256,uint256)": {
        "notice": "Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)"
      },
      "utilizationRate(uint256,uint256,uint256)": {
        "notice": "Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`"
      }
    },
    "notice": "Supports only for V2 jTokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 371,
        "contract": "contracts/JumpRateModelV2.sol:JumpRateModelV2",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 378,
        "contract": "contracts/JumpRateModelV2.sol:JumpRateModelV2",
        "label": "multiplierPerBlock",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 381,
        "contract": "contracts/JumpRateModelV2.sol:JumpRateModelV2",
        "label": "baseRatePerBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 384,
        "contract": "contracts/JumpRateModelV2.sol:JumpRateModelV2",
        "label": "jumpMultiplierPerBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 387,
        "contract": "contracts/JumpRateModelV2.sol:JumpRateModelV2",
        "label": "kink",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}