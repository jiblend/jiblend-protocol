{
  "address": "0x1e13Fa3Fb9351174aD520f2F3ad35042d682A906",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "ContributorJLendSpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jLendDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jLendBorrowIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedBorrowerJLend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jLendDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jLendSupplyIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedSupplierJLend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldJLendAccrued",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newJLendAccrued",
          "type": "uint256"
        }
      ],
      "name": "JLendAccruedAdjusted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "JLendBorrowSpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "JLendGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldJLendReceivable",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newJLendReceivable",
          "type": "uint256"
        }
      ],
      "name": "JLendReceivableUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "JLendSupplySpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketExited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        }
      ],
      "name": "MarketListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "NewBorrowCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBorrowCapGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBorrowCapGuardian",
          "type": "address"
        }
      ],
      "name": "NewBorrowCapGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCloseFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCloseFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidationIncentiveMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationIncentive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPauseGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "NewPauseGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "oldPriceOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "newPriceOracle",
          "type": "address"
        }
      ],
      "name": "NewPriceOracle",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract Unitroller",
          "name": "unitroller",
          "type": "address"
        }
      ],
      "name": "_become",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_borrowGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_grantJLend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_mintGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBorrowCapGuardian",
          "type": "address"
        }
      ],
      "name": "_setBorrowCapGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setBorrowPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCloseFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCollateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "jLendSpeed",
          "type": "uint256"
        }
      ],
      "name": "_setContributorJLendSpeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JToken[]",
          "name": "jTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "supplySpeeds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "borrowSpeeds",
          "type": "uint256[]"
        }
      ],
      "name": "_setJLendSpeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JToken[]",
          "name": "jTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBorrowCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketBorrowCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setMintPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "_setPauseGuardian",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "_setPriceOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setSeizePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setTransferPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        }
      ],
      "name": "_supportMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountAssets",
      "outputs": [
        {
          "internalType": "contract JToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "contract JToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowCapGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        }
      ],
      "name": "checkMembership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "claimJLend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "holders",
          "type": "address[]"
        },
        {
          "internalType": "contract JToken[]",
          "name": "jTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "borrowers",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "suppliers",
          "type": "bool"
        }
      ],
      "name": "claimJLend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "contract JToken[]",
          "name": "jTokens",
          "type": "address[]"
        }
      ],
      "name": "claimJLend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "jTokens",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jTokenAddress",
          "type": "address"
        }
      ],
      "name": "exitMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "affectedUsers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "fixBadAccruals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "contract JToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAssetsIn",
      "outputs": [
        {
          "internalType": "contract JToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jTokenModify",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "getHypotheticalAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getJLendAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isComptroller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        }
      ],
      "name": "isDeprecated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "jLendAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "jLendBorrowSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "jLendBorrowState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "jLendBorrowerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "jLendContributorSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jLendInitialIndex",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jLendRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "jLendReceivable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "jLendSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "jLendSupplierIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "jLendSupplySpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "jLendSupplyState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastContributorBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateCalculateSeizeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationIncentiveMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorMantissa",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isJLended",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mintAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualMintAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintTokens",
          "type": "uint256"
        }
      ],
      "name": "mintVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingComptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposal65FixExecuted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowerIndex",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seizeGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "updateContributorRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd4a68bd4442e5d372566d1e17cf929136284a9bb2e448e41603ef888238eeaaf",
  "receipt": {
    "to": null,
    "from": "0x57a37B57b4809582E8E52Cc4602cb70143f3d76e",
    "contractAddress": "0x1e13Fa3Fb9351174aD520f2F3ad35042d682A906",
    "transactionIndex": 2,
    "gasUsed": "4731117",
    "logsBloom": "0x
    "blockHash": "0x123204438858b620371fd2e7f688a1266f660ce9d8f98820233cdd2323616991",
    "transactionHash": "0xd4a68bd4442e5d372566d1e17cf929136284a9bb2e448e41603ef888238eeaaf",
    "logs": [],
    "blockNumber": 2460691,
    "cumulativeGasUsed": "4841047",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d89ba6bd5d1c370bbf965df5987212b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"ContributorJLendSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jLendDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jLendBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedBorrowerJLend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jLendDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jLendSupplyIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedSupplierJLend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldJLendAccrued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newJLendAccrued\",\"type\":\"uint256\"}],\"name\":\"JLendAccruedAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"JLendBorrowSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"JLendGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldJLendReceivable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newJLendReceivable\",\"type\":\"uint256\"}],\"name\":\"JLendReceivableUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"JLendSupplySpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"}],\"name\":\"MarketListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"NewBorrowCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBorrowCapGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"NewBorrowCapGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCloseFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCloseFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCollateralFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationIncentiveMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPauseGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"NewPauseGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"oldPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract Unitroller\",\"name\":\"unitroller\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_grantJLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"_setBorrowCapGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setBorrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jLendSpeed\",\"type\":\"uint256\"}],\"name\":\"_setContributorJLendSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JToken[]\",\"name\":\"jTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"supplySpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowSpeeds\",\"type\":\"uint256[]\"}],\"name\":\"_setJLendSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JToken[]\",\"name\":\"jTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setMintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setSeizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setTransferPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"}],\"name\":\"_supportMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract JToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract JToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowCapGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"}],\"name\":\"checkMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimJLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"contract JToken[]\",\"name\":\"jTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"borrowers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"suppliers\",\"type\":\"bool\"}],\"name\":\"claimJLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"contract JToken[]\",\"name\":\"jTokens\",\"type\":\"address[]\"}],\"name\":\"claimJLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"jTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jTokenAddress\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"affectedUsers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"fixBadAccruals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"contract JToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAssetsIn\",\"outputs\":[{\"internalType\":\"contract JToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jTokenModify\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"getHypotheticalAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJLendAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isComptroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"}],\"name\":\"isDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jLendAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jLendBorrowSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jLendBorrowState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jLendBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jLendContributorSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jLendInitialIndex\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jLendRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jLendReceivable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jLendSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jLendSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jLendSupplySpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jLendSupplyState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastContributorBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculateSeizeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isJLended\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"mintVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposal65FixExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowerIndex\",\"type\":\"uint256\"}],\"name\":\"repayBorrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seizeGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"updateContributorRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"JLEND\",\"events\":{\"Failure(uint256,uint256,uint256)\":{\"details\":\"`error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary contract-specific code that enables us to report opaque error codes from upgradeable contracts.*\"}},\"kind\":\"dev\",\"methods\":{\"_grantJLend(address,uint256)\":{\"details\":\"Note: If there is not enough JLEND, we do not perform the transfer all.\",\"params\":{\"amount\":\"The amount of JLEND to (possibly) transfer\",\"recipient\":\"The address of the recipient to transfer JLEND to\"}},\"_setBorrowCapGuardian(address)\":{\"params\":{\"newBorrowCapGuardian\":\"The address of the new Borrow Cap Guardian\"}},\"_setCloseFactor(uint256)\":{\"details\":\"Admin function to set closeFactor\",\"params\":{\"newCloseFactorMantissa\":\"New close factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure\"}},\"_setCollateralFactor(address,uint256)\":{\"details\":\"Admin function to set per-market collateralFactor\",\"params\":{\"jToken\":\"The market to set the factor on\",\"newCollateralFactorMantissa\":\"The new collateral factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setContributorJLendSpeed(address,uint256)\":{\"params\":{\"contributor\":\"The contributor whose JLEND speed to update\",\"jLendSpeed\":\"New JLEND speed for contributor\"}},\"_setJLendSpeeds(address[],uint256[],uint256[])\":{\"params\":{\"borrowSpeeds\":\"New borrow-side JLEND speed for the corresponding market.\",\"jTokens\":\"The markets whose JLEND speed to update.\",\"supplySpeeds\":\"New supply-side JLEND speed for the corresponding market.\"}},\"_setLiquidationIncentive(uint256)\":{\"details\":\"Admin function to set liquidationIncentive\",\"params\":{\"newLiquidationIncentiveMantissa\":\"New liquidationIncentive scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setMarketBorrowCaps(address[],uint256[])\":{\"details\":\"Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\",\"params\":{\"jTokens\":\"The addresses of the markets (tokens) to change the borrow caps for\",\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\"}},\"_setPauseGuardian(address)\":{\"params\":{\"newPauseGuardian\":\"The address of the new Pause Guardian\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"_setPriceOracle(address)\":{\"details\":\"Admin function to set a new price oracle\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_supportMarket(address)\":{\"details\":\"Admin function to set isListed and add support for the market\",\"params\":{\"jToken\":\"The address of the market (token) to list\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"borrowAllowed(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of underlying the account would borrow\",\"borrower\":\"The account which would borrow the asset\",\"jToken\":\"The market to verify the borrow against\"},\"returns\":{\"_0\":\"0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"borrowVerify(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of the underlying asset requested to borrow\",\"borrower\":\"The address borrowing the underlying\",\"jToken\":\"Asset whose underlying is being borrowed\"}},\"checkMembership(address,address)\":{\"params\":{\"account\":\"The address of the account to check\",\"jToken\":\"The jToken to check\"},\"returns\":{\"_0\":\"True if the account is in the asset, otherwise false.\"}},\"claimJLend(address)\":{\"params\":{\"holder\":\"The address to claim JLEND for\"}},\"claimJLend(address,address[])\":{\"params\":{\"holder\":\"The address to claim JLEND for\",\"jTokens\":\"The list of markets to claim JLEND in\"}},\"claimJLend(address[],address[],bool,bool)\":{\"params\":{\"borrowers\":\"Whether or not to claim JLEND earned by borrowing\",\"holders\":\"The addresses to claim JLEND for\",\"jTokens\":\"The list of markets to claim JLEND in\",\"suppliers\":\"Whether or not to claim JLEND earned by supplying\"}},\"enterMarkets(address[])\":{\"params\":{\"jTokens\":\"The list of addresses of the jToken markets to be enabled\"},\"returns\":{\"_0\":\"Success indicator for whether each corresponding market was entered\"}},\"exitMarket(address)\":{\"details\":\"Sender must not have an outstanding borrow balance in the asset,  or be providing necessary collateral for an outstanding borrow.\",\"params\":{\"jTokenAddress\":\"The address of the asset to be removed\"},\"returns\":{\"_0\":\"Whether or not the account successfully exited the market\"}},\"getAccountLiquidity(address)\":{\"returns\":{\"_0\":\"(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)\"}},\"getAllMarkets()\":{\"details\":\"The automatic getter may be used to access an individual market.\",\"returns\":{\"_0\":\"The list of market addresses\"}},\"getAssetsIn(address)\":{\"params\":{\"account\":\"The address of the account to pull assets for\"},\"returns\":{\"_0\":\"A dynamic list with the assets the account has entered\"}},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"params\":{\"account\":\"The account to determine liquidity for\",\"borrowAmount\":\"The amount of underlying to hypothetically borrow\",\"jTokenModify\":\"The market to hypothetically redeem/borrow in\",\"redeemTokens\":\"The number of tokens to hypothetically redeem\"},\"returns\":{\"_0\":\"(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,          hypothetical account shortfall below collateral requirements)\"}},\"getJLendAddress()\":{\"returns\":{\"_0\":\"The address of JLEND\"}},\"isDeprecated(address)\":{\"details\":\"All borrows in a deprecated jToken market can be immediately liquidated\",\"params\":{\"jToken\":\"The market to check if deprecated\"}},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"jTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"jTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"repayAmount\":\"The amount of underlying being repaid\"}},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"jTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"jTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\"}},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"details\":\"Used in liquidation (called in jToken.liquidateBorrowFresh)\",\"params\":{\"actualRepayAmount\":\"The amount of jTokenBorrowed underlying to convert into jTokenCollateral tokens\",\"jTokenBorrowed\":\"The address of the borrowed jToken\",\"jTokenCollateral\":\"The address of the collateral jToken\"},\"returns\":{\"_0\":\"(errorCode, number of jTokenCollateral tokens to be seized in a liquidation)\"}},\"mintAllowed(address,address,uint256)\":{\"params\":{\"jToken\":\"The market to verify the mint against\",\"mintAmount\":\"The amount of underlying being supplied to the market in exchange for tokens\",\"minter\":\"The account which would get the minted tokens\"},\"returns\":{\"_0\":\"0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"mintVerify(address,address,uint256,uint256)\":{\"params\":{\"actualMintAmount\":\"The amount of the underlying asset being minted\",\"jToken\":\"Asset being minted\",\"mintTokens\":\"The number of tokens being minted\",\"minter\":\"The address minting the tokens\"}},\"redeemAllowed(address,address,uint256)\":{\"params\":{\"jToken\":\"The market to verify the redeem against\",\"redeemTokens\":\"The number of jTokens to exchange for the underlying asset in the market\",\"redeemer\":\"The account which would redeem the tokens\"},\"returns\":{\"_0\":\"0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"redeemVerify(address,address,uint256,uint256)\":{\"params\":{\"jToken\":\"Asset being redeemed\",\"redeemAmount\":\"The amount of the underlying asset being redeemed\",\"redeemTokens\":\"The number of tokens being redeemed\",\"redeemer\":\"The address redeeming the tokens\"}},\"repayBorrowAllowed(address,address,address,uint256)\":{\"params\":{\"borrower\":\"The account which would borrowed the asset\",\"jToken\":\"The market to verify the repay against\",\"payer\":\"The account which would repay the asset\",\"repayAmount\":\"The amount of the underlying asset the account would repay\"},\"returns\":{\"_0\":\"0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"jToken\":\"Asset being repaid\",\"payer\":\"The address repaying the borrow\"}},\"seizeAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"jTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"jTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\"}},\"seizeVerify(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"jTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"jTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\"}},\"transferAllowed(address,address,address,uint256)\":{\"params\":{\"dst\":\"The account which receives the tokens\",\"jToken\":\"The market to verify the transfer against\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of jTokens to transfer\"},\"returns\":{\"_0\":\"0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"transferVerify(address,address,address,uint256)\":{\"params\":{\"dst\":\"The account which receives the tokens\",\"jToken\":\"Asset being transferred\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of jTokens to transfer\"}},\"updateContributorRewards(address)\":{\"params\":{\"contributor\":\"The address to calculate contributor rewards for\"}}},\"title\":\"JLEND's Comptroller Contract\",\"version\":1},\"userdoc\":{\"events\":{\"ActionPaused(address,string,bool)\":{\"notice\":\"Emitted when an action is paused on a market\"},\"ActionPaused(string,bool)\":{\"notice\":\"Emitted when an action is paused globally\"},\"ContributorJLendSpeedUpdated(address,uint256)\":{\"notice\":\"Emitted when a new JLEND speed is set for a contributor\"},\"DistributedBorrowerJLend(address,address,uint256,uint256)\":{\"notice\":\"Emitted when JLEND is distributed to a borrower\"},\"DistributedSupplierJLend(address,address,uint256,uint256)\":{\"notice\":\"Emitted when JLEND is distributed to a supplier\"},\"JLendAccruedAdjusted(address,uint256,uint256)\":{\"notice\":\"Emitted when JLEND accrued for a user has been manually adjusted.\"},\"JLendBorrowSpeedUpdated(address,uint256)\":{\"notice\":\"Emitted when a new borrow-side JLEND speed is calculated for a market\"},\"JLendGranted(address,uint256)\":{\"notice\":\"Emitted when JLEND is granted by admin\"},\"JLendReceivableUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when JLEND receivable for a user has been updated.\"},\"JLendSupplySpeedUpdated(address,uint256)\":{\"notice\":\"Emitted when a new supply-side JLEND speed is calculated for a market\"},\"MarketEntered(address,address)\":{\"notice\":\"Emitted when an account enters a market\"},\"MarketExited(address,address)\":{\"notice\":\"Emitted when an account exits a market\"},\"MarketListed(address)\":{\"notice\":\"Emitted when an admin supports a market\"},\"NewBorrowCap(address,uint256)\":{\"notice\":\"Emitted when borrow cap for a jToken is changed\"},\"NewBorrowCapGuardian(address,address)\":{\"notice\":\"Emitted when borrow cap guardian is changed\"},\"NewCloseFactor(uint256,uint256)\":{\"notice\":\"Emitted when close factor is changed by admin\"},\"NewCollateralFactor(address,uint256,uint256)\":{\"notice\":\"Emitted when a collateral factor is changed by admin\"},\"NewLiquidationIncentive(uint256,uint256)\":{\"notice\":\"Emitted when liquidation incentive is changed by admin\"},\"NewPauseGuardian(address,address)\":{\"notice\":\"Emitted when pause guardian is changed\"},\"NewPriceOracle(address,address)\":{\"notice\":\"Emitted when price oracle is changed\"}},\"kind\":\"user\",\"methods\":{\"_grantJLend(address,uint256)\":{\"notice\":\"Transfer JLEND to the recipient\"},\"_setBorrowCapGuardian(address)\":{\"notice\":\"Admin function to change the Borrow Cap Guardian\"},\"_setCloseFactor(uint256)\":{\"notice\":\"Sets the closeFactor used when liquidating borrows\"},\"_setCollateralFactor(address,uint256)\":{\"notice\":\"Sets the collateralFactor for a market\"},\"_setContributorJLendSpeed(address,uint256)\":{\"notice\":\"Set JLEND speed for a single contributor\"},\"_setJLendSpeeds(address[],uint256[],uint256[])\":{\"notice\":\"Set JLEND borrow and supply speeds for the specified markets.\"},\"_setLiquidationIncentive(uint256)\":{\"notice\":\"Sets liquidationIncentive\"},\"_setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Set the given borrow caps for the given jToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\"},\"_setPauseGuardian(address)\":{\"notice\":\"Admin function to change the Pause Guardian\"},\"_setPriceOracle(address)\":{\"notice\":\"Sets a new price oracle for the comptroller\"},\"_supportMarket(address)\":{\"notice\":\"Add the market to the markets mapping and set it as listed\"},\"accountAssets(address,uint256)\":{\"notice\":\"Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"allMarkets(uint256)\":{\"notice\":\"A list of all markets\"},\"borrowAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to borrow the underlying asset of the given market\"},\"borrowVerify(address,address,uint256)\":{\"notice\":\"Validates borrow and reverts on rejection. May emit logs.\"},\"checkMembership(address,address)\":{\"notice\":\"Returns whether the given account is entered in the given asset\"},\"claimJLend(address)\":{\"notice\":\"Claim all the jLend accrued by holder in all markets\"},\"claimJLend(address,address[])\":{\"notice\":\"Claim all the jLend accrued by holder in the specified markets\"},\"claimJLend(address[],address[],bool,bool)\":{\"notice\":\"Claim all jLend accrued by the holders\"},\"closeFactorMantissa()\":{\"notice\":\"Multiplier used to calculate the maximum repayAmount when liquidating a borrow\"},\"comptrollerImplementation()\":{\"notice\":\"Active brains of Unitroller\"},\"enterMarkets(address[])\":{\"notice\":\"Add assets to be included in account liquidity calculation\"},\"exitMarket(address)\":{\"notice\":\"Removes asset from sender's account liquidity calculation\"},\"fixBadAccruals(address[],uint256[])\":{\"notice\":\"Delete this function after proposal 65 is executed\"},\"getAccountLiquidity(address)\":{\"notice\":\"Determine the current account liquidity wrt collateral requirements\"},\"getAllMarkets()\":{\"notice\":\"Return all of the markets\"},\"getAssetsIn(address)\":{\"notice\":\"Returns the assets an account has entered\"},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"notice\":\"Determine what the account liquidity would be if the given amounts were redeemed/borrowed\"},\"getJLendAddress()\":{\"notice\":\"Return the address of the JLEND token\"},\"isComptroller()\":{\"notice\":\"Indicator that this is a Comptroller contract (for inspection)\"},\"isDeprecated(address)\":{\"notice\":\"Returns true if the given jToken market has been deprecated\"},\"jLendAccrued(address)\":{\"notice\":\"The JLEND accrued but not yet transferred to each user\"},\"jLendBorrowSpeeds(address)\":{\"notice\":\"The rate at which jLend is distributed to the corresponding borrow market (per block)\"},\"jLendBorrowState(address)\":{\"notice\":\"The JLEND market borrow state for each market\"},\"jLendBorrowerIndex(address,address)\":{\"notice\":\"The JLEND borrow index for each market for each borrower as of the last time they accrued JLEND\"},\"jLendContributorSpeeds(address)\":{\"notice\":\"The portion of JLEND that each contributor receives per block\"},\"jLendInitialIndex()\":{\"notice\":\"The initial JLEND index for a market\"},\"jLendRate()\":{\"notice\":\"The rate at which the flywheel distributes JLEND, per block\"},\"jLendReceivable(address)\":{\"notice\":\"Accounting storage mapping account addresses to how much JLEND they owe the protocol.\"},\"jLendSpeeds(address)\":{\"notice\":\"The portion of jLendRate that each market currently receives\"},\"jLendSupplierIndex(address,address)\":{\"notice\":\"The JLEND borrow index for each market for each supplier as of the last time they accrued JLEND\"},\"jLendSupplySpeeds(address)\":{\"notice\":\"The rate at which jLend is distributed to the corresponding supply market (per block)\"},\"jLendSupplyState(address)\":{\"notice\":\"The JLEND market supply state for each market\"},\"lastContributorBlock(address)\":{\"notice\":\"Last block at which a contributor's JLEND rewards have been allocated\"},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the liquidation should be allowed to occur\"},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"notice\":\"Validates liquidateBorrow and reverts on rejection. May emit logs.\"},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"notice\":\"Calculate number of tokens of collateral asset to seize given an underlying amount\"},\"liquidationIncentiveMantissa()\":{\"notice\":\"Multiplier representing the discount on collateral that a liquidator receives\"},\"markets(address)\":{\"notice\":\"Official mapping of jTokens -> Market metadata\"},\"maxAssets()\":{\"notice\":\"Max number of assets a single account can participate in (borrow or use as collateral)\"},\"mintAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to mint tokens in the given market\"},\"mintVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates mint and reverts on rejection. May emit logs.\"},\"oracle()\":{\"notice\":\"Oracle which gives the price of any given asset\"},\"pauseGuardian()\":{\"notice\":\"The Pause Guardian can pause certain actions as a safety mechanism.  Actions which allow users to remove their own assets cannot be paused.  Liquidation / seizing / transfer can only be paused globally, not by market.\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"pendingComptrollerImplementation()\":{\"notice\":\"Pending brains of Unitroller\"},\"proposal65FixExecuted()\":{\"notice\":\"Flag indicating whether the function to fix JLEND accruals has been executed (RE: proposal 62 bug)\"},\"redeemAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to redeem tokens in the given market\"},\"redeemVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates redeem and reverts on rejection. May emit logs.\"},\"repayBorrowAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to repay a borrow in the given market\"},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"notice\":\"Validates repayBorrow and reverts on rejection. May emit logs.\"},\"seizeAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the seizing of assets should be allowed to occur\"},\"seizeVerify(address,address,address,address,uint256)\":{\"notice\":\"Validates seize and reverts on rejection. May emit logs.\"},\"transferAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to transfer tokens in the given market\"},\"transferVerify(address,address,address,uint256)\":{\"notice\":\"Validates transfer and reverts on rejection. May emit logs.\"},\"updateContributorRewards(address)\":{\"notice\":\"Calculate additional accrued JLEND for a contributor since last accrual\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Comptroller.sol\":\"Comptroller\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Comptroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./JToken.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./Unitroller.sol\\\";\\nimport \\\"./Governance/JLEND.sol\\\";\\n\\n/**\\n * @title JLEND's Comptroller Contract\\n * @author JLEND\\n */\\ncontract Comptroller is\\n  ComptrollerV7Storage,\\n  ComptrollerInterface,\\n  ComptrollerErrorReporter,\\n  ExponentialNoError\\n{\\n  /// @notice Emitted when an admin supports a market\\n  event MarketListed(JToken jToken);\\n\\n  /// @notice Emitted when an account enters a market\\n  event MarketEntered(JToken jToken, address account);\\n\\n  /// @notice Emitted when an account exits a market\\n  event MarketExited(JToken jToken, address account);\\n\\n  /// @notice Emitted when close factor is changed by admin\\n  event NewCloseFactor(uint oldCloseFactorMantissa, uint newCloseFactorMantissa);\\n\\n  /// @notice Emitted when a collateral factor is changed by admin\\n  event NewCollateralFactor(\\n    JToken jToken,\\n    uint oldCollateralFactorMantissa,\\n    uint newCollateralFactorMantissa\\n  );\\n\\n  /// @notice Emitted when liquidation incentive is changed by admin\\n  event NewLiquidationIncentive(uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\\n\\n  /// @notice Emitted when price oracle is changed\\n  event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\\n\\n  /// @notice Emitted when pause guardian is changed\\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n  /// @notice Emitted when an action is paused globally\\n  event ActionPaused(string action, bool pauseState);\\n\\n  /// @notice Emitted when an action is paused on a market\\n  event ActionPaused(JToken jToken, string action, bool pauseState);\\n\\n  /// @notice Emitted when a new borrow-side JLEND speed is calculated for a market\\n  event JLendBorrowSpeedUpdated(JToken indexed jToken, uint newSpeed);\\n\\n  /// @notice Emitted when a new supply-side JLEND speed is calculated for a market\\n  event JLendSupplySpeedUpdated(JToken indexed jToken, uint newSpeed);\\n\\n  /// @notice Emitted when a new JLEND speed is set for a contributor\\n  event ContributorJLendSpeedUpdated(address indexed contributor, uint newSpeed);\\n\\n  /// @notice Emitted when JLEND is distributed to a supplier\\n  event DistributedSupplierJLend(\\n    JToken indexed jToken,\\n    address indexed supplier,\\n    uint jLendDelta,\\n    uint jLendSupplyIndex\\n  );\\n\\n  /// @notice Emitted when JLEND is distributed to a borrower\\n  event DistributedBorrowerJLend(\\n    JToken indexed jToken,\\n    address indexed borrower,\\n    uint jLendDelta,\\n    uint jLendBorrowIndex\\n  );\\n\\n  /// @notice Emitted when borrow cap for a jToken is changed\\n  event NewBorrowCap(JToken indexed jToken, uint newBorrowCap);\\n\\n  /// @notice Emitted when borrow cap guardian is changed\\n  event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\\n\\n  /// @notice Emitted when JLEND is granted by admin\\n  event JLendGranted(address recipient, uint amount);\\n\\n  /// @notice Emitted when JLEND accrued for a user has been manually adjusted.\\n  event JLendAccruedAdjusted(address indexed user, uint oldJLendAccrued, uint newJLendAccrued);\\n\\n  /// @notice Emitted when JLEND receivable for a user has been updated.\\n  event JLendReceivableUpdated(address indexed user, uint oldJLendReceivable, uint newJLendReceivable);\\n\\n  /// @notice The initial JLEND index for a market\\n  uint224 public constant jLendInitialIndex = 1e36;\\n\\n  // closeFactorMantissa must be strictly greater than this value\\n  uint internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\n\\n  // closeFactorMantissa must not exceed this value\\n  uint internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\n\\n  // No collateralFactorMantissa may exceed this value\\n  uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n  constructor() {\\n    admin = msg.sender;\\n  }\\n\\n  /*** Assets You Are In ***/\\n\\n  /**\\n   * @notice Returns the assets an account has entered\\n   * @param account The address of the account to pull assets for\\n   * @return A dynamic list with the assets the account has entered\\n   */\\n  function getAssetsIn(address account) external view returns (JToken[] memory) {\\n    JToken[] memory assetsIn = accountAssets[account];\\n\\n    return assetsIn;\\n  }\\n\\n  /**\\n   * @notice Returns whether the given account is entered in the given asset\\n   * @param account The address of the account to check\\n   * @param jToken The jToken to check\\n   * @return True if the account is in the asset, otherwise false.\\n   */\\n  function checkMembership(address account, JToken jToken) external view returns (bool) {\\n    return markets[address(jToken)].accountMembership[account];\\n  }\\n\\n  /**\\n   * @notice Add assets to be included in account liquidity calculation\\n   * @param jTokens The list of addresses of the jToken markets to be enabled\\n   * @return Success indicator for whether each corresponding market was entered\\n   */\\n  function enterMarkets(address[] memory jTokens) public override returns (uint[] memory) {\\n    uint len = jTokens.length;\\n\\n    uint[] memory results = new uint[](len);\\n    for (uint i = 0; i < len; i++) {\\n      JToken jToken = JToken(jTokens[i]);\\n\\n      results[i] = uint(addToMarketInternal(jToken, msg.sender));\\n    }\\n\\n    return results;\\n  }\\n\\n  /**\\n   * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n   * @param jToken The market to enter\\n   * @param borrower The address of the account to modify\\n   * @return Success indicator for whether the market was entered\\n   */\\n  function addToMarketInternal(JToken jToken, address borrower) internal returns (Error) {\\n    Market storage marketToJoin = markets[address(jToken)];\\n\\n    if (!marketToJoin.isListed) {\\n      // market is not listed, cannot join\\n      return Error.MARKET_NOT_LISTED;\\n    }\\n\\n    if (marketToJoin.accountMembership[borrower] == true) {\\n      // already joined\\n      return Error.NO_ERROR;\\n    }\\n\\n    // survived the gauntlet, add to list\\n    // NOTE: we store these somewhat redundantly as a significant optimization\\n    //  this avoids having to iterate through the list for the most common use cases\\n    //  that is, only when we need to perform liquidity checks\\n    //  and not whenever we want to check if an account is in a particular market\\n    marketToJoin.accountMembership[borrower] = true;\\n    accountAssets[borrower].push(jToken);\\n\\n    emit MarketEntered(jToken, borrower);\\n\\n    return Error.NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Removes asset from sender's account liquidity calculation\\n   * @dev Sender must not have an outstanding borrow balance in the asset,\\n   *  or be providing necessary collateral for an outstanding borrow.\\n   * @param jTokenAddress The address of the asset to be removed\\n   * @return Whether or not the account successfully exited the market\\n   */\\n  function exitMarket(address jTokenAddress) external override returns (uint) {\\n    JToken jToken = JToken(jTokenAddress);\\n    /* Get sender tokensHeld and amountOwed underlying from the jToken */\\n    (uint oErr, uint tokensHeld, uint amountOwed, ) = jToken.getAccountSnapshot(msg.sender);\\n    require(oErr == 0, \\\"exitMarket: getAccountSnapshot failed\\\"); // semi-opaque error code\\n\\n    /* Fail if the sender has a borrow balance */\\n    if (amountOwed != 0) {\\n      return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\n    }\\n\\n    /* Fail if the sender is not permitted to redeem all of their tokens */\\n    uint allowed = redeemAllowedInternal(jTokenAddress, msg.sender, tokensHeld);\\n    if (allowed != 0) {\\n      return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\n    }\\n\\n    Market storage marketToExit = markets[address(jToken)];\\n\\n    /* Return true if the sender is not already \\u2018in\\u2019 the market */\\n    if (!marketToExit.accountMembership[msg.sender]) {\\n      return uint(Error.NO_ERROR);\\n    }\\n\\n    /* Set jToken account membership to false */\\n    delete marketToExit.accountMembership[msg.sender];\\n\\n    /* Delete jToken from the account\\u2019s list of assets */\\n    // load into memory for faster iteration\\n    JToken[] memory userAssetList = accountAssets[msg.sender];\\n    uint len = userAssetList.length;\\n    uint assetIndex = len;\\n    for (uint i = 0; i < len; i++) {\\n      if (userAssetList[i] == jToken) {\\n        assetIndex = i;\\n        break;\\n      }\\n    }\\n\\n    // We *must* have found the asset in the list or our redundant data structure is broken\\n    assert(assetIndex < len);\\n\\n    // copy last item in list to location of item to be removed, reduce length by 1\\n    JToken[] storage storedList = accountAssets[msg.sender];\\n    storedList[assetIndex] = storedList[storedList.length - 1];\\n    storedList.pop();\\n\\n    emit MarketExited(jToken, msg.sender);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /*** Policy Hooks ***/\\n\\n  /**\\n   * @notice Checks if the account should be allowed to mint tokens in the given market\\n   * @param jToken The market to verify the mint against\\n   * @param minter The account which would get the minted tokens\\n   * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n   * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function mintAllowed(address jToken, address minter, uint mintAmount) external override returns (uint) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!mintGuardianPaused[jToken], \\\"mint is paused\\\");\\n\\n    // Shh - currently unused\\n    minter;\\n    mintAmount;\\n\\n    if (!markets[jToken].isListed) {\\n      return uint(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    // Keep the flywheel moving\\n    updateJLendSupplyIndex(jToken);\\n    distributeSupplierJLend(jToken, minter);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates mint and reverts on rejection. May emit logs.\\n   * @param jToken Asset being minted\\n   * @param minter The address minting the tokens\\n   * @param actualMintAmount The amount of the underlying asset being minted\\n   * @param mintTokens The number of tokens being minted\\n   */\\n  function mintVerify(\\n    address jToken,\\n    address minter,\\n    uint actualMintAmount,\\n    uint mintTokens\\n  ) external override {\\n    // Shh - currently unused\\n    jToken;\\n    minter;\\n    actualMintAmount;\\n    mintTokens;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to redeem tokens in the given market\\n   * @param jToken The market to verify the redeem against\\n   * @param redeemer The account which would redeem the tokens\\n   * @param redeemTokens The number of jTokens to exchange for the underlying asset in the market\\n   * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function redeemAllowed(\\n    address jToken,\\n    address redeemer,\\n    uint redeemTokens\\n  ) external override returns (uint) {\\n    uint allowed = redeemAllowedInternal(jToken, redeemer, redeemTokens);\\n    if (allowed != uint(Error.NO_ERROR)) {\\n      return allowed;\\n    }\\n\\n    // Keep the flywheel moving\\n    updateJLendSupplyIndex(jToken);\\n    distributeSupplierJLend(jToken, redeemer);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  function redeemAllowedInternal(\\n    address jToken,\\n    address redeemer,\\n    uint redeemTokens\\n  ) internal view returns (uint) {\\n    if (!markets[jToken].isListed) {\\n      return uint(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n    if (!markets[jToken].accountMembership[redeemer]) {\\n      return uint(Error.NO_ERROR);\\n    }\\n\\n    /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n    (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(\\n      redeemer,\\n      JToken(jToken),\\n      redeemTokens,\\n      0\\n    );\\n    if (err != Error.NO_ERROR) {\\n      return uint(err);\\n    }\\n    if (shortfall > 0) {\\n      return uint(Error.INSUFFICIENT_LIQUIDITY);\\n    }\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates redeem and reverts on rejection. May emit logs.\\n   * @param jToken Asset being redeemed\\n   * @param redeemer The address redeeming the tokens\\n   * @param redeemAmount The amount of the underlying asset being redeemed\\n   * @param redeemTokens The number of tokens being redeemed\\n   */\\n  function redeemVerify(\\n    address jToken,\\n    address redeemer,\\n    uint redeemAmount,\\n    uint redeemTokens\\n  ) external override {\\n    // Shh - currently unused\\n    jToken;\\n    redeemer;\\n\\n    // Require tokens is zero or amount is also zero\\n    if (redeemTokens == 0 && redeemAmount > 0) {\\n      revert(\\\"redeemTokens zero\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n   * @param jToken The market to verify the borrow against\\n   * @param borrower The account which would borrow the asset\\n   * @param borrowAmount The amount of underlying the account would borrow\\n   * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function borrowAllowed(\\n    address jToken,\\n    address borrower,\\n    uint borrowAmount\\n  ) external override returns (uint) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!borrowGuardianPaused[jToken], \\\"borrow is paused\\\");\\n\\n    if (!markets[jToken].isListed) {\\n      return uint(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    if (!markets[jToken].accountMembership[borrower]) {\\n      // only jTokens may call borrowAllowed if borrower not in market\\n      require(msg.sender == jToken, \\\"sender must be jToken\\\");\\n\\n      // attempt to add borrower to the market\\n      Error err = addToMarketInternal(JToken(msg.sender), borrower);\\n      if (err != Error.NO_ERROR) {\\n        return uint(err);\\n      }\\n\\n      // it should be impossible to break the important invariant\\n      assert(markets[jToken].accountMembership[borrower]);\\n    }\\n\\n    if (oracle.getUnderlyingPrice(JToken(jToken)) == 0) {\\n      return uint(Error.PRICE_ERROR);\\n    }\\n\\n    uint borrowCap = borrowCaps[jToken];\\n    // Borrow cap of 0 corresponds to unlimited borrowing\\n    if (borrowCap != 0) {\\n      uint totalBorrows = JToken(jToken).totalBorrows();\\n      uint nextTotalBorrows = add_(totalBorrows, borrowAmount);\\n      require(nextTotalBorrows < borrowCap, \\\"market borrow cap reached\\\");\\n    }\\n\\n    (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(\\n      borrower,\\n      JToken(jToken),\\n      0,\\n      borrowAmount\\n    );\\n    if (err != Error.NO_ERROR) {\\n      return uint(err);\\n    }\\n    if (shortfall > 0) {\\n      return uint(Error.INSUFFICIENT_LIQUIDITY);\\n    }\\n\\n    // Keep the flywheel moving\\n    Exp memory borrowIndex = Exp({mantissa: JToken(jToken).borrowIndex()});\\n    updateJLendBorrowIndex(jToken, borrowIndex);\\n    distributeBorrowerJLend(jToken, borrower, borrowIndex);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates borrow and reverts on rejection. May emit logs.\\n   * @param jToken Asset whose underlying is being borrowed\\n   * @param borrower The address borrowing the underlying\\n   * @param borrowAmount The amount of the underlying asset requested to borrow\\n   */\\n  function borrowVerify(address jToken, address borrower, uint borrowAmount) external override {\\n    // Shh - currently unused\\n    jToken;\\n    borrower;\\n    borrowAmount;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to repay a borrow in the given market\\n   * @param jToken The market to verify the repay against\\n   * @param payer The account which would repay the asset\\n   * @param borrower The account which would borrowed the asset\\n   * @param repayAmount The amount of the underlying asset the account would repay\\n   * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function repayBorrowAllowed(\\n    address jToken,\\n    address payer,\\n    address borrower,\\n    uint repayAmount\\n  ) external override returns (uint) {\\n    // Shh - currently unused\\n    payer;\\n    borrower;\\n    repayAmount;\\n\\n    if (!markets[jToken].isListed) {\\n      return uint(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    // Keep the flywheel moving\\n    Exp memory borrowIndex = Exp({mantissa: JToken(jToken).borrowIndex()});\\n    updateJLendBorrowIndex(jToken, borrowIndex);\\n    distributeBorrowerJLend(jToken, borrower, borrowIndex);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\n   * @param jToken Asset being repaid\\n   * @param payer The address repaying the borrow\\n   * @param borrower The address of the borrower\\n   * @param actualRepayAmount The amount of underlying being repaid\\n   */\\n  function repayBorrowVerify(\\n    address jToken,\\n    address payer,\\n    address borrower,\\n    uint actualRepayAmount,\\n    uint borrowerIndex\\n  ) external override {\\n    // Shh - currently unused\\n    jToken;\\n    payer;\\n    borrower;\\n    actualRepayAmount;\\n    borrowerIndex;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the liquidation should be allowed to occur\\n   * @param jTokenBorrowed Asset which was borrowed by the borrower\\n   * @param jTokenCollateral Asset which was used as collateral and will be seized\\n   * @param liquidator The address repaying the borrow and seizing the collateral\\n   * @param borrower The address of the borrower\\n   * @param repayAmount The amount of underlying being repaid\\n   */\\n  function liquidateBorrowAllowed(\\n    address jTokenBorrowed,\\n    address jTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint repayAmount\\n  ) external override returns (uint) {\\n    // Shh - currently unused\\n    liquidator;\\n\\n    if (!markets[jTokenBorrowed].isListed || !markets[jTokenCollateral].isListed) {\\n      return uint(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    uint borrowBalance = JToken(jTokenBorrowed).borrowBalanceStored(borrower);\\n\\n    /* allow accounts to be liquidated if the market is deprecated */\\n    if (isDeprecated(JToken(jTokenBorrowed))) {\\n      require(borrowBalance >= repayAmount, \\\"Can not repay more than the total borrow\\\");\\n    } else {\\n      /* The borrower must have shortfall in order to be liquidatable */\\n      (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower);\\n      if (err != Error.NO_ERROR) {\\n        return uint(err);\\n      }\\n\\n      if (shortfall == 0) {\\n        return uint(Error.INSUFFICIENT_SHORTFALL);\\n      }\\n\\n      /* The liquidator may not repay more than what is allowed by the closeFactor */\\n      uint maxClose = mul_ScalarTruncate(Exp({mantissa: closeFactorMantissa}), borrowBalance);\\n      if (repayAmount > maxClose) {\\n        return uint(Error.TOO_MUCH_REPAY);\\n      }\\n    }\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\n   * @param jTokenBorrowed Asset which was borrowed by the borrower\\n   * @param jTokenCollateral Asset which was used as collateral and will be seized\\n   * @param liquidator The address repaying the borrow and seizing the collateral\\n   * @param borrower The address of the borrower\\n   * @param actualRepayAmount The amount of underlying being repaid\\n   */\\n  function liquidateBorrowVerify(\\n    address jTokenBorrowed,\\n    address jTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint actualRepayAmount,\\n    uint seizeTokens\\n  ) external override {\\n    // Shh - currently unused\\n    jTokenBorrowed;\\n    jTokenCollateral;\\n    liquidator;\\n    borrower;\\n    actualRepayAmount;\\n    seizeTokens;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the seizing of assets should be allowed to occur\\n   * @param jTokenCollateral Asset which was used as collateral and will be seized\\n   * @param jTokenBorrowed Asset which was borrowed by the borrower\\n   * @param liquidator The address repaying the borrow and seizing the collateral\\n   * @param borrower The address of the borrower\\n   * @param seizeTokens The number of collateral tokens to seize\\n   */\\n  function seizeAllowed(\\n    address jTokenCollateral,\\n    address jTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint seizeTokens\\n  ) external override returns (uint) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!seizeGuardianPaused, \\\"seize is paused\\\");\\n\\n    // Shh - currently unused\\n    seizeTokens;\\n\\n    if (!markets[jTokenCollateral].isListed || !markets[jTokenBorrowed].isListed) {\\n      return uint(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    if (JToken(jTokenCollateral).comptroller() != JToken(jTokenBorrowed).comptroller()) {\\n      return uint(Error.COMPTROLLER_MISMATCH);\\n    }\\n\\n    // Keep the flywheel moving\\n    updateJLendSupplyIndex(jTokenCollateral);\\n    distributeSupplierJLend(jTokenCollateral, borrower);\\n    distributeSupplierJLend(jTokenCollateral, liquidator);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates seize and reverts on rejection. May emit logs.\\n   * @param jTokenCollateral Asset which was used as collateral and will be seized\\n   * @param jTokenBorrowed Asset which was borrowed by the borrower\\n   * @param liquidator The address repaying the borrow and seizing the collateral\\n   * @param borrower The address of the borrower\\n   * @param seizeTokens The number of collateral tokens to seize\\n   */\\n  function seizeVerify(\\n    address jTokenCollateral,\\n    address jTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint seizeTokens\\n  ) external override {\\n    // Shh - currently unused\\n    jTokenCollateral;\\n    jTokenBorrowed;\\n    liquidator;\\n    borrower;\\n    seizeTokens;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to transfer tokens in the given market\\n   * @param jToken The market to verify the transfer against\\n   * @param src The account which sources the tokens\\n   * @param dst The account which receives the tokens\\n   * @param transferTokens The number of jTokens to transfer\\n   * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function transferAllowed(\\n    address jToken,\\n    address src,\\n    address dst,\\n    uint transferTokens\\n  ) external override returns (uint) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!transferGuardianPaused, \\\"transfer is paused\\\");\\n\\n    // Currently the only consideration is whether or not\\n    //  the src is allowed to redeem this many tokens\\n    uint allowed = redeemAllowedInternal(jToken, src, transferTokens);\\n    if (allowed != uint(Error.NO_ERROR)) {\\n      return allowed;\\n    }\\n\\n    // Keep the flywheel moving\\n    updateJLendSupplyIndex(jToken);\\n    distributeSupplierJLend(jToken, src);\\n    distributeSupplierJLend(jToken, dst);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates transfer and reverts on rejection. May emit logs.\\n   * @param jToken Asset being transferred\\n   * @param src The account which sources the tokens\\n   * @param dst The account which receives the tokens\\n   * @param transferTokens The number of jTokens to transfer\\n   */\\n  function transferVerify(address jToken, address src, address dst, uint transferTokens) external override {\\n    // Shh - currently unused\\n    jToken;\\n    src;\\n    dst;\\n    transferTokens;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /*** Liquidity/Liquidation Calculations ***/\\n\\n  /**\\n   * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n   *  Note that `jTokenBalance` is the number of jTokens the account owns in the market,\\n   *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n   */\\n  struct AccountLiquidityLocalVars {\\n    uint sumCollateral;\\n    uint sumBorrowPlusEffects;\\n    uint jTokenBalance;\\n    uint borrowBalance;\\n    uint exchangeRateMantissa;\\n    uint oraclePriceMantissa;\\n    Exp collateralFactor;\\n    Exp exchangeRate;\\n    Exp oraclePrice;\\n    Exp tokensToDenom;\\n  }\\n\\n  /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n  function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\\n    (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(\\n      account,\\n      JToken(address(0)),\\n      0,\\n      0\\n    );\\n\\n    return (uint(err), liquidity, shortfall);\\n  }\\n\\n  /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code,\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n  function getAccountLiquidityInternal(address account) internal view returns (Error, uint, uint) {\\n    return getHypotheticalAccountLiquidityInternal(account, JToken(address(0)), 0, 0);\\n  }\\n\\n  /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param jTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n  function getHypotheticalAccountLiquidity(\\n    address account,\\n    address jTokenModify,\\n    uint redeemTokens,\\n    uint borrowAmount\\n  ) public view returns (uint, uint, uint) {\\n    (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(\\n      account,\\n      JToken(jTokenModify),\\n      redeemTokens,\\n      borrowAmount\\n    );\\n    return (uint(err), liquidity, shortfall);\\n  }\\n\\n  /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param jTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @dev Note that we calculate the exchangeRateStored for each collateral jToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n  function getHypotheticalAccountLiquidityInternal(\\n    address account,\\n    JToken jTokenModify,\\n    uint redeemTokens,\\n    uint borrowAmount\\n  ) internal view returns (Error, uint, uint) {\\n    AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n    uint oErr;\\n\\n    // For each asset the account is in\\n    JToken[] memory assets = accountAssets[account];\\n    for (uint i = 0; i < assets.length; i++) {\\n      JToken asset = assets[i];\\n\\n      // Read the balances and exchange rate from the jToken\\n      (oErr, vars.jTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(\\n        account\\n      );\\n      if (oErr != 0) {\\n        // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n        return (Error.SNAPSHOT_ERROR, 0, 0);\\n      }\\n      vars.collateralFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});\\n      vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\n\\n      // Get the normalized price of the asset\\n      vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\n      if (vars.oraclePriceMantissa == 0) {\\n        return (Error.PRICE_ERROR, 0, 0);\\n      }\\n      vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\n\\n      // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n      vars.tokensToDenom = mul_(mul_(vars.collateralFactor, vars.exchangeRate), vars.oraclePrice);\\n\\n      // sumCollateral += tokensToDenom * jTokenBalance\\n      vars.sumCollateral = mul_ScalarTruncateAddUInt(\\n        vars.tokensToDenom,\\n        vars.jTokenBalance,\\n        vars.sumCollateral\\n      );\\n\\n      // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n      vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n        vars.oraclePrice,\\n        vars.borrowBalance,\\n        vars.sumBorrowPlusEffects\\n      );\\n\\n      // Calculate effects of interacting with jTokenModify\\n      if (asset == jTokenModify) {\\n        // redeem effect\\n        // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n          vars.tokensToDenom,\\n          redeemTokens,\\n          vars.sumBorrowPlusEffects\\n        );\\n\\n        // borrow effect\\n        // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n          vars.oraclePrice,\\n          borrowAmount,\\n          vars.sumBorrowPlusEffects\\n        );\\n      }\\n    }\\n\\n    // These are safe, as the underflow condition is checked first\\n    if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n      return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\\n    } else {\\n      return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n   * @dev Used in liquidation (called in jToken.liquidateBorrowFresh)\\n   * @param jTokenBorrowed The address of the borrowed jToken\\n   * @param jTokenCollateral The address of the collateral jToken\\n   * @param actualRepayAmount The amount of jTokenBorrowed underlying to convert into jTokenCollateral tokens\\n   * @return (errorCode, number of jTokenCollateral tokens to be seized in a liquidation)\\n   */\\n  function liquidateCalculateSeizeTokens(\\n    address jTokenBorrowed,\\n    address jTokenCollateral,\\n    uint actualRepayAmount\\n  ) external view override returns (uint, uint) {\\n    /* Read oracle prices for borrowed and collateral markets */\\n    uint priceBorrowedMantissa = oracle.getUnderlyingPrice(JToken(jTokenBorrowed));\\n    uint priceCollateralMantissa = oracle.getUnderlyingPrice(JToken(jTokenCollateral));\\n    if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n      return (uint(Error.PRICE_ERROR), 0);\\n    }\\n\\n    /*\\n     * Get the exchange rate and calculate the number of collateral tokens to seize:\\n     *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n     *  seizeTokens = seizeAmount / exchangeRate\\n     *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n     */\\n    uint exchangeRateMantissa = JToken(jTokenCollateral).exchangeRateStored(); // Note: reverts on error\\n    uint seizeTokens;\\n    Exp memory numerator;\\n    Exp memory denominator;\\n    Exp memory ratio;\\n\\n    numerator = mul_(Exp({mantissa: liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));\\n    denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));\\n    ratio = div_(numerator, denominator);\\n\\n    seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n\\n    return (uint(Error.NO_ERROR), seizeTokens);\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  /**\\n   * @notice Sets a new price oracle for the comptroller\\n   * @dev Admin function to set a new price oracle\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setPriceOracle(PriceOracle newOracle) public returns (uint) {\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\\n    }\\n\\n    // Track the old oracle for the comptroller\\n    PriceOracle oldOracle = oracle;\\n\\n    // Set comptroller's oracle to newOracle\\n    oracle = newOracle;\\n\\n    // Emit NewPriceOracle(oldOracle, newOracle)\\n    emit NewPriceOracle(oldOracle, newOracle);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets the closeFactor used when liquidating borrows\\n   * @dev Admin function to set closeFactor\\n   * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n   * @return uint 0=success, otherwise a failure\\n   */\\n  function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint) {\\n    // Check caller is admin\\n    require(msg.sender == admin, \\\"only admin can set close factor\\\");\\n\\n    uint oldCloseFactorMantissa = closeFactorMantissa;\\n    closeFactorMantissa = newCloseFactorMantissa;\\n    emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets the collateralFactor for a market\\n   * @dev Admin function to set per-market collateralFactor\\n   * @param jToken The market to set the factor on\\n   * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n   */\\n  function _setCollateralFactor(JToken jToken, uint newCollateralFactorMantissa) external returns (uint) {\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\\n    }\\n\\n    // Verify market is listed\\n    Market storage market = markets[address(jToken)];\\n    if (!market.isListed) {\\n      return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\n    }\\n\\n    Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\\n\\n    // Check collateral factor <= 0.9\\n    Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\n    if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n      return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\n    }\\n\\n    // If collateral factor != 0, fail if price == 0\\n    if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(jToken) == 0) {\\n      return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\n    }\\n\\n    // Set market's collateral factor to new collateral factor, remember old value\\n    uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n    market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n    // Emit event with asset, old collateral factor, and new collateral factor\\n    emit NewCollateralFactor(jToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets liquidationIncentive\\n   * @dev Admin function to set liquidationIncentive\\n   * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n   */\\n  function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint) {\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\n    }\\n\\n    // Save current value for use in log\\n    uint oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\n\\n    // Set liquidation incentive to new incentive\\n    liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n    // Emit event with old incentive, new incentive\\n    emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Add the market to the markets mapping and set it as listed\\n   * @dev Admin function to set isListed and add support for the market\\n   * @param jToken The address of the market (token) to list\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _supportMarket(JToken jToken) external returns (uint) {\\n    if (msg.sender != admin) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\n    }\\n\\n    if (markets[address(jToken)].isListed) {\\n      return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\n    }\\n\\n    jToken.isJToken(); // Sanity check to make sure its really a JToken\\n\\n    // Note that isJLended is not in active use anymore\\n    Market storage newMarket = markets[address(jToken)];\\n    newMarket.isListed = true;\\n    newMarket.isJLended = false;\\n    newMarket.collateralFactorMantissa = 0;\\n\\n    _addMarketInternal(address(jToken));\\n    _initializeMarket(address(jToken));\\n\\n    emit MarketListed(jToken);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  function _addMarketInternal(address jToken) internal {\\n    for (uint i = 0; i < allMarkets.length; i++) {\\n      require(allMarkets[i] != JToken(jToken), \\\"market already added\\\");\\n    }\\n    allMarkets.push(JToken(jToken));\\n  }\\n\\n  function _initializeMarket(address jToken) internal {\\n    uint32 blockNumber = safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\");\\n\\n    JLendMarketState storage supplyState = jLendSupplyState[jToken];\\n    JLendMarketState storage borrowState = jLendBorrowState[jToken];\\n\\n    /*\\n     * Update market state indices\\n     */\\n    if (supplyState.index == 0) {\\n      // Initialize supply state index with default value\\n      supplyState.index = jLendInitialIndex;\\n    }\\n\\n    if (borrowState.index == 0) {\\n      // Initialize borrow state index with default value\\n      borrowState.index = jLendInitialIndex;\\n    }\\n\\n    /*\\n     * Update market state block numbers\\n     */\\n    supplyState.block = borrowState.block = blockNumber;\\n  }\\n\\n  /**\\n   * @notice Set the given borrow caps for the given jToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n   * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n   * @param jTokens The addresses of the markets (tokens) to change the borrow caps for\\n   * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n   */\\n  function _setMarketBorrowCaps(JToken[] calldata jTokens, uint[] calldata newBorrowCaps) external {\\n    require(\\n      msg.sender == admin || msg.sender == borrowCapGuardian,\\n      \\\"only admin or borrow cap guardian can set borrow caps\\\"\\n    );\\n\\n    uint numMarkets = jTokens.length;\\n    uint numBorrowCaps = newBorrowCaps.length;\\n\\n    require(numMarkets != 0 && numMarkets == numBorrowCaps, \\\"invalid input\\\");\\n\\n    for (uint i = 0; i < numMarkets; i++) {\\n      borrowCaps[address(jTokens[i])] = newBorrowCaps[i];\\n      emit NewBorrowCap(jTokens[i], newBorrowCaps[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Admin function to change the Borrow Cap Guardian\\n   * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\n   */\\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\n    require(msg.sender == admin, \\\"only admin can set borrow cap guardian\\\");\\n\\n    // Save current value for inclusion in log\\n    address oldBorrowCapGuardian = borrowCapGuardian;\\n\\n    // Store borrowCapGuardian with value newBorrowCapGuardian\\n    borrowCapGuardian = newBorrowCapGuardian;\\n\\n    // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\n    emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\n  }\\n\\n  /**\\n   * @notice Admin function to change the Pause Guardian\\n   * @param newPauseGuardian The address of the new Pause Guardian\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\\n    if (msg.sender != admin) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\\n    }\\n\\n    // Save current value for inclusion in log\\n    address oldPauseGuardian = pauseGuardian;\\n\\n    // Store pauseGuardian with value newPauseGuardian\\n    pauseGuardian = newPauseGuardian;\\n\\n    // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n    emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  function _setMintPaused(JToken jToken, bool state) public returns (bool) {\\n    require(markets[address(jToken)].isListed, \\\"cannot pause a market that is not listed\\\");\\n    require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n    require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n    mintGuardianPaused[address(jToken)] = state;\\n    emit ActionPaused(jToken, \\\"Mint\\\", state);\\n    return state;\\n  }\\n\\n  function _setBorrowPaused(JToken jToken, bool state) public returns (bool) {\\n    require(markets[address(jToken)].isListed, \\\"cannot pause a market that is not listed\\\");\\n    require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n    require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n    borrowGuardianPaused[address(jToken)] = state;\\n    emit ActionPaused(jToken, \\\"Borrow\\\", state);\\n    return state;\\n  }\\n\\n  function _setTransferPaused(bool state) public returns (bool) {\\n    require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n    require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n    transferGuardianPaused = state;\\n    emit ActionPaused(\\\"Transfer\\\", state);\\n    return state;\\n  }\\n\\n  function _setSeizePaused(bool state) public returns (bool) {\\n    require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n    require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n    seizeGuardianPaused = state;\\n    emit ActionPaused(\\\"Seize\\\", state);\\n    return state;\\n  }\\n\\n  function _become(Unitroller unitroller) public {\\n    require(msg.sender == unitroller.admin(), \\\"only unitroller admin can change brains\\\");\\n    require(unitroller._acceptImplementation() == 0, \\\"change not authorized\\\");\\n  }\\n\\n  /// @notice Delete this function after proposal 65 is executed\\n  function fixBadAccruals(address[] calldata affectedUsers, uint[] calldata amounts) external {\\n    require(msg.sender == admin, \\\"Only admin can call this function\\\"); // Only the timelock can call this function\\n    require(!proposal65FixExecuted, \\\"Already executed this one-off function\\\"); // Require that this function is only called once\\n    require(affectedUsers.length == amounts.length, \\\"Invalid input\\\");\\n\\n    // Loop variables\\n    address user;\\n    uint currentAccrual;\\n    uint amountToSubtract;\\n    uint newAccrual;\\n\\n    // Iterate through all affected users\\n    for (uint i = 0; i < affectedUsers.length; ++i) {\\n      user = affectedUsers[i];\\n      currentAccrual = jLendAccrued[user];\\n\\n      amountToSubtract = amounts[i];\\n\\n      // The case where the user has claimed and received an incorrect amount of JLEND.\\n      // The user has less currently accrued than the amount they incorrectly received.\\n      if (amountToSubtract > currentAccrual) {\\n        // Amount of JLEND the user owes the protocol\\n        uint accountReceivable = amountToSubtract - currentAccrual; // Underflow safe since amountToSubtract > currentAccrual\\n\\n        uint oldReceivable = jLendReceivable[user];\\n        uint newReceivable = add_(oldReceivable, accountReceivable);\\n\\n        // Accounting: record the JLEND debt for the user\\n        jLendReceivable[user] = newReceivable;\\n\\n        emit JLendReceivableUpdated(user, oldReceivable, newReceivable);\\n\\n        amountToSubtract = currentAccrual;\\n      }\\n\\n      if (amountToSubtract > 0) {\\n        // Subtract the bad accrual amount from what they have accrued.\\n        // Users will keep whatever they have correctly accrued.\\n        jLendAccrued[user] = newAccrual = sub_(currentAccrual, amountToSubtract);\\n\\n        emit JLendAccruedAdjusted(user, currentAccrual, newAccrual);\\n      }\\n    }\\n\\n    proposal65FixExecuted = true; // Makes it so that this function cannot be called again\\n  }\\n\\n  /**\\n   * @notice Checks caller is admin, or this contract is becoming the new implementation\\n   */\\n  function adminOrInitializing() internal view returns (bool) {\\n    return msg.sender == admin || msg.sender == comptrollerImplementation;\\n  }\\n\\n  /*** JLEND Distribution ***/\\n\\n  /**\\n   * @notice Set JLEND speed for a single market\\n   * @param jToken The market whose JLEND speed to update\\n   * @param supplySpeed New supply-side JLEND speed for market\\n   * @param borrowSpeed New borrow-side JLEND speed for market\\n   */\\n  function setJLendSpeedInternal(JToken jToken, uint supplySpeed, uint borrowSpeed) internal {\\n    Market storage market = markets[address(jToken)];\\n    require(market.isListed, \\\"jLend market is not listed\\\");\\n\\n    if (jLendSupplySpeeds[address(jToken)] != supplySpeed) {\\n      // Supply speed updated so let's update supply state to ensure that\\n      //  1. JLEND accrued properly for the old speed, and\\n      //  2. JLEND accrued at the new speed starts after this block.\\n      updateJLendSupplyIndex(address(jToken));\\n\\n      // Update speed and emit event\\n      jLendSupplySpeeds[address(jToken)] = supplySpeed;\\n      emit JLendSupplySpeedUpdated(jToken, supplySpeed);\\n    }\\n\\n    if (jLendBorrowSpeeds[address(jToken)] != borrowSpeed) {\\n      // Borrow speed updated so let's update borrow state to ensure that\\n      //  1. JLEND accrued properly for the old speed, and\\n      //  2. JLEND accrued at the new speed starts after this block.\\n      Exp memory borrowIndex = Exp({mantissa: jToken.borrowIndex()});\\n      updateJLendBorrowIndex(address(jToken), borrowIndex);\\n\\n      // Update speed and emit event\\n      jLendBorrowSpeeds[address(jToken)] = borrowSpeed;\\n      emit JLendBorrowSpeedUpdated(jToken, borrowSpeed);\\n    }\\n  }\\n\\n  /**\\n   * @notice Accrue JLEND to the market by updating the supply index\\n   * @param jToken The market whose supply index to update\\n   * @dev Index is a cumulative sum of the JLEND per jToken accrued.\\n   */\\n  function updateJLendSupplyIndex(address jToken) internal {\\n    JLendMarketState storage supplyState = jLendSupplyState[jToken];\\n    uint supplySpeed = jLendSupplySpeeds[jToken];\\n    uint32 blockNumber = safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\");\\n    uint deltaBlocks = sub_(uint(blockNumber), uint(supplyState.block));\\n    if (deltaBlocks > 0 && supplySpeed > 0) {\\n      uint supplyTokens = JToken(jToken).totalSupply();\\n      uint jLendAccrued = mul_(deltaBlocks, supplySpeed);\\n      Double memory ratio = supplyTokens > 0 ? fraction(jLendAccrued, supplyTokens) : Double({mantissa: 0});\\n      supplyState.index = safe224(\\n        add_(Double({mantissa: supplyState.index}), ratio).mantissa,\\n        \\\"new index exceeds 224 bits\\\"\\n      );\\n      supplyState.block = blockNumber;\\n    } else if (deltaBlocks > 0) {\\n      supplyState.block = blockNumber;\\n    }\\n  }\\n\\n  /**\\n   * @notice Accrue JLEND to the market by updating the borrow index\\n   * @param jToken The market whose borrow index to update\\n   * @dev Index is a cumulative sum of the JLEND per jToken accrued.\\n   */\\n  function updateJLendBorrowIndex(address jToken, Exp memory marketBorrowIndex) internal {\\n    JLendMarketState storage borrowState = jLendBorrowState[jToken];\\n    uint borrowSpeed = jLendBorrowSpeeds[jToken];\\n    uint32 blockNumber = safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\");\\n    uint deltaBlocks = sub_(uint(blockNumber), uint(borrowState.block));\\n    if (deltaBlocks > 0 && borrowSpeed > 0) {\\n      uint borrowAmount = div_(JToken(jToken).totalBorrows(), marketBorrowIndex);\\n      uint jLendAccrued = mul_(deltaBlocks, borrowSpeed);\\n      Double memory ratio = borrowAmount > 0 ? fraction(jLendAccrued, borrowAmount) : Double({mantissa: 0});\\n      borrowState.index = safe224(\\n        add_(Double({mantissa: borrowState.index}), ratio).mantissa,\\n        \\\"new index exceeds 224 bits\\\"\\n      );\\n      borrowState.block = blockNumber;\\n    } else if (deltaBlocks > 0) {\\n      borrowState.block = blockNumber;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate JLEND accrued by a supplier and possibly transfer it to them\\n   * @param jToken The market in which the supplier is interacting\\n   * @param supplier The address of the supplier to distribute JLEND to\\n   */\\n  function distributeSupplierJLend(address jToken, address supplier) internal {\\n    // TODO: Don't distribute supplier JLEND if the user is not in the supplier market.\\n    // This check should be as gas efficient as possible as distributeSupplierJLend is called in many places.\\n    // - We really don't want to call an external contract as that's quite expensive.\\n\\n    JLendMarketState storage supplyState = jLendSupplyState[jToken];\\n    uint supplyIndex = supplyState.index;\\n    uint supplierIndex = jLendSupplierIndex[jToken][supplier];\\n\\n    // Update supplier's index to the current index since we are distributing accrued JLEND\\n    jLendSupplierIndex[jToken][supplier] = supplyIndex;\\n\\n    if (supplierIndex == 0 && supplyIndex >= jLendInitialIndex) {\\n      // Covers the case where users supplied tokens before the market's supply state index was set.\\n      // Rewards the user with JLEND accrued from the start of when supplier rewards were first\\n      // set for the market.\\n      supplierIndex = jLendInitialIndex;\\n    }\\n\\n    // Calculate change in the cumulative sum of the JLEND per jToken accrued\\n    Double memory deltaIndex = Double({mantissa: sub_(supplyIndex, supplierIndex)});\\n\\n    uint supplierTokens = JToken(jToken).balanceOf(supplier);\\n\\n    // Calculate JLEND accrued: jTokenAmount * accruedPerJToken\\n    uint supplierDelta = mul_(supplierTokens, deltaIndex);\\n\\n    uint supplierAccrued = add_(jLendAccrued[supplier], supplierDelta);\\n    jLendAccrued[supplier] = supplierAccrued;\\n\\n    emit DistributedSupplierJLend(JToken(jToken), supplier, supplierDelta, supplyIndex);\\n  }\\n\\n  /**\\n   * @notice Calculate JLEND accrued by a borrower and possibly transfer it to them\\n   * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n   * @param jToken The market in which the borrower is interacting\\n   * @param borrower The address of the borrower to distribute JLEND to\\n   */\\n  function distributeBorrowerJLend(address jToken, address borrower, Exp memory marketBorrowIndex) internal {\\n    // TODO: Don't distribute supplier JLEND if the user is not in the borrower market.\\n    // This check should be as gas efficient as possible as distributeBorrowerJLend is called in many places.\\n    // - We really don't want to call an external contract as that's quite expensive.\\n\\n    JLendMarketState storage borrowState = jLendBorrowState[jToken];\\n    uint borrowIndex = borrowState.index;\\n    uint borrowerIndex = jLendBorrowerIndex[jToken][borrower];\\n\\n    // Update borrowers's index to the current index since we are distributing accrued JLEND\\n    jLendBorrowerIndex[jToken][borrower] = borrowIndex;\\n\\n    if (borrowerIndex == 0 && borrowIndex >= jLendInitialIndex) {\\n      // Covers the case where users borrowed tokens before the market's borrow state index was set.\\n      // Rewards the user with JLEND accrued from the start of when borrower rewards were first\\n      // set for the market.\\n      borrowerIndex = jLendInitialIndex;\\n    }\\n\\n    // Calculate change in the cumulative sum of the JLEND per borrowed unit accrued\\n    Double memory deltaIndex = Double({mantissa: sub_(borrowIndex, borrowerIndex)});\\n\\n    uint borrowerAmount = div_(JToken(jToken).borrowBalanceStored(borrower), marketBorrowIndex);\\n\\n    // Calculate JLEND accrued: jTokenAmount * accruedPerBorrowedUnit\\n    uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\\n\\n    uint borrowerAccrued = add_(jLendAccrued[borrower], borrowerDelta);\\n    jLendAccrued[borrower] = borrowerAccrued;\\n\\n    emit DistributedBorrowerJLend(JToken(jToken), borrower, borrowerDelta, borrowIndex);\\n  }\\n\\n  /**\\n   * @notice Calculate additional accrued JLEND for a contributor since last accrual\\n   * @param contributor The address to calculate contributor rewards for\\n   */\\n  function updateContributorRewards(address contributor) public {\\n    uint jLendSpeed = jLendContributorSpeeds[contributor];\\n    uint blockNumber = getBlockNumber();\\n    uint deltaBlocks = sub_(blockNumber, lastContributorBlock[contributor]);\\n    if (deltaBlocks > 0 && jLendSpeed > 0) {\\n      uint newAccrued = mul_(deltaBlocks, jLendSpeed);\\n      uint contributorAccrued = add_(jLendAccrued[contributor], newAccrued);\\n\\n      jLendAccrued[contributor] = contributorAccrued;\\n      lastContributorBlock[contributor] = blockNumber;\\n    }\\n  }\\n\\n  /**\\n   * @notice Claim all the jLend accrued by holder in all markets\\n   * @param holder The address to claim JLEND for\\n   */\\n  function claimJLend(address holder) public {\\n    return claimJLend(holder, allMarkets);\\n  }\\n\\n  /**\\n   * @notice Claim all the jLend accrued by holder in the specified markets\\n   * @param holder The address to claim JLEND for\\n   * @param jTokens The list of markets to claim JLEND in\\n   */\\n  function claimJLend(address holder, JToken[] memory jTokens) public {\\n    address[] memory holders = new address[](1);\\n    holders[0] = holder;\\n    claimJLend(holders, jTokens, true, true);\\n  }\\n\\n  /**\\n   * @notice Claim all jLend accrued by the holders\\n   * @param holders The addresses to claim JLEND for\\n   * @param jTokens The list of markets to claim JLEND in\\n   * @param borrowers Whether or not to claim JLEND earned by borrowing\\n   * @param suppliers Whether or not to claim JLEND earned by supplying\\n   */\\n  function claimJLend(\\n    address[] memory holders,\\n    JToken[] memory jTokens,\\n    bool borrowers,\\n    bool suppliers\\n  ) public {\\n    for (uint i = 0; i < jTokens.length; i++) {\\n      JToken jToken = jTokens[i];\\n      require(markets[address(jToken)].isListed, \\\"market must be listed\\\");\\n      if (borrowers == true) {\\n        Exp memory borrowIndex = Exp({mantissa: jToken.borrowIndex()});\\n        updateJLendBorrowIndex(address(jToken), borrowIndex);\\n        for (uint j = 0; j < holders.length; j++) {\\n          distributeBorrowerJLend(address(jToken), holders[j], borrowIndex);\\n        }\\n      }\\n      if (suppliers == true) {\\n        updateJLendSupplyIndex(address(jToken));\\n        for (uint j = 0; j < holders.length; j++) {\\n          distributeSupplierJLend(address(jToken), holders[j]);\\n        }\\n      }\\n    }\\n    for (uint j = 0; j < holders.length; j++) {\\n      jLendAccrued[holders[j]] = grantJLendInternal(holders[j], jLendAccrued[holders[j]]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Transfer JLEND to the user\\n   * @dev Note: If there is not enough JLEND, we do not perform the transfer all.\\n   * @param user The address of the user to transfer JLEND to\\n   * @param amount The amount of JLEND to (possibly) transfer\\n   * @return The amount of JLEND which was NOT transferred to the user\\n   */\\n  function grantJLendInternal(address user, uint amount) internal returns (uint) {\\n    JLEND jLend = JLEND(getJLendAddress());\\n    uint jLendRemaining = jLend.balanceOf(address(this));\\n    if (amount > 0 && amount <= jLendRemaining) {\\n      jLend.transfer(user, amount);\\n      return 0;\\n    }\\n    return amount;\\n  }\\n\\n  /*** JLEND Distribution Admin ***/\\n\\n  /**\\n   * @notice Transfer JLEND to the recipient\\n   * @dev Note: If there is not enough JLEND, we do not perform the transfer all.\\n   * @param recipient The address of the recipient to transfer JLEND to\\n   * @param amount The amount of JLEND to (possibly) transfer\\n   */\\n  function _grantJLend(address recipient, uint amount) public {\\n    require(adminOrInitializing(), \\\"only admin can grant jLend\\\");\\n    uint amountLeft = grantJLendInternal(recipient, amount);\\n    require(amountLeft == 0, \\\"insufficient jLend for grant\\\");\\n    emit JLendGranted(recipient, amount);\\n  }\\n\\n  /**\\n   * @notice Set JLEND borrow and supply speeds for the specified markets.\\n   * @param jTokens The markets whose JLEND speed to update.\\n   * @param supplySpeeds New supply-side JLEND speed for the corresponding market.\\n   * @param borrowSpeeds New borrow-side JLEND speed for the corresponding market.\\n   */\\n  function _setJLendSpeeds(\\n    JToken[] memory jTokens,\\n    uint[] memory supplySpeeds,\\n    uint[] memory borrowSpeeds\\n  ) public {\\n    require(adminOrInitializing(), \\\"only admin can set jLend speed\\\");\\n\\n    uint numTokens = jTokens.length;\\n    require(\\n      numTokens == supplySpeeds.length && numTokens == borrowSpeeds.length,\\n      \\\"Comptroller::_setJLendSpeeds invalid input\\\"\\n    );\\n\\n    for (uint i = 0; i < numTokens; ++i) {\\n      setJLendSpeedInternal(jTokens[i], supplySpeeds[i], borrowSpeeds[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Set JLEND speed for a single contributor\\n   * @param contributor The contributor whose JLEND speed to update\\n   * @param jLendSpeed New JLEND speed for contributor\\n   */\\n  function _setContributorJLendSpeed(address contributor, uint jLendSpeed) public {\\n    require(adminOrInitializing(), \\\"only admin can set jLend speed\\\");\\n\\n    // note that JLEND speed could be set to 0 to halt liquidity rewards for a contributor\\n    updateContributorRewards(contributor);\\n    if (jLendSpeed == 0) {\\n      // release storage\\n      delete lastContributorBlock[contributor];\\n    } else {\\n      lastContributorBlock[contributor] = getBlockNumber();\\n    }\\n    jLendContributorSpeeds[contributor] = jLendSpeed;\\n\\n    emit ContributorJLendSpeedUpdated(contributor, jLendSpeed);\\n  }\\n\\n  /**\\n   * @notice Return all of the markets\\n   * @dev The automatic getter may be used to access an individual market.\\n   * @return The list of market addresses\\n   */\\n  function getAllMarkets() public view returns (JToken[] memory) {\\n    return allMarkets;\\n  }\\n\\n  /**\\n   * @notice Returns true if the given jToken market has been deprecated\\n   * @dev All borrows in a deprecated jToken market can be immediately liquidated\\n   * @param jToken The market to check if deprecated\\n   */\\n  function isDeprecated(JToken jToken) public view returns (bool) {\\n    return\\n      markets[address(jToken)].collateralFactorMantissa == 0 &&\\n      borrowGuardianPaused[address(jToken)] == true &&\\n      jToken.reserveFactorMantissa() == 1e18;\\n  }\\n\\n  function getBlockNumber() public view virtual returns (uint) {\\n    return block.number;\\n  }\\n\\n  /**\\n   * @notice Return the address of the JLEND token\\n   * @return The address of JLEND\\n   */\\n  function getJLendAddress() public view virtual returns (address) {\\n    return 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n  }\\n}\\n\",\"keccak256\":\"0x961267741afca492e7f6048e12d7a0c214e0ae7890fab4423ef2a512335b9f7e\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nabstract contract ComptrollerInterface {\\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\\n  bool public constant isComptroller = true;\\n\\n  /*** Assets You Are In ***/\\n\\n  function enterMarkets(address[] calldata jTokens) external virtual returns (uint[] memory);\\n\\n  function exitMarket(address jToken) external virtual returns (uint);\\n\\n  /*** Policy Hooks ***/\\n\\n  function mintAllowed(address jToken, address minter, uint mintAmount) external virtual returns (uint);\\n\\n  function mintVerify(address jToken, address minter, uint mintAmount, uint mintTokens) external virtual;\\n\\n  function redeemAllowed(address jToken, address redeemer, uint redeemTokens) external virtual returns (uint);\\n\\n  function redeemVerify(\\n    address jToken,\\n    address redeemer,\\n    uint redeemAmount,\\n    uint redeemTokens\\n  ) external virtual;\\n\\n  function borrowAllowed(address jToken, address borrower, uint borrowAmount) external virtual returns (uint);\\n\\n  function borrowVerify(address jToken, address borrower, uint borrowAmount) external virtual;\\n\\n  function repayBorrowAllowed(\\n    address jToken,\\n    address payer,\\n    address borrower,\\n    uint repayAmount\\n  ) external virtual returns (uint);\\n\\n  function repayBorrowVerify(\\n    address jToken,\\n    address payer,\\n    address borrower,\\n    uint repayAmount,\\n    uint borrowerIndex\\n  ) external virtual;\\n\\n  function liquidateBorrowAllowed(\\n    address jTokenBorrowed,\\n    address jTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint repayAmount\\n  ) external virtual returns (uint);\\n\\n  function liquidateBorrowVerify(\\n    address jTokenBorrowed,\\n    address jTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint repayAmount,\\n    uint seizeTokens\\n  ) external virtual;\\n\\n  function seizeAllowed(\\n    address jTokenCollateral,\\n    address jTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint seizeTokens\\n  ) external virtual returns (uint);\\n\\n  function seizeVerify(\\n    address jTokenCollateral,\\n    address jTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint seizeTokens\\n  ) external virtual;\\n\\n  function transferAllowed(\\n    address jToken,\\n    address src,\\n    address dst,\\n    uint transferTokens\\n  ) external virtual returns (uint);\\n\\n  function transferVerify(address jToken, address src, address dst, uint transferTokens) external virtual;\\n\\n  /*** Liquidity/Liquidation Calculations ***/\\n\\n  function liquidateCalculateSeizeTokens(\\n    address jTokenBorrowed,\\n    address jTokenCollateral,\\n    uint repayAmount\\n  ) external view virtual returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xd7a6263c7699e9931f48359a761a6885b618eb69a6bddee7abad0f2370583dfb\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./JToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n  /**\\n   * @notice Administrator for this contract\\n   */\\n  address public admin;\\n\\n  /**\\n   * @notice Pending administrator for this contract\\n   */\\n  address public pendingAdmin;\\n\\n  /**\\n   * @notice Active brains of Unitroller\\n   */\\n  address public comptrollerImplementation;\\n\\n  /**\\n   * @notice Pending brains of Unitroller\\n   */\\n  address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n  /**\\n   * @notice Oracle which gives the price of any given asset\\n   */\\n  PriceOracle public oracle;\\n\\n  /**\\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n   */\\n  uint public closeFactorMantissa;\\n\\n  /**\\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\\n   */\\n  uint public liquidationIncentiveMantissa;\\n\\n  /**\\n   * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n   */\\n  uint public maxAssets;\\n\\n  /**\\n   * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n   */\\n  mapping(address => JToken[]) public accountAssets;\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n  struct Market {\\n    // Whether or not this market is listed\\n    bool isListed;\\n    //  Multiplier representing the most one can borrow against their collateral in this market.\\n    //  For instance, 0.9 to allow borrowing 90% of collateral value.\\n    //  Must be between 0 and 1, and stored as a mantissa.\\n    uint collateralFactorMantissa;\\n    // Per-market mapping of \\\"accounts in this asset\\\"\\n    mapping(address => bool) accountMembership;\\n    // Whether or not this market receives JLEND\\n    bool isJLended;\\n  }\\n\\n  /**\\n   * @notice Official mapping of jTokens -> Market metadata\\n   * @dev Used e.g. to determine if a market is supported\\n   */\\n  mapping(address => Market) public markets;\\n\\n  /**\\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n   *  Actions which allow users to remove their own assets cannot be paused.\\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n   */\\n  address public pauseGuardian;\\n  bool public _mintGuardianPaused;\\n  bool public _borrowGuardianPaused;\\n  bool public transferGuardianPaused;\\n  bool public seizeGuardianPaused;\\n  mapping(address => bool) public mintGuardianPaused;\\n  mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n  struct JLendMarketState {\\n    // The market's last updated jLendBorrowIndex or jLendSupplyIndex\\n    uint224 index;\\n    // The block number the index was last updated at\\n    uint32 block;\\n  }\\n\\n  /// @notice A list of all markets\\n  JToken[] public allMarkets;\\n\\n  /// @notice The rate at which the flywheel distributes JLEND, per block\\n  uint public jLendRate;\\n\\n  /// @notice The portion of jLendRate that each market currently receives\\n  mapping(address => uint) public jLendSpeeds;\\n\\n  /// @notice The JLEND market supply state for each market\\n  mapping(address => JLendMarketState) public jLendSupplyState;\\n\\n  /// @notice The JLEND market borrow state for each market\\n  mapping(address => JLendMarketState) public jLendBorrowState;\\n\\n  /// @notice The JLEND borrow index for each market for each supplier as of the last time they accrued JLEND\\n  mapping(address => mapping(address => uint)) public jLendSupplierIndex;\\n\\n  /// @notice The JLEND borrow index for each market for each borrower as of the last time they accrued JLEND\\n  mapping(address => mapping(address => uint)) public jLendBorrowerIndex;\\n\\n  /// @notice The JLEND accrued but not yet transferred to each user\\n  mapping(address => uint) public jLendAccrued;\\n}\\n\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\n  // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n  address public borrowCapGuardian;\\n\\n  // @notice Borrow caps enforced by borrowAllowed for each jToken address. Defaults to zero which corresponds to unlimited borrowing.\\n  mapping(address => uint) public borrowCaps;\\n}\\n\\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\\n  /// @notice The portion of JLEND that each contributor receives per block\\n  mapping(address => uint) public jLendContributorSpeeds;\\n\\n  /// @notice Last block at which a contributor's JLEND rewards have been allocated\\n  mapping(address => uint) public lastContributorBlock;\\n}\\n\\ncontract ComptrollerV6Storage is ComptrollerV5Storage {\\n  /// @notice The rate at which jLend is distributed to the corresponding borrow market (per block)\\n  mapping(address => uint) public jLendBorrowSpeeds;\\n\\n  /// @notice The rate at which jLend is distributed to the corresponding supply market (per block)\\n  mapping(address => uint) public jLendSupplySpeeds;\\n}\\n\\ncontract ComptrollerV7Storage is ComptrollerV6Storage {\\n  /// @notice Flag indicating whether the function to fix JLEND accruals has been executed (RE: proposal 62 bug)\\n  bool public proposal65FixExecuted;\\n\\n  /// @notice Accounting storage mapping account addresses to how much JLEND they owe the protocol.\\n  mapping(address => uint) public jLendReceivable;\\n}\\n\",\"keccak256\":\"0x36622a0439e889ca11199faa637dcbd9eced18a16058cfab9d93f23e151657fa\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return success Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xf44fc7783d4a0060119f0096a122c3f305c7a03da75aa21408393d8d7a2e649b\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return success Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x5ce25bb36a4ec9490617567a24b55bc813e943bcd4411e060afffe122bea0416\",\"license\":\"BSD-3-Clause\"},\"contracts/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    uint public constant NO_ERROR = 0; // support legacy return codes\\n\\n    error TransferComptrollerRejection(uint256 errorCode);\\n    error TransferNotAllowed();\\n    error TransferNotEnough();\\n    error TransferTooMuch();\\n\\n    error MintComptrollerRejection(uint256 errorCode);\\n    error MintFreshnessCheck();\\n\\n    error RedeemComptrollerRejection(uint256 errorCode);\\n    error RedeemFreshnessCheck();\\n    error RedeemTransferOutNotPossible();\\n\\n    error BorrowComptrollerRejection(uint256 errorCode);\\n    error BorrowFreshnessCheck();\\n    error BorrowCashNotAvailable();\\n\\n    error RepayBorrowComptrollerRejection(uint256 errorCode);\\n    error RepayBorrowFreshnessCheck();\\n\\n    error LiquidateComptrollerRejection(uint256 errorCode);\\n    error LiquidateFreshnessCheck();\\n    error LiquidateCollateralFreshnessCheck();\\n    error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\\n    error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\\n    error LiquidateLiquidatorIsBorrower();\\n    error LiquidateCloseAmountIsZero();\\n    error LiquidateCloseAmountIsUintMax();\\n    error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\\n\\n    error LiquidateSeizeComptrollerRejection(uint256 errorCode);\\n    error LiquidateSeizeLiquidatorIsBorrower();\\n\\n    error AcceptAdminPendingAdminCheck();\\n\\n    error SetComptrollerOwnerCheck();\\n    error SetPendingAdminOwnerCheck();\\n\\n    error SetReserveFactorAdminCheck();\\n    error SetReserveFactorFreshCheck();\\n    error SetReserveFactorBoundsCheck();\\n\\n    error AddReservesFactorFreshCheck(uint256 actualAddAmount);\\n\\n    error ReduceReservesAdminCheck();\\n    error ReduceReservesFreshCheck();\\n    error ReduceReservesCashNotAvailable();\\n    error ReduceReservesCashValidation();\\n\\n    error SetInterestRateModelOwnerCheck();\\n    error SetInterestRateModelFreshCheck();\\n}\\n\",\"keccak256\":\"0xc565694807fce4d9eb218b77d2e7eb7665e0d6950cbfa9edd1e3c09e417b809c\",\"license\":\"BSD-3-Clause\"},\"contracts/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author JLEND\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n  uint constant expScale = 1e18;\\n  uint constant doubleScale = 1e36;\\n  uint constant halfExpScale = expScale / 2;\\n  uint constant mantissaOne = expScale;\\n\\n  struct Exp {\\n    uint mantissa;\\n  }\\n\\n  struct Double {\\n    uint mantissa;\\n  }\\n\\n  /**\\n   * @dev Truncates the given exp to a whole number value.\\n   *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n   */\\n  function truncate(Exp memory exp) internal pure returns (uint) {\\n    // Note: We are not using careful math here as we're performing a division that cannot fail\\n    return exp.mantissa / expScale;\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n   */\\n  function mul_ScalarTruncate(Exp memory a, uint scalar) internal pure returns (uint) {\\n    Exp memory product = mul_(a, scalar);\\n    return truncate(product);\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n   */\\n  function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (uint) {\\n    Exp memory product = mul_(a, scalar);\\n    return add_(truncate(product), addend);\\n  }\\n\\n  /**\\n   * @dev Checks if first Exp is less than second Exp.\\n   */\\n  function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa < right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp <= right Exp.\\n   */\\n  function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa <= right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp > right Exp.\\n   */\\n  function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa > right.mantissa;\\n  }\\n\\n  /**\\n   * @dev returns true if Exp is exactly zero\\n   */\\n  function isZeroExp(Exp memory value) internal pure returns (bool) {\\n    return value.mantissa == 0;\\n  }\\n\\n  function safe224(uint n, string memory errorMessage) internal pure returns (uint224) {\\n    require(n < 2 ** 224, errorMessage);\\n    return uint224(n);\\n  }\\n\\n  function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2 ** 32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n  }\\n\\n  function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n  }\\n\\n  function add_(uint a, uint b) internal pure returns (uint) {\\n    return a + b;\\n  }\\n\\n  function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n  }\\n\\n  function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n  }\\n\\n  function sub_(uint a, uint b) internal pure returns (uint) {\\n    return a - b;\\n  }\\n\\n  function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n  }\\n\\n  function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: mul_(a.mantissa, b)});\\n  }\\n\\n  function mul_(uint a, Exp memory b) internal pure returns (uint) {\\n    return mul_(a, b.mantissa) / expScale;\\n  }\\n\\n  function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n  }\\n\\n  function mul_(Double memory a, uint b) internal pure returns (Double memory) {\\n    return Double({mantissa: mul_(a.mantissa, b)});\\n  }\\n\\n  function mul_(uint a, Double memory b) internal pure returns (uint) {\\n    return mul_(a, b.mantissa) / doubleScale;\\n  }\\n\\n  function mul_(uint a, uint b) internal pure returns (uint) {\\n    return a * b;\\n  }\\n\\n  function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n  }\\n\\n  function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: div_(a.mantissa, b)});\\n  }\\n\\n  function div_(uint a, Exp memory b) internal pure returns (uint) {\\n    return div_(mul_(a, expScale), b.mantissa);\\n  }\\n\\n  function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n  }\\n\\n  function div_(Double memory a, uint b) internal pure returns (Double memory) {\\n    return Double({mantissa: div_(a.mantissa, b)});\\n  }\\n\\n  function div_(uint a, Double memory b) internal pure returns (uint) {\\n    return div_(mul_(a, doubleScale), b.mantissa);\\n  }\\n\\n  function div_(uint a, uint b) internal pure returns (uint) {\\n    return a / b;\\n  }\\n\\n  function fraction(uint a, uint b) internal pure returns (Double memory) {\\n    return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n  }\\n}\\n\",\"keccak256\":\"0xc2ea5f95930e34e53eb465cb0c71df10b4dddca68eeb85f80ce0ce38efdd918b\",\"license\":\"BSD-3-Clause\"},\"contracts/Governance/JLEND.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract JLEND {\\n  /// @notice EIP-20 token name for this token\\n  string public constant name = \\\"JLEND Token\\\";\\n\\n  /// @notice EIP-20 token symbol for this token\\n  string public constant symbol = \\\"JLEND\\\";\\n\\n  /// @notice EIP-20 token decimals for this token\\n  uint8 public constant decimals = 18;\\n\\n  /// @notice Total number of tokens in circulation\\n  uint public constant totalSupply = 10000000e18; // 10 million JLend\\n\\n  /// @notice Allowance amounts on behalf of others\\n  mapping(address => mapping(address => uint96)) internal allowances;\\n\\n  /// @notice Official record of token balances for each account\\n  mapping(address => uint96) internal balances;\\n\\n  /// @notice A record of each accounts delegate\\n  mapping(address => address) public delegates;\\n\\n  /// @notice A checkpoint for marking number of votes from a given block\\n  struct Checkpoint {\\n    uint32 fromBlock;\\n    uint96 votes;\\n  }\\n\\n  /// @notice A record of votes checkpoints for each account, by index\\n  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n  /// @notice The number of checkpoints for each account\\n  mapping(address => uint32) public numCheckpoints;\\n\\n  /// @notice The EIP-712 typehash for the contract's domain\\n  bytes32 public constant DOMAIN_TYPEHASH =\\n    keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATION_TYPEHASH =\\n    keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n  /// @notice A record of states for signing / validating signatures\\n  mapping(address => uint) public nonces;\\n\\n  /// @notice An event thats emitted when an account changes its delegate\\n  event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n  /// @notice An event thats emitted when a delegate account's vote balance changes\\n  event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n  /// @notice The standard EIP-20 transfer event\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /// @notice The standard EIP-20 approval event\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /**\\n   * @notice Construct a new JLend token\\n   * @param account The initial account to grant all the tokens\\n   */\\n  constructor(address account) public {\\n    balances[account] = uint96(totalSupply);\\n    emit Transfer(address(0), account, totalSupply);\\n  }\\n\\n  /**\\n   * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n   * @param account The address of the account holding the funds\\n   * @param spender The address of the account spending the funds\\n   * @return The number of tokens approved\\n   */\\n  function allowance(address account, address spender) external view returns (uint) {\\n    return allowances[account][spender];\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n   * @return Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint rawAmount) external returns (bool) {\\n    uint96 amount;\\n    if (rawAmount == type(uint).max) {\\n      amount = type(uint96).max;\\n    } else {\\n      amount = safe96(rawAmount, \\\"JLend::approve: amount exceeds 96 bits\\\");\\n    }\\n\\n    allowances[msg.sender][spender] = amount;\\n\\n    emit Approval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Get the number of tokens held by the `account`\\n   * @param account The address of the account to get the balance of\\n   * @return The number of tokens held\\n   */\\n  function balanceOf(address account) external view returns (uint) {\\n    return balances[account];\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param rawAmount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint rawAmount) external returns (bool) {\\n    uint96 amount = safe96(rawAmount, \\\"JLend::transfer: amount exceeds 96 bits\\\");\\n    _transferTokens(msg.sender, dst, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param rawAmount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\\n    address spender = msg.sender;\\n    uint96 spenderAllowance = allowances[src][spender];\\n    uint96 amount = safe96(rawAmount, \\\"JLend::approve: amount exceeds 96 bits\\\");\\n\\n    if (spender != src && spenderAllowance != type(uint96).max) {\\n      uint96 newAllowance = sub96(\\n        spenderAllowance,\\n        amount,\\n        \\\"JLend::transferFrom: transfer amount exceeds spender allowance\\\"\\n      );\\n      allowances[src][spender] = newAllowance;\\n\\n      emit Approval(src, spender, newAllowance);\\n    }\\n\\n    _transferTokens(src, dst, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Delegate votes from `msg.sender` to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   */\\n  function delegate(address delegatee) public {\\n    return _delegate(msg.sender, delegatee);\\n  }\\n\\n  /**\\n   * @notice Delegates votes from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\\n    bytes32 domainSeparator = keccak256(\\n      abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))\\n    );\\n    bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), \\\"JLend::delegateBySig: invalid signature\\\");\\n    require(nonce == nonces[signatory]++, \\\"JLend::delegateBySig: invalid nonce\\\");\\n    require(block.timestamp <= expiry, \\\"JLend::delegateBySig: signature expired\\\");\\n    return _delegate(signatory, delegatee);\\n  }\\n\\n  /**\\n   * @notice Gets the current votes balance for `account`\\n   * @param account The address to get votes balance\\n   * @return The number of current votes for `account`\\n   */\\n  function getCurrentVotes(address account) external view returns (uint96) {\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n  }\\n\\n  /**\\n   * @notice Determine the prior number of votes for an account as of a block number\\n   * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n   * @param account The address of the account to check\\n   * @param blockNumber The block number to get the vote balance at\\n   * @return The number of votes the account had as of the given block\\n   */\\n  function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\\n    require(blockNumber < block.number, \\\"JLend::getPriorVotes: not yet determined\\\");\\n\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    if (nCheckpoints == 0) {\\n      return 0;\\n    }\\n\\n    // First check most recent balance\\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n      return checkpoints[account][nCheckpoints - 1].votes;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (checkpoints[account][0].fromBlock > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint32 lower = 0;\\n    uint32 upper = nCheckpoints - 1;\\n    while (upper > lower) {\\n      uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Checkpoint memory cp = checkpoints[account][center];\\n      if (cp.fromBlock == blockNumber) {\\n        return cp.votes;\\n      } else if (cp.fromBlock < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return checkpoints[account][lower].votes;\\n  }\\n\\n  function _delegate(address delegator, address delegatee) internal {\\n    address currentDelegate = delegates[delegator];\\n    uint96 delegatorBalance = balances[delegator];\\n    delegates[delegator] = delegatee;\\n\\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n  }\\n\\n  function _transferTokens(address src, address dst, uint96 amount) internal {\\n    require(src != address(0), \\\"JLend::_transferTokens: cannot transfer from the zero address\\\");\\n    require(dst != address(0), \\\"JLend::_transferTokens: cannot transfer to the zero address\\\");\\n\\n    balances[src] = sub96(balances[src], amount, \\\"JLend::_transferTokens: transfer amount exceeds balance\\\");\\n    balances[dst] = add96(balances[dst], amount, \\\"JLend::_transferTokens: transfer amount overflows\\\");\\n    emit Transfer(src, dst, amount);\\n\\n    _moveDelegates(delegates[src], delegates[dst], amount);\\n  }\\n\\n  function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\n    if (srcRep != dstRep && amount > 0) {\\n      if (srcRep != address(0)) {\\n        uint32 srcRepNum = numCheckpoints[srcRep];\\n        uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n        uint96 srcRepNew = sub96(srcRepOld, amount, \\\"JLend::_moveVotes: vote amount underflows\\\");\\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n      }\\n\\n      if (dstRep != address(0)) {\\n        uint32 dstRepNum = numCheckpoints[dstRep];\\n        uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n        uint96 dstRepNew = add96(dstRepOld, amount, \\\"JLend::_moveVotes: vote amount overflows\\\");\\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n      }\\n    }\\n  }\\n\\n  function _writeCheckpoint(\\n    address delegatee,\\n    uint32 nCheckpoints,\\n    uint96 oldVotes,\\n    uint96 newVotes\\n  ) internal {\\n    uint32 blockNumber = safe32(block.number, \\\"JLend::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n    if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n    } else {\\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n      numCheckpoints[delegatee] = nCheckpoints + 1;\\n    }\\n\\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n  }\\n\\n  function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2 ** 32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\n    require(n < 2 ** 96, errorMessage);\\n    return uint96(n);\\n  }\\n\\n  function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n    uint96 c = a + b;\\n    require(c >= a, errorMessage);\\n    return c;\\n  }\\n\\n  function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n    require(b <= a, errorMessage);\\n    return a - b;\\n  }\\n\\n  function getChainId() internal view returns (uint) {\\n    uint256 chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n    return chainId;\\n  }\\n}\\n\",\"keccak256\":\"0xb3e692c46d3b20d1bb6c3dc75e023ca49b0615df4b7127dda3233a5ac161b668\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title JLEND's InterestRateModel Interface\\n * @author JLEND\\n */\\nabstract contract InterestRateModel {\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n  bool public constant isInterestRateModel = true;\\n\\n  /**\\n   * @notice Calculates the current borrow interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getBorrowRate(uint cash, uint borrows, uint reserves) external view virtual returns (uint);\\n\\n  /**\\n   * @notice Calculates the current supply interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @param reserveFactorMantissa The current reserve factor the market has\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint cash,\\n    uint borrows,\\n    uint reserves,\\n    uint reserveFactorMantissa\\n  ) external view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x52139203b262483398066a0d6100691d5d738b87aced3159b9b5ea7a400b42c0\",\"license\":\"BSD-3-Clause\"},\"contracts/JToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./JTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title JLEND's JToken Contract\\n * @notice Abstract base for JTokens\\n * @author JLEND\\n */\\nabstract contract JToken is JTokenInterface, ExponentialNoError, TokenErrorReporter {\\n  /**\\n   * @notice Initialize the money market\\n   * @param comptroller_ The address of the Comptroller\\n   * @param interestRateModel_ The address of the interest rate model\\n   * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n   * @param name_ EIP-20 name of this token\\n   * @param symbol_ EIP-20 symbol of this token\\n   * @param decimals_ EIP-20 decimal precision of this token\\n   */\\n  function initialize(\\n    ComptrollerInterface comptroller_,\\n    InterestRateModel interestRateModel_,\\n    uint initialExchangeRateMantissa_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) public {\\n    require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n    require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n    // Set initial exchange rate\\n    initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n    require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n    // Set the comptroller\\n    uint err = _setComptroller(comptroller_);\\n    require(err == NO_ERROR, \\\"setting comptroller failed\\\");\\n\\n    // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n    accrualBlockNumber = getBlockNumber();\\n    borrowIndex = mantissaOne;\\n\\n    // Set the interest rate model (depends on block number / borrow index)\\n    err = _setInterestRateModelFresh(interestRateModel_);\\n    require(err == NO_ERROR, \\\"setting interest rate model failed\\\");\\n\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n\\n    // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n    _notEntered = true;\\n  }\\n\\n  /**\\n   * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n   * @dev Called by both `transfer` and `transferFrom` internally\\n   * @param spender The address of the account performing the transfer\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param tokens The number of tokens to transfer\\n   * @return 0 if the transfer succeeded, else revert\\n   */\\n  function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n    /* Fail if transfer not allowed */\\n    uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n    if (allowed != 0) {\\n      revert TransferComptrollerRejection(allowed);\\n    }\\n\\n    /* Do not allow self-transfers */\\n    if (src == dst) {\\n      revert TransferNotAllowed();\\n    }\\n\\n    /* Get the allowance, infinite for the account owner */\\n    uint startingAllowance = 0;\\n    if (spender == src) {\\n      startingAllowance = type(uint).max;\\n    } else {\\n      startingAllowance = transferAllowances[src][spender];\\n    }\\n\\n    /* Do the calculations, checking for {under,over}flow */\\n    uint allowanceNew = startingAllowance - tokens;\\n    uint srjTokensNew = accountTokens[src] - tokens;\\n    uint dstTokensNew = accountTokens[dst] + tokens;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    accountTokens[src] = srjTokensNew;\\n    accountTokens[dst] = dstTokensNew;\\n\\n    /* Eat some of the allowance (if necessary) */\\n    if (startingAllowance != type(uint).max) {\\n      transferAllowances[src][spender] = allowanceNew;\\n    }\\n\\n    /* We emit a Transfer event */\\n    emit Transfer(src, dst, tokens);\\n\\n    // unused function\\n    // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external override nonReentrant returns (bool) {\\n    return transferTokens(msg.sender, msg.sender, dst, amount) == NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external override nonReentrant returns (bool) {\\n    return transferTokens(msg.sender, src, dst, amount) == NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (uint256.max means infinite)\\n   * @return Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    address src = msg.sender;\\n    transferAllowances[src][spender] = amount;\\n    emit Approval(src, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return transferAllowances[owner][spender];\\n  }\\n\\n  /**\\n   * @notice Get the token balance of the `owner`\\n   * @param owner The address of the account to query\\n   * @return The number of tokens owned by `owner`\\n   */\\n  function balanceOf(address owner) external view override returns (uint256) {\\n    return accountTokens[owner];\\n  }\\n\\n  /**\\n   * @notice Get the underlying balance of the `owner`\\n   * @dev This also accrues interest in a transaction\\n   * @param owner The address of the account to query\\n   * @return The amount of underlying owned by `owner`\\n   */\\n  function balanceOfUnderlying(address owner) external override returns (uint) {\\n    Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n    return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\n  }\\n\\n  /**\\n   * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n   * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n   * @param account Address of the account to snapshot\\n   * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n   */\\n  function getAccountSnapshot(address account) external view override returns (uint, uint, uint, uint) {\\n    return (\\n      NO_ERROR,\\n      accountTokens[account],\\n      borrowBalanceStoredInternal(account),\\n      exchangeRateStoredInternal()\\n    );\\n  }\\n\\n  /**\\n   * @dev Function to simply retrieve block number\\n   *  This exists mainly for inheriting test contracts to stub this result.\\n   */\\n  function getBlockNumber() internal view virtual returns (uint) {\\n    return block.number;\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block borrow interest rate for this jToken\\n   * @return The borrow interest rate per block, scaled by 1e18\\n   */\\n  function borrowRatePerBlock() external view override returns (uint) {\\n    return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block supply interest rate for this jToken\\n   * @return The supply interest rate per block, scaled by 1e18\\n   */\\n  function supplyRatePerBlock() external view override returns (uint) {\\n    return\\n      interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n  }\\n\\n  /**\\n   * @notice Returns the current total borrows plus accrued interest\\n   * @return The total borrows with interest\\n   */\\n  function totalBorrowsCurrent() external override nonReentrant returns (uint) {\\n    accrueInterest();\\n    return totalBorrows;\\n  }\\n\\n  /**\\n   * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n   * @param account The address whose balance should be calculated after updating borrowIndex\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceCurrent(address account) external override nonReentrant returns (uint) {\\n    accrueInterest();\\n    return borrowBalanceStored(account);\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceStored(address account) public view override returns (uint) {\\n    return borrowBalanceStoredInternal(account);\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return (error code, the calculated balance or 0 if error code is non-zero)\\n   */\\n  function borrowBalanceStoredInternal(address account) internal view returns (uint) {\\n    /* Get borrowBalance and borrowIndex */\\n    BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n    /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n     * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n     */\\n    if (borrowSnapshot.principal == 0) {\\n      return 0;\\n    }\\n\\n    /* Calculate new borrow balance using the interest index:\\n     *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n     */\\n    uint principalTimesIndex = borrowSnapshot.principal * borrowIndex;\\n    return principalTimesIndex / borrowSnapshot.interestIndex;\\n  }\\n\\n  /**\\n   * @notice Accrue interest then return the up-to-date exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateCurrent() public override nonReentrant returns (uint) {\\n    accrueInterest();\\n    return exchangeRateStored();\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the JToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStored() public view override returns (uint) {\\n    return exchangeRateStoredInternal();\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the JToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStoredInternal() internal view virtual returns (uint) {\\n    uint _totalSupply = totalSupply;\\n    if (_totalSupply == 0) {\\n      /*\\n       * If there are no tokens minted:\\n       *  exchangeRate = initialExchangeRate\\n       */\\n      return initialExchangeRateMantissa;\\n    } else {\\n      /*\\n       * Otherwise:\\n       *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n       */\\n      uint totalCash = getCashPrior();\\n      uint cashPlusBorrowsMinusReserves = totalCash + totalBorrows - totalReserves;\\n      uint exchangeRate = (cashPlusBorrowsMinusReserves * expScale) / _totalSupply;\\n\\n      return exchangeRate;\\n    }\\n  }\\n\\n  /**\\n   * @notice Get cash balance of this jToken in the underlying asset\\n   * @return The quantity of underlying asset owned by this contract\\n   */\\n  function getCash() external view override returns (uint) {\\n    return getCashPrior();\\n  }\\n\\n  /**\\n   * @notice Applies accrued interest to total borrows and reserves\\n   * @dev This calculates interest accrued from the last checkpointed block\\n   *   up to the current block and writes new checkpoint to storage.\\n   */\\n  function accrueInterest() public virtual override returns (uint) {\\n    /* Remember the initial block number */\\n    uint currentBlockNumber = getBlockNumber();\\n    uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n    /* Short-circuit accumulating 0 interest */\\n    if (accrualBlockNumberPrior == currentBlockNumber) {\\n      return NO_ERROR;\\n    }\\n\\n    /* Read the previous values out of storage */\\n    uint cashPrior = getCashPrior();\\n    uint borrowsPrior = totalBorrows;\\n    uint reservesPrior = totalReserves;\\n    uint borrowIndexPrior = borrowIndex;\\n\\n    /* Calculate the current borrow interest rate */\\n    uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n    require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n    /* Calculate the number of blocks elapsed since the last accrual */\\n    uint blockDelta = currentBlockNumber - accrualBlockNumberPrior;\\n\\n    /*\\n     * Calculate the interest accumulated into borrows and reserves and the new index:\\n     *  simpleInterestFactor = borrowRate * blockDelta\\n     *  interestAccumulated = simpleInterestFactor * totalBorrows\\n     *  totalBorrowsNew = interestAccumulated + totalBorrows\\n     *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n     *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n     */\\n\\n    Exp memory simpleInterestFactor = mul_(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n    uint interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, borrowsPrior);\\n    uint totalBorrowsNew = interestAccumulated + borrowsPrior;\\n    uint totalReservesNew = mul_ScalarTruncateAddUInt(\\n      Exp({mantissa: reserveFactorMantissa}),\\n      interestAccumulated,\\n      reservesPrior\\n    );\\n    uint borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the previously calculated values into storage */\\n    accrualBlockNumber = currentBlockNumber;\\n    borrowIndex = borrowIndexNew;\\n    totalBorrows = totalBorrowsNew;\\n    totalReserves = totalReservesNew;\\n\\n    /* We emit an AccrueInterest event */\\n    emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sender supplies assets into the market and receives jTokens in exchange\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param mintAmount The amount of the underlying asset to supply\\n   */\\n  function mintInternal(uint mintAmount) internal nonReentrant {\\n    accrueInterest();\\n    // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n    mintFresh(msg.sender, mintAmount);\\n  }\\n\\n  /**\\n   * @notice User supplies assets into the market and receives jTokens in exchange\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param minter The address of the account which is supplying the assets\\n   * @param mintAmount The amount of the underlying asset to supply\\n   */\\n  function mintFresh(address minter, uint mintAmount) internal {\\n    /* Fail if mint not allowed */\\n    uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n    if (allowed != 0) {\\n      revert MintComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert MintFreshnessCheck();\\n    }\\n\\n    Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     *  We call `doTransferIn` for the minter and the mintAmount.\\n     *  Note: The jToken must handle variations between ERC-20 and ETH underlying.\\n     *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n     *  side-effects occurred. The function returns the amount actually transferred,\\n     *  in case of a fee. On success, the jToken holds an additional `actualMintAmount`\\n     *  of cash.\\n     */\\n    uint actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n    /*\\n     * We get the current exchange rate and calculate the number of jTokens to be minted:\\n     *  mintTokens = actualMintAmount / exchangeRate\\n     */\\n\\n    uint mintTokens = div_(actualMintAmount, exchangeRate);\\n\\n    /*\\n     * We calculate the new total supply of jTokens and minter token balance, checking for overflow:\\n     *  totalSupplyNew = totalSupply + mintTokens\\n     *  accountTokensNew = accountTokens[minter] + mintTokens\\n     * And write them into storage\\n     */\\n    totalSupply = totalSupply + mintTokens;\\n    accountTokens[minter] = accountTokens[minter] + mintTokens;\\n\\n    /* We emit a Mint event, and a Transfer event */\\n    emit Mint(minter, actualMintAmount, mintTokens);\\n    emit Transfer(address(this), minter, mintTokens);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.mintVerify(address(this), minter, actualMintAmount, mintTokens);\\n  }\\n\\n  /**\\n   * @notice Sender redeems jTokens in exchange for the underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemTokens The number of jTokens to redeem into underlying\\n   */\\n  function redeemInternal(uint redeemTokens) internal nonReentrant {\\n    accrueInterest();\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    redeemFresh(payable(msg.sender), redeemTokens, 0);\\n  }\\n\\n  /**\\n   * @notice Sender redeems jTokens in exchange for a specified amount of underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemAmount The amount of underlying to receive from redeeming jTokens\\n   */\\n  function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant {\\n    accrueInterest();\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    redeemFresh(payable(msg.sender), 0, redeemAmount);\\n  }\\n\\n  /**\\n   * @notice User redeems jTokens in exchange for the underlying asset\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param redeemer The address of the account which is redeeming the tokens\\n   * @param redeemTokensIn The number of jTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   * @param redeemAmountIn The number of underlying tokens to receive from redeeming jTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   */\\n  function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal {\\n    require(\\n      redeemTokensIn == 0 || redeemAmountIn == 0,\\n      \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\"\\n    );\\n\\n    /* exchangeRate = invoke Exchange Rate Stored() */\\n    Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\n\\n    uint redeemTokens;\\n    uint redeemAmount;\\n    /* If redeemTokensIn > 0: */\\n    if (redeemTokensIn > 0) {\\n      /*\\n       * We calculate the exchange rate and the amount of underlying to be redeemed:\\n       *  redeemTokens = redeemTokensIn\\n       *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n       */\\n      redeemTokens = redeemTokensIn;\\n      redeemAmount = mul_ScalarTruncate(exchangeRate, redeemTokensIn);\\n    } else {\\n      /*\\n       * We get the current exchange rate and calculate the amount to be redeemed:\\n       *  redeemTokens = redeemAmountIn / exchangeRate\\n       *  redeemAmount = redeemAmountIn\\n       */\\n      redeemTokens = div_(redeemAmountIn, exchangeRate);\\n      redeemAmount = redeemAmountIn;\\n    }\\n\\n    /* Fail if redeem not allowed */\\n    uint allowed = comptroller.redeemAllowed(address(this), redeemer, redeemTokens);\\n    if (allowed != 0) {\\n      revert RedeemComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert RedeemFreshnessCheck();\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient cash */\\n    if (getCashPrior() < redeemAmount) {\\n      revert RedeemTransferOutNotPossible();\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We write the previously calculated values into storage.\\n     *  Note: Avoid token reentrancy attacks by writing reduced supply before external transfer.\\n     */\\n    totalSupply = totalSupply - redeemTokens;\\n    accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens;\\n\\n    /*\\n     * We invoke doTransferOut for the redeemer and the redeemAmount.\\n     *  Note: The jToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the jToken has redeemAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(redeemer, redeemAmount);\\n\\n    /* We emit a Transfer event, and a Redeem event */\\n    emit Transfer(redeemer, address(this), redeemTokens);\\n    emit Redeem(redeemer, redeemAmount, redeemTokens);\\n\\n    /* We call the defense hook */\\n    comptroller.redeemVerify(address(this), redeemer, redeemAmount, redeemTokens);\\n  }\\n\\n  /**\\n   * @notice Sender borrows assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   */\\n  function borrowInternal(uint borrowAmount) internal nonReentrant {\\n    accrueInterest();\\n    // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n    borrowFresh(payable(msg.sender), borrowAmount);\\n  }\\n\\n  /**\\n   * @notice Users borrow assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   */\\n  function borrowFresh(address payable borrower, uint borrowAmount) internal {\\n    /* Fail if borrow not allowed */\\n    uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n    if (allowed != 0) {\\n      revert BorrowComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert BorrowFreshnessCheck();\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient underlying cash */\\n    if (getCashPrior() < borrowAmount) {\\n      revert BorrowCashNotAvailable();\\n    }\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on overflow:\\n     *  accountBorrowNew = accountBorrow + borrowAmount\\n     *  totalBorrowsNew = totalBorrows + borrowAmount\\n     */\\n    uint accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n    uint accountBorrowsNew = accountBorrowsPrev + borrowAmount;\\n    uint totalBorrowsNew = totalBorrows + borrowAmount;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n         * We write the previously calculated values into storage.\\n         *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\\n        `*/\\n    accountBorrows[borrower].principal = accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = totalBorrowsNew;\\n\\n    /*\\n     * We invoke doTransferOut for the borrower and the borrowAmount.\\n     *  Note: The jToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the jToken borrowAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(borrower, borrowAmount);\\n\\n    /* We emit a Borrow event */\\n    emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\\n  }\\n\\n  /**\\n   * @notice Sender repays their own borrow\\n   * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n   */\\n  function repayBorrowInternal(uint repayAmount) internal nonReentrant {\\n    accrueInterest();\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n  }\\n\\n  /**\\n   * @notice Sender repays a borrow belonging to borrower\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n   */\\n  function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant {\\n    accrueInterest();\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    repayBorrowFresh(msg.sender, borrower, repayAmount);\\n  }\\n\\n  /**\\n   * @notice Borrows are repaid by another user (possibly the borrower).\\n   * @param payer the account paying off the borrow\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\\n   * @return (uint) the actual repayment amount.\\n   */\\n  function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint) {\\n    /* Fail if repayBorrow not allowed */\\n    uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n    if (allowed != 0) {\\n      revert RepayBorrowComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert RepayBorrowFreshnessCheck();\\n    }\\n\\n    /* We fetch the amount the borrower owes, with accumulated interest */\\n    uint accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n\\n    /* If repayAmount == -1, repayAmount = accountBorrows */\\n    uint repayAmountFinal = repayAmount == type(uint).max ? accountBorrowsPrev : repayAmount;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We call doTransferIn for the payer and the repayAmount\\n     *  Note: The jToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the jToken holds an additional repayAmount of cash.\\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     *   it returns the amount actually transferred, in case of a fee.\\n     */\\n    uint actualRepayAmount = doTransferIn(payer, repayAmountFinal);\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on underflow:\\n     *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n     *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n     */\\n    uint accountBorrowsNew = accountBorrowsPrev - actualRepayAmount;\\n    uint totalBorrowsNew = totalBorrows - actualRepayAmount;\\n\\n    /* We write the previously calculated values into storage */\\n    accountBorrows[borrower].principal = accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = totalBorrowsNew;\\n\\n    /* We emit a RepayBorrow event */\\n    emit RepayBorrow(payer, borrower, actualRepayAmount, accountBorrowsNew, totalBorrowsNew);\\n\\n    return actualRepayAmount;\\n  }\\n\\n  /**\\n   * @notice The sender liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this jToken to be liquidated\\n   * @param jTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   */\\n  function liquidateBorrowInternal(\\n    address borrower,\\n    uint repayAmount,\\n    JTokenInterface jTokenCollateral\\n  ) internal nonReentrant {\\n    accrueInterest();\\n\\n    uint error = jTokenCollateral.accrueInterest();\\n    if (error != NO_ERROR) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n      revert LiquidateAccrueCollateralInterestFailed(error);\\n    }\\n\\n    // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n    liquidateBorrowFresh(msg.sender, borrower, repayAmount, jTokenCollateral);\\n  }\\n\\n  /**\\n   * @notice The liquidator liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this jToken to be liquidated\\n   * @param liquidator The address repaying the borrow and seizing collateral\\n   * @param jTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   */\\n  function liquidateBorrowFresh(\\n    address liquidator,\\n    address borrower,\\n    uint repayAmount,\\n    JTokenInterface jTokenCollateral\\n  ) internal {\\n    /* Fail if liquidate not allowed */\\n    uint allowed = comptroller.liquidateBorrowAllowed(\\n      address(this),\\n      address(jTokenCollateral),\\n      liquidator,\\n      borrower,\\n      repayAmount\\n    );\\n    if (allowed != 0) {\\n      revert LiquidateComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert LiquidateFreshnessCheck();\\n    }\\n\\n    /* Verify jTokenCollateral market's block number equals current block number */\\n    if (jTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n      revert LiquidateCollateralFreshnessCheck();\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      revert LiquidateLiquidatorIsBorrower();\\n    }\\n\\n    /* Fail if repayAmount = 0 */\\n    if (repayAmount == 0) {\\n      revert LiquidateCloseAmountIsZero();\\n    }\\n\\n    /* Fail if repayAmount = -1 */\\n    if (repayAmount == type(uint).max) {\\n      revert LiquidateCloseAmountIsUintMax();\\n    }\\n\\n    /* Fail if repayBorrow fails */\\n    uint actualRepayAmount = repayBorrowFresh(liquidator, borrower, repayAmount);\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We calculate the number of collateral tokens that will be seized */\\n    (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n      address(this),\\n      address(jTokenCollateral),\\n      actualRepayAmount\\n    );\\n    require(amountSeizeError == NO_ERROR, \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n    /* Revert if borrower collateral token balance < seizeTokens */\\n    require(jTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n    // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n    if (address(jTokenCollateral) == address(this)) {\\n      seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n    } else {\\n      require(jTokenCollateral.seize(liquidator, borrower, seizeTokens) == NO_ERROR, \\\"token seizure failed\\\");\\n    }\\n\\n    /* We emit a LiquidateBorrow event */\\n    emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(jTokenCollateral), seizeTokens);\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Will fail unless called by another jToken during the process of liquidation.\\n   *  Its absolutely critical to use msg.sender as the borrowed jToken and not a parameter.\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of jTokens to seize\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint seizeTokens\\n  ) external override nonReentrant returns (uint) {\\n    seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another JToken.\\n   *  Its absolutely critical to use msg.sender as the seizer jToken and not a parameter.\\n   * @param seizerToken The contract seizing the collateral (i.e. borrowed jToken)\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of jTokens to seize\\n   */\\n  function seizeInternal(\\n    address seizerToken,\\n    address liquidator,\\n    address borrower,\\n    uint seizeTokens\\n  ) internal {\\n    /* Fail if seize not allowed */\\n    uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n    if (allowed != 0) {\\n      revert LiquidateSeizeComptrollerRejection(allowed);\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      revert LiquidateSeizeLiquidatorIsBorrower();\\n    }\\n\\n    /*\\n     * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n     *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n     *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n     */\\n    uint protocolSeizeTokens = mul_(seizeTokens, Exp({mantissa: protocolSeizeShareMantissa}));\\n    uint liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens;\\n    Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\n    uint protocolSeizeAmount = mul_ScalarTruncate(exchangeRate, protocolSeizeTokens);\\n    uint totalReservesNew = totalReserves + protocolSeizeAmount;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the calculated values into storage */\\n    totalReserves = totalReservesNew;\\n    totalSupply = totalSupply - protocolSeizeTokens;\\n    accountTokens[borrower] = accountTokens[borrower] - seizeTokens;\\n    accountTokens[liquidator] = accountTokens[liquidator] + liquidatorSeizeTokens;\\n\\n    /* Emit a Transfer event */\\n    emit Transfer(borrower, liquidator, liquidatorSeizeTokens);\\n    emit Transfer(borrower, address(this), protocolSeizeTokens);\\n    emit ReservesAdded(address(this), protocolSeizeAmount, totalReservesNew);\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  /**\\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @param newPendingAdmin New pending admin.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setPendingAdmin(address payable newPendingAdmin) external override returns (uint) {\\n    // Check caller = admin\\n    if (msg.sender != admin) {\\n      revert SetPendingAdminOwnerCheck();\\n    }\\n\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store pendingAdmin with value newPendingAdmin\\n    pendingAdmin = newPendingAdmin;\\n\\n    // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n   * @dev Admin function for pending admin to accept role and update admin\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptAdmin() external override returns (uint) {\\n    // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n      revert AcceptAdminPendingAdminCheck();\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldAdmin = admin;\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store admin with value pendingAdmin\\n    admin = pendingAdmin;\\n\\n    // Clear the pending value\\n    pendingAdmin = payable(address(0));\\n\\n    emit NewAdmin(oldAdmin, admin);\\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sets a new comptroller for the market\\n   * @dev Admin function to set a new comptroller\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setComptroller(ComptrollerInterface newComptroller) public override returns (uint) {\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert SetComptrollerOwnerCheck();\\n    }\\n\\n    ComptrollerInterface oldComptroller = comptroller;\\n    // Ensure invoke comptroller.isComptroller() returns true\\n    require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n    // Set market's comptroller to newComptroller\\n    comptroller = newComptroller;\\n\\n    // Emit NewComptroller(oldComptroller, newComptroller)\\n    emit NewComptroller(oldComptroller, newComptroller);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n   * @dev Admin function to accrue interest and set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactor(uint newReserveFactorMantissa) external override nonReentrant returns (uint) {\\n    accrueInterest();\\n    // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n    return _setReserveFactorFresh(newReserveFactorMantissa);\\n  }\\n\\n  /**\\n   * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n   * @dev Admin function to set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert SetReserveFactorAdminCheck();\\n    }\\n\\n    // Verify market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert SetReserveFactorFreshCheck();\\n    }\\n\\n    // Check newReserveFactor \\u2264 maxReserveFactor\\n    if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n      revert SetReserveFactorBoundsCheck();\\n    }\\n\\n    uint oldReserveFactorMantissa = reserveFactorMantissa;\\n    reserveFactorMantissa = newReserveFactorMantissa;\\n\\n    emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n   * @param addAmount Amount of addition to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n    accrueInterest();\\n\\n    // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n    _addReservesFresh(addAmount);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Add reserves by transferring from caller\\n   * @dev Requires fresh interest accrual\\n   * @param addAmount Amount of addition to reserves\\n   * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n   */\\n  function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n    // totalReserves + actualAddAmount\\n    uint totalReservesNew;\\n    uint actualAddAmount;\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert AddReservesFactorFreshCheck(actualAddAmount);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We call doTransferIn for the caller and the addAmount\\n     *  Note: The jToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the jToken holds an additional addAmount of cash.\\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     *  it returns the amount actually transferred, in case of a fee.\\n     */\\n\\n    actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n    totalReservesNew = totalReserves + actualAddAmount;\\n\\n    // Store reserves[n+1] = reserves[n] + actualAddAmount\\n    totalReserves = totalReservesNew;\\n\\n    /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n    emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n    /* Return (NO_ERROR, actualAddAmount) */\\n    return (NO_ERROR, actualAddAmount);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces reserves by transferring to admin\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReserves(uint reduceAmount) external override nonReentrant returns (uint) {\\n    accrueInterest();\\n    // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n    return _reduceReservesFresh(reduceAmount);\\n  }\\n\\n  /**\\n   * @notice Reduces reserves by transferring to admin\\n   * @dev Requires fresh interest accrual\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n    // totalReserves - reduceAmount\\n    uint totalReservesNew;\\n\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert ReduceReservesAdminCheck();\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert ReduceReservesFreshCheck();\\n    }\\n\\n    // Fail gracefully if protocol has insufficient underlying cash\\n    if (getCashPrior() < reduceAmount) {\\n      revert ReduceReservesCashNotAvailable();\\n    }\\n\\n    // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n    if (reduceAmount > totalReserves) {\\n      revert ReduceReservesCashValidation();\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    totalReservesNew = totalReserves - reduceAmount;\\n\\n    // Store reserves[n+1] = reserves[n] - reduceAmount\\n    totalReserves = totalReservesNew;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(admin, reduceAmount);\\n\\n    emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n   * @dev Admin function to accrue interest and update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) public override returns (uint) {\\n    accrueInterest();\\n    // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n    return _setInterestRateModelFresh(newInterestRateModel);\\n  }\\n\\n  /**\\n   * @notice updates the interest rate model (*requires fresh interest accrual)\\n   * @dev Admin function to update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n    // Used to store old model for use in the event that is emitted on success\\n    InterestRateModel oldInterestRateModel;\\n\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert SetInterestRateModelOwnerCheck();\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert SetInterestRateModelFreshCheck();\\n    }\\n\\n    // Track the market's current interest rate model\\n    oldInterestRateModel = interestRateModel;\\n\\n    // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n    require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n    // Set the interest rate model to newInterestRateModel\\n    interestRateModel = newInterestRateModel;\\n\\n    // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n    emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /*** Safe Token ***/\\n\\n  /**\\n   * @notice Gets balance of this contract in terms of the underlying\\n   * @dev This excludes the value of the current message, if any\\n   * @return The quantity of underlying owned by this contract\\n   */\\n  function getCashPrior() internal view virtual returns (uint);\\n\\n  /**\\n   * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n   *  This may revert due to insufficient balance or insufficient allowance.\\n   */\\n  function doTransferIn(address from, uint amount) internal virtual returns (uint);\\n\\n  /**\\n   * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n   *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n   *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n   */\\n  function doTransferOut(address payable to, uint amount) internal virtual;\\n\\n  /*** Reentrancy Guard ***/\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   */\\n  modifier nonReentrant() {\\n    require(_notEntered, \\\"re-entered\\\");\\n    _notEntered = false;\\n    _;\\n    _notEntered = true; // get a gas-refund post-Istanbul\\n  }\\n}\\n\",\"keccak256\":\"0x4d7ece0465e7f0a0c12ea858f61123e522f2b49794f67f697627c2b8aa1db9dd\",\"license\":\"BSD-3-Clause\"},\"contracts/JTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\n\\ncontract JTokenStorage {\\n  /**\\n   * @dev Guard variable for re-entrancy checks\\n   */\\n  bool internal _notEntered;\\n\\n  /**\\n   * @notice EIP-20 token name for this token\\n   */\\n  string public name;\\n\\n  /**\\n   * @notice EIP-20 token symbol for this token\\n   */\\n  string public symbol;\\n\\n  /**\\n   * @notice EIP-20 token decimals for this token\\n   */\\n  uint8 public decimals;\\n\\n  // Maximum borrow rate that can ever be applied (.0005% / block)\\n  uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n  // Maximum fraction of interest that can be set aside for reserves\\n  uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n  /**\\n   * @notice Administrator for this contract\\n   */\\n  address payable public admin;\\n\\n  /**\\n   * @notice Pending administrator for this contract\\n   */\\n  address payable public pendingAdmin;\\n\\n  /**\\n   * @notice Contract which oversees inter-jToken operations\\n   */\\n  ComptrollerInterface public comptroller;\\n\\n  /**\\n   * @notice Model which tells what the current interest rate should be\\n   */\\n  InterestRateModel public interestRateModel;\\n\\n  // Initial exchange rate used when minting the first JTokens (used when totalSupply = 0)\\n  uint internal initialExchangeRateMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for reserves\\n   */\\n  uint public reserveFactorMantissa;\\n\\n  /**\\n   * @notice Block number that interest was last accrued at\\n   */\\n  uint public accrualBlockNumber;\\n\\n  /**\\n   * @notice Accumulator of the total earned interest rate since the opening of the market\\n   */\\n  uint public borrowIndex;\\n\\n  /**\\n   * @notice Total amount of outstanding borrows of the underlying in this market\\n   */\\n  uint public totalBorrows;\\n\\n  /**\\n   * @notice Total amount of reserves of the underlying held in this market\\n   */\\n  uint public totalReserves;\\n\\n  /**\\n   * @notice Total number of tokens in circulation\\n   */\\n  uint public totalSupply;\\n\\n  // Official record of token balances for each account\\n  mapping(address => uint) internal accountTokens;\\n\\n  // Approved token transfer amounts on behalf of others\\n  mapping(address => mapping(address => uint)) internal transferAllowances;\\n\\n  /**\\n   * @notice Container for borrow balance information\\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n   */\\n  struct BorrowSnapshot {\\n    uint principal;\\n    uint interestIndex;\\n  }\\n\\n  // Mapping of account addresses to outstanding borrow balances\\n  mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n  /**\\n   * @notice Share of seized collateral that is added to reserves\\n   */\\n  uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n}\\n\\nabstract contract JTokenInterface is JTokenStorage {\\n  /**\\n   * @notice Indicator that this is a JToken contract (for inspection)\\n   */\\n  bool public constant isJToken = true;\\n\\n  /*** Market Events ***/\\n\\n  /**\\n   * @notice Event emitted when interest is accrued\\n   */\\n  event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when tokens are minted\\n   */\\n  event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n  /**\\n   * @notice Event emitted when tokens are redeemed\\n   */\\n  event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n  /**\\n   * @notice Event emitted when underlying is borrowed\\n   */\\n  event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is repaid\\n   */\\n  event RepayBorrow(\\n    address payer,\\n    address borrower,\\n    uint repayAmount,\\n    uint accountBorrows,\\n    uint totalBorrows\\n  );\\n\\n  /**\\n   * @notice Event emitted when a borrow is liquidated\\n   */\\n  event LiquidateBorrow(\\n    address liquidator,\\n    address borrower,\\n    uint repayAmount,\\n    address jTokenCollateral,\\n    uint seizeTokens\\n  );\\n\\n  /*** Admin Events ***/\\n\\n  /**\\n   * @notice Event emitted when pendingAdmin is changed\\n   */\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /**\\n   * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n   */\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  /**\\n   * @notice Event emitted when comptroller is changed\\n   */\\n  event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n  /**\\n   * @notice Event emitted when interestRateModel is changed\\n   */\\n  event NewMarketInterestRateModel(\\n    InterestRateModel oldInterestRateModel,\\n    InterestRateModel newInterestRateModel\\n  );\\n\\n  /**\\n   * @notice Event emitted when the reserve factor is changed\\n   */\\n  event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n  /**\\n   * @notice Event emitted when the reserves are added\\n   */\\n  event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n  /**\\n   * @notice Event emitted when the reserves are reduced\\n   */\\n  event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n  /**\\n   * @notice EIP20 Transfer event\\n   */\\n  event Transfer(address indexed from, address indexed to, uint amount);\\n\\n  /**\\n   * @notice EIP20 Approval event\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n  /*** User Interface ***/\\n\\n  function transfer(address dst, uint amount) external virtual returns (bool);\\n\\n  function transferFrom(address src, address dst, uint amount) external virtual returns (bool);\\n\\n  function approve(address spender, uint amount) external virtual returns (bool);\\n\\n  function allowance(address owner, address spender) external view virtual returns (uint);\\n\\n  function balanceOf(address owner) external view virtual returns (uint);\\n\\n  function balanceOfUnderlying(address owner) external virtual returns (uint);\\n\\n  function getAccountSnapshot(address account) external view virtual returns (uint, uint, uint, uint);\\n\\n  function borrowRatePerBlock() external view virtual returns (uint);\\n\\n  function supplyRatePerBlock() external view virtual returns (uint);\\n\\n  function totalBorrowsCurrent() external virtual returns (uint);\\n\\n  function borrowBalanceCurrent(address account) external virtual returns (uint);\\n\\n  function borrowBalanceStored(address account) external view virtual returns (uint);\\n\\n  function exchangeRateCurrent() external virtual returns (uint);\\n\\n  function exchangeRateStored() external view virtual returns (uint);\\n\\n  function getCash() external view virtual returns (uint);\\n\\n  function accrueInterest() external virtual returns (uint);\\n\\n  function seize(address liquidator, address borrower, uint seizeTokens) external virtual returns (uint);\\n\\n  /*** Admin Functions ***/\\n\\n  function _setPendingAdmin(address payable newPendingAdmin) external virtual returns (uint);\\n\\n  function _acceptAdmin() external virtual returns (uint);\\n\\n  function _setComptroller(ComptrollerInterface newComptroller) external virtual returns (uint);\\n\\n  function _setReserveFactor(uint newReserveFactorMantissa) external virtual returns (uint);\\n\\n  function _reduceReserves(uint reduceAmount) external virtual returns (uint);\\n\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) external virtual returns (uint);\\n}\\n\\ncontract JErc20Storage {\\n  /**\\n   * @notice Underlying asset for this JToken\\n   */\\n  address public underlying;\\n}\\n\\nabstract contract JErc20Interface is JErc20Storage {\\n  /*** User Interface ***/\\n\\n  function mint(uint mintAmount) external virtual returns (uint);\\n\\n  function redeem(uint redeemTokens) external virtual returns (uint);\\n\\n  function redeemUnderlying(uint redeemAmount) external virtual returns (uint);\\n\\n  function borrow(uint borrowAmount) external virtual returns (uint);\\n\\n  function repayBorrow(uint repayAmount) external virtual returns (uint);\\n\\n  function repayBorrowBehalf(address borrower, uint repayAmount) external virtual returns (uint);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint repayAmount,\\n    JTokenInterface jTokenCollateral\\n  ) external virtual returns (uint);\\n\\n  function sweepToken(EIP20NonStandardInterface token) external virtual;\\n\\n  /*** Admin Functions ***/\\n\\n  function _addReserves(uint addAmount) external virtual returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n  /**\\n   * @notice Implementation address for this contract\\n   */\\n  address public implementation;\\n}\\n\\nabstract contract CDelegatorInterface is CDelegationStorage {\\n  /**\\n   * @notice Emitted when implementation is changed\\n   */\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /**\\n   * @notice Called by the admin to update the implementation of the delegator\\n   * @param implementation_ The address of the new implementation for delegation\\n   * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n   */\\n  function _setImplementation(\\n    address implementation_,\\n    bool allowResign,\\n    bytes memory becomeImplementationData\\n  ) external virtual;\\n}\\n\\nabstract contract CDelegateInterface is CDelegationStorage {\\n  /**\\n   * @notice Called by the delegator on a delegate to initialize it for duty\\n   * @dev Should revert if any issues arise which make it unfit for delegation\\n   * @param data The encoded bytes data for any initialization\\n   */\\n  function _becomeImplementation(bytes memory data) external virtual;\\n\\n  /**\\n   * @notice Called by the delegator on a delegate to forfeit its responsibility\\n   */\\n  function _resignImplementation() external virtual;\\n}\\n\",\"keccak256\":\"0x5033fd168f53b972d746a4ca5127d24c7631deeaa835809097dee788d8427d95\",\"license\":\"BSD-3-Clause\"},\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./JToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n  /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n  bool public constant isPriceOracle = true;\\n\\n  /**\\n   * @notice Get the underlying price of a jToken asset\\n   * @param jToken The jToken to get the underlying price of\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getUnderlyingPrice(JToken jToken) external view virtual returns (uint);\\n\\n  /**\\n   * @notice Get the price of a specific asset\\n   * @param asset The asset to get the price of\\n   * @return The asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getAssetPrice(address asset) external view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x01b3177ee4b79bae046885ced531584dce7e1f95945048fa8e36fa6699ec30bc\",\"license\":\"BSD-3-Clause\"},\"contracts/Unitroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\n\\n/**\\n * @title ComptrollerCore\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * JTokens should reference this contract as their comptroller.\\n */\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\n  /**\\n   * @notice Emitted when pendingComptrollerImplementation is changed\\n   */\\n  event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n  /**\\n   * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\n   */\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /**\\n   * @notice Emitted when pendingAdmin is changed\\n   */\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /**\\n   * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n   */\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  constructor() public {\\n    // Set admin to caller\\n    admin = msg.sender;\\n  }\\n\\n  /*** Admin Functions ***/\\n  function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\\n    if (msg.sender != admin) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\n    }\\n\\n    address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n    pendingComptrollerImplementation = newPendingImplementation;\\n\\n    emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\n   * @dev Admin function for new implementation to accept it's role as implementation\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptImplementation() public returns (uint) {\\n    // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n    if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldImplementation = comptrollerImplementation;\\n    address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n    comptrollerImplementation = pendingComptrollerImplementation;\\n\\n    pendingComptrollerImplementation = address(0);\\n\\n    emit NewImplementation(oldImplementation, comptrollerImplementation);\\n    emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @param newPendingAdmin New pending admin.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\n    // Check caller = admin\\n    if (msg.sender != admin) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n    }\\n\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store pendingAdmin with value newPendingAdmin\\n    pendingAdmin = newPendingAdmin;\\n\\n    // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n   * @dev Admin function for pending admin to accept role and update admin\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptAdmin() public returns (uint) {\\n    // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldAdmin = admin;\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store admin with value pendingAdmin\\n    admin = pendingAdmin;\\n\\n    // Clear the pending value\\n    pendingAdmin = address(0);\\n\\n    emit NewAdmin(oldAdmin, admin);\\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n    return uint(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * It returns to the external caller whatever the implementation returns\\n   * or forwards reverts.\\n   */\\n  fallback() external payable {\\n    // delegate all other functions to current implementation\\n    (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\n\\n    assembly {\\n      let free_mem_ptr := mload(0x40)\\n      returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n      switch success\\n      case 0 {\\n        revert(free_mem_ptr, returndatasize())\\n      }\\n      default {\\n        return(free_mem_ptr, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfdfd40a71e6c2e5729eb40369331cdd5c412b8d76d7675ba467d2f2c9d676b7a\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "author": "JLEND",
    "events": {
      "Failure(uint256,uint256,uint256)": {
        "details": "`error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary contract-specific code that enables us to report opaque error codes from upgradeable contracts.*"
      }
    },
    "kind": "dev",
    "methods": {
      "_grantJLend(address,uint256)": {
        "details": "Note: If there is not enough JLEND, we do not perform the transfer all.",
        "params": {
          "amount": "The amount of JLEND to (possibly) transfer",
          "recipient": "The address of the recipient to transfer JLEND to"
        }
      },
      "_setBorrowCapGuardian(address)": {
        "params": {
          "newBorrowCapGuardian": "The address of the new Borrow Cap Guardian"
        }
      },
      "_setCloseFactor(uint256)": {
        "details": "Admin function to set closeFactor",
        "params": {
          "newCloseFactorMantissa": "New close factor, scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure"
        }
      },
      "_setCollateralFactor(address,uint256)": {
        "details": "Admin function to set per-market collateralFactor",
        "params": {
          "jToken": "The market to set the factor on",
          "newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "_setContributorJLendSpeed(address,uint256)": {
        "params": {
          "contributor": "The contributor whose JLEND speed to update",
          "jLendSpeed": "New JLEND speed for contributor"
        }
      },
      "_setJLendSpeeds(address[],uint256[],uint256[])": {
        "params": {
          "borrowSpeeds": "New borrow-side JLEND speed for the corresponding market.",
          "jTokens": "The markets whose JLEND speed to update.",
          "supplySpeeds": "New supply-side JLEND speed for the corresponding market."
        }
      },
      "_setLiquidationIncentive(uint256)": {
        "details": "Admin function to set liquidationIncentive",
        "params": {
          "newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "details": "Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.",
        "params": {
          "jTokens": "The addresses of the markets (tokens) to change the borrow caps for",
          "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing."
        }
      },
      "_setPauseGuardian(address)": {
        "params": {
          "newPauseGuardian": "The address of the new Pause Guardian"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "_setPriceOracle(address)": {
        "details": "Admin function to set a new price oracle",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_supportMarket(address)": {
        "details": "Admin function to set isListed and add support for the market",
        "params": {
          "jToken": "The address of the market (token) to list"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "borrowAllowed(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of underlying the account would borrow",
          "borrower": "The account which would borrow the asset",
          "jToken": "The market to verify the borrow against"
        },
        "returns": {
          "_0": "0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "borrowVerify(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of the underlying asset requested to borrow",
          "borrower": "The address borrowing the underlying",
          "jToken": "Asset whose underlying is being borrowed"
        }
      },
      "checkMembership(address,address)": {
        "params": {
          "account": "The address of the account to check",
          "jToken": "The jToken to check"
        },
        "returns": {
          "_0": "True if the account is in the asset, otherwise false."
        }
      },
      "claimJLend(address)": {
        "params": {
          "holder": "The address to claim JLEND for"
        }
      },
      "claimJLend(address,address[])": {
        "params": {
          "holder": "The address to claim JLEND for",
          "jTokens": "The list of markets to claim JLEND in"
        }
      },
      "claimJLend(address[],address[],bool,bool)": {
        "params": {
          "borrowers": "Whether or not to claim JLEND earned by borrowing",
          "holders": "The addresses to claim JLEND for",
          "jTokens": "The list of markets to claim JLEND in",
          "suppliers": "Whether or not to claim JLEND earned by supplying"
        }
      },
      "enterMarkets(address[])": {
        "params": {
          "jTokens": "The list of addresses of the jToken markets to be enabled"
        },
        "returns": {
          "_0": "Success indicator for whether each corresponding market was entered"
        }
      },
      "exitMarket(address)": {
        "details": "Sender must not have an outstanding borrow balance in the asset,  or be providing necessary collateral for an outstanding borrow.",
        "params": {
          "jTokenAddress": "The address of the asset to be removed"
        },
        "returns": {
          "_0": "Whether or not the account successfully exited the market"
        }
      },
      "getAccountLiquidity(address)": {
        "returns": {
          "_0": "(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)"
        }
      },
      "getAllMarkets()": {
        "details": "The automatic getter may be used to access an individual market.",
        "returns": {
          "_0": "The list of market addresses"
        }
      },
      "getAssetsIn(address)": {
        "params": {
          "account": "The address of the account to pull assets for"
        },
        "returns": {
          "_0": "A dynamic list with the assets the account has entered"
        }
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "params": {
          "account": "The account to determine liquidity for",
          "borrowAmount": "The amount of underlying to hypothetically borrow",
          "jTokenModify": "The market to hypothetically redeem/borrow in",
          "redeemTokens": "The number of tokens to hypothetically redeem"
        },
        "returns": {
          "_0": "(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,          hypothetical account shortfall below collateral requirements)"
        }
      },
      "getJLendAddress()": {
        "returns": {
          "_0": "The address of JLEND"
        }
      },
      "isDeprecated(address)": {
        "details": "All borrows in a deprecated jToken market can be immediately liquidated",
        "params": {
          "jToken": "The market to check if deprecated"
        }
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "jTokenBorrowed": "Asset which was borrowed by the borrower",
          "jTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "repayAmount": "The amount of underlying being repaid"
        }
      },
      "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
        "params": {
          "actualRepayAmount": "The amount of underlying being repaid",
          "borrower": "The address of the borrower",
          "jTokenBorrowed": "Asset which was borrowed by the borrower",
          "jTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral"
        }
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "details": "Used in liquidation (called in jToken.liquidateBorrowFresh)",
        "params": {
          "actualRepayAmount": "The amount of jTokenBorrowed underlying to convert into jTokenCollateral tokens",
          "jTokenBorrowed": "The address of the borrowed jToken",
          "jTokenCollateral": "The address of the collateral jToken"
        },
        "returns": {
          "_0": "(errorCode, number of jTokenCollateral tokens to be seized in a liquidation)"
        }
      },
      "mintAllowed(address,address,uint256)": {
        "params": {
          "jToken": "The market to verify the mint against",
          "mintAmount": "The amount of underlying being supplied to the market in exchange for tokens",
          "minter": "The account which would get the minted tokens"
        },
        "returns": {
          "_0": "0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "mintVerify(address,address,uint256,uint256)": {
        "params": {
          "actualMintAmount": "The amount of the underlying asset being minted",
          "jToken": "Asset being minted",
          "mintTokens": "The number of tokens being minted",
          "minter": "The address minting the tokens"
        }
      },
      "redeemAllowed(address,address,uint256)": {
        "params": {
          "jToken": "The market to verify the redeem against",
          "redeemTokens": "The number of jTokens to exchange for the underlying asset in the market",
          "redeemer": "The account which would redeem the tokens"
        },
        "returns": {
          "_0": "0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "params": {
          "jToken": "Asset being redeemed",
          "redeemAmount": "The amount of the underlying asset being redeemed",
          "redeemTokens": "The number of tokens being redeemed",
          "redeemer": "The address redeeming the tokens"
        }
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "params": {
          "borrower": "The account which would borrowed the asset",
          "jToken": "The market to verify the repay against",
          "payer": "The account which would repay the asset",
          "repayAmount": "The amount of the underlying asset the account would repay"
        },
        "returns": {
          "_0": "0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "repayBorrowVerify(address,address,address,uint256,uint256)": {
        "params": {
          "actualRepayAmount": "The amount of underlying being repaid",
          "borrower": "The address of the borrower",
          "jToken": "Asset being repaid",
          "payer": "The address repaying the borrow"
        }
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "jTokenBorrowed": "Asset which was borrowed by the borrower",
          "jTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize"
        }
      },
      "seizeVerify(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "jTokenBorrowed": "Asset which was borrowed by the borrower",
          "jTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize"
        }
      },
      "transferAllowed(address,address,address,uint256)": {
        "params": {
          "dst": "The account which receives the tokens",
          "jToken": "The market to verify the transfer against",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of jTokens to transfer"
        },
        "returns": {
          "_0": "0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "transferVerify(address,address,address,uint256)": {
        "params": {
          "dst": "The account which receives the tokens",
          "jToken": "Asset being transferred",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of jTokens to transfer"
        }
      },
      "updateContributorRewards(address)": {
        "params": {
          "contributor": "The address to calculate contributor rewards for"
        }
      }
    },
    "title": "JLEND's Comptroller Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ActionPaused(address,string,bool)": {
        "notice": "Emitted when an action is paused on a market"
      },
      "ActionPaused(string,bool)": {
        "notice": "Emitted when an action is paused globally"
      },
      "ContributorJLendSpeedUpdated(address,uint256)": {
        "notice": "Emitted when a new JLEND speed is set for a contributor"
      },
      "DistributedBorrowerJLend(address,address,uint256,uint256)": {
        "notice": "Emitted when JLEND is distributed to a borrower"
      },
      "DistributedSupplierJLend(address,address,uint256,uint256)": {
        "notice": "Emitted when JLEND is distributed to a supplier"
      },
      "JLendAccruedAdjusted(address,uint256,uint256)": {
        "notice": "Emitted when JLEND accrued for a user has been manually adjusted."
      },
      "JLendBorrowSpeedUpdated(address,uint256)": {
        "notice": "Emitted when a new borrow-side JLEND speed is calculated for a market"
      },
      "JLendGranted(address,uint256)": {
        "notice": "Emitted when JLEND is granted by admin"
      },
      "JLendReceivableUpdated(address,uint256,uint256)": {
        "notice": "Emitted when JLEND receivable for a user has been updated."
      },
      "JLendSupplySpeedUpdated(address,uint256)": {
        "notice": "Emitted when a new supply-side JLEND speed is calculated for a market"
      },
      "MarketEntered(address,address)": {
        "notice": "Emitted when an account enters a market"
      },
      "MarketExited(address,address)": {
        "notice": "Emitted when an account exits a market"
      },
      "MarketListed(address)": {
        "notice": "Emitted when an admin supports a market"
      },
      "NewBorrowCap(address,uint256)": {
        "notice": "Emitted when borrow cap for a jToken is changed"
      },
      "NewBorrowCapGuardian(address,address)": {
        "notice": "Emitted when borrow cap guardian is changed"
      },
      "NewCloseFactor(uint256,uint256)": {
        "notice": "Emitted when close factor is changed by admin"
      },
      "NewCollateralFactor(address,uint256,uint256)": {
        "notice": "Emitted when a collateral factor is changed by admin"
      },
      "NewLiquidationIncentive(uint256,uint256)": {
        "notice": "Emitted when liquidation incentive is changed by admin"
      },
      "NewPauseGuardian(address,address)": {
        "notice": "Emitted when pause guardian is changed"
      },
      "NewPriceOracle(address,address)": {
        "notice": "Emitted when price oracle is changed"
      }
    },
    "kind": "user",
    "methods": {
      "_grantJLend(address,uint256)": {
        "notice": "Transfer JLEND to the recipient"
      },
      "_setBorrowCapGuardian(address)": {
        "notice": "Admin function to change the Borrow Cap Guardian"
      },
      "_setCloseFactor(uint256)": {
        "notice": "Sets the closeFactor used when liquidating borrows"
      },
      "_setCollateralFactor(address,uint256)": {
        "notice": "Sets the collateralFactor for a market"
      },
      "_setContributorJLendSpeed(address,uint256)": {
        "notice": "Set JLEND speed for a single contributor"
      },
      "_setJLendSpeeds(address[],uint256[],uint256[])": {
        "notice": "Set JLEND borrow and supply speeds for the specified markets."
      },
      "_setLiquidationIncentive(uint256)": {
        "notice": "Sets liquidationIncentive"
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "notice": "Set the given borrow caps for the given jToken markets. Borrowing that brings total borrows to or above borrow cap will revert."
      },
      "_setPauseGuardian(address)": {
        "notice": "Admin function to change the Pause Guardian"
      },
      "_setPriceOracle(address)": {
        "notice": "Sets a new price oracle for the comptroller"
      },
      "_supportMarket(address)": {
        "notice": "Add the market to the markets mapping and set it as listed"
      },
      "accountAssets(address,uint256)": {
        "notice": "Per-account mapping of \"assets you are in\", capped by maxAssets"
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "allMarkets(uint256)": {
        "notice": "A list of all markets"
      },
      "borrowAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
      },
      "borrowVerify(address,address,uint256)": {
        "notice": "Validates borrow and reverts on rejection. May emit logs."
      },
      "checkMembership(address,address)": {
        "notice": "Returns whether the given account is entered in the given asset"
      },
      "claimJLend(address)": {
        "notice": "Claim all the jLend accrued by holder in all markets"
      },
      "claimJLend(address,address[])": {
        "notice": "Claim all the jLend accrued by holder in the specified markets"
      },
      "claimJLend(address[],address[],bool,bool)": {
        "notice": "Claim all jLend accrued by the holders"
      },
      "closeFactorMantissa()": {
        "notice": "Multiplier used to calculate the maximum repayAmount when liquidating a borrow"
      },
      "comptrollerImplementation()": {
        "notice": "Active brains of Unitroller"
      },
      "enterMarkets(address[])": {
        "notice": "Add assets to be included in account liquidity calculation"
      },
      "exitMarket(address)": {
        "notice": "Removes asset from sender's account liquidity calculation"
      },
      "fixBadAccruals(address[],uint256[])": {
        "notice": "Delete this function after proposal 65 is executed"
      },
      "getAccountLiquidity(address)": {
        "notice": "Determine the current account liquidity wrt collateral requirements"
      },
      "getAllMarkets()": {
        "notice": "Return all of the markets"
      },
      "getAssetsIn(address)": {
        "notice": "Returns the assets an account has entered"
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "notice": "Determine what the account liquidity would be if the given amounts were redeemed/borrowed"
      },
      "getJLendAddress()": {
        "notice": "Return the address of the JLEND token"
      },
      "isComptroller()": {
        "notice": "Indicator that this is a Comptroller contract (for inspection)"
      },
      "isDeprecated(address)": {
        "notice": "Returns true if the given jToken market has been deprecated"
      },
      "jLendAccrued(address)": {
        "notice": "The JLEND accrued but not yet transferred to each user"
      },
      "jLendBorrowSpeeds(address)": {
        "notice": "The rate at which jLend is distributed to the corresponding borrow market (per block)"
      },
      "jLendBorrowState(address)": {
        "notice": "The JLEND market borrow state for each market"
      },
      "jLendBorrowerIndex(address,address)": {
        "notice": "The JLEND borrow index for each market for each borrower as of the last time they accrued JLEND"
      },
      "jLendContributorSpeeds(address)": {
        "notice": "The portion of JLEND that each contributor receives per block"
      },
      "jLendInitialIndex()": {
        "notice": "The initial JLEND index for a market"
      },
      "jLendRate()": {
        "notice": "The rate at which the flywheel distributes JLEND, per block"
      },
      "jLendReceivable(address)": {
        "notice": "Accounting storage mapping account addresses to how much JLEND they owe the protocol."
      },
      "jLendSpeeds(address)": {
        "notice": "The portion of jLendRate that each market currently receives"
      },
      "jLendSupplierIndex(address,address)": {
        "notice": "The JLEND borrow index for each market for each supplier as of the last time they accrued JLEND"
      },
      "jLendSupplySpeeds(address)": {
        "notice": "The rate at which jLend is distributed to the corresponding supply market (per block)"
      },
      "jLendSupplyState(address)": {
        "notice": "The JLEND market supply state for each market"
      },
      "lastContributorBlock(address)": {
        "notice": "Last block at which a contributor's JLEND rewards have been allocated"
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the liquidation should be allowed to occur"
      },
      "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
        "notice": "Validates liquidateBorrow and reverts on rejection. May emit logs."
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "notice": "Calculate number of tokens of collateral asset to seize given an underlying amount"
      },
      "liquidationIncentiveMantissa()": {
        "notice": "Multiplier representing the discount on collateral that a liquidator receives"
      },
      "markets(address)": {
        "notice": "Official mapping of jTokens -> Market metadata"
      },
      "maxAssets()": {
        "notice": "Max number of assets a single account can participate in (borrow or use as collateral)"
      },
      "mintAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to mint tokens in the given market"
      },
      "mintVerify(address,address,uint256,uint256)": {
        "notice": "Validates mint and reverts on rejection. May emit logs."
      },
      "oracle()": {
        "notice": "Oracle which gives the price of any given asset"
      },
      "pauseGuardian()": {
        "notice": "The Pause Guardian can pause certain actions as a safety mechanism.  Actions which allow users to remove their own assets cannot be paused.  Liquidation / seizing / transfer can only be paused globally, not by market."
      },
      "pendingAdmin()": {
        "notice": "Pending administrator for this contract"
      },
      "pendingComptrollerImplementation()": {
        "notice": "Pending brains of Unitroller"
      },
      "proposal65FixExecuted()": {
        "notice": "Flag indicating whether the function to fix JLEND accruals has been executed (RE: proposal 62 bug)"
      },
      "redeemAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to redeem tokens in the given market"
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "notice": "Validates redeem and reverts on rejection. May emit logs."
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to repay a borrow in the given market"
      },
      "repayBorrowVerify(address,address,address,uint256,uint256)": {
        "notice": "Validates repayBorrow and reverts on rejection. May emit logs."
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the seizing of assets should be allowed to occur"
      },
      "seizeVerify(address,address,address,address,uint256)": {
        "notice": "Validates seize and reverts on rejection. May emit logs."
      },
      "transferAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to transfer tokens in the given market"
      },
      "transferVerify(address,address,address,uint256)": {
        "notice": "Validates transfer and reverts on rejection. May emit logs."
      },
      "updateContributorRewards(address)": {
        "notice": "Calculate additional accrued JLEND for a contributor since last accrual"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8660,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8663,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8666,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "comptrollerImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8669,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "pendingComptrollerImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8676,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(PriceOracle)23723"
      },
      {
        "astId": 8679,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "closeFactorMantissa",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 8682,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "liquidationIncentiveMantissa",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 8685,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "maxAssets",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 8692,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "accountAssets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_contract(JToken)21058)dyn_storage)"
      },
      {
        "astId": 8712,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "markets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Market)8706_storage)"
      },
      {
        "astId": 8715,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "pauseGuardian",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 8717,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "_mintGuardianPaused",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 8719,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "_borrowGuardianPaused",
        "offset": 21,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 8721,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "transferGuardianPaused",
        "offset": 22,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 8723,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "seizeGuardianPaused",
        "offset": 23,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 8727,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "mintGuardianPaused",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8731,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "borrowGuardianPaused",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8744,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "allMarkets",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_contract(JToken)21058)dyn_storage"
      },
      {
        "astId": 8747,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "jLendRate",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 8752,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "jLendSpeeds",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8758,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "jLendSupplyState",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(JLendMarketState)8739_storage)"
      },
      {
        "astId": 8764,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "jLendBorrowState",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(JLendMarketState)8739_storage)"
      },
      {
        "astId": 8771,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "jLendSupplierIndex",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8778,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "jLendBorrowerIndex",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8783,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "jLendAccrued",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8788,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "borrowCapGuardian",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 8792,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "borrowCaps",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8800,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "jLendContributorSpeeds",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8805,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "lastContributorBlock",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8813,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "jLendBorrowSpeeds",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8818,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "jLendSupplySpeeds",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8824,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "proposal65FixExecuted",
        "offset": 0,
        "slot": "27",
        "type": "t_bool"
      },
      {
        "astId": 8829,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "jLendReceivable",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(JToken)21058)dyn_storage": {
        "base": "t_contract(JToken)21058",
        "encoding": "dynamic_array",
        "label": "contract JToken[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(JToken)21058": {
        "encoding": "inplace",
        "label": "contract JToken",
        "numberOfBytes": "20"
      },
      "t_contract(PriceOracle)23723": {
        "encoding": "inplace",
        "label": "contract PriceOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(JToken)21058)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract JToken[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(JToken)21058)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(JLendMarketState)8739_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV3Storage.JLendMarketState)",
        "numberOfBytes": "32",
        "value": "t_struct(JLendMarketState)8739_storage"
      },
      "t_mapping(t_address,t_struct(Market)8706_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV2Storage.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)8706_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(JLendMarketState)8739_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV3Storage.JLendMarketState",
        "members": [
          {
            "astId": 8736,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 8738,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "block",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Market)8706_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV2Storage.Market",
        "members": [
          {
            "astId": 8697,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "isListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8699,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "collateralFactorMantissa",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8703,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "accountMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 8705,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "isJLended",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}