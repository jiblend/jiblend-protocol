{
  "address": "0x196Dd35b2D1Fae89AB5e4d67Beb69C1a2E89988a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d1fb0749863757778b5129aa36be83b7013806fa08534684c77658f59c09150",
  "receipt": {
    "to": null,
    "from": "0x57a37B57b4809582E8E52Cc4602cb70143f3d76e",
    "contractAddress": "0x196Dd35b2D1Fae89AB5e4d67Beb69C1a2E89988a",
    "transactionIndex": 2,
    "gasUsed": "1418748",
    "logsBloom": "0x
    "blockHash": "0x6cb655adb51eba95fadd44a4f4ffe5644b678dc8caaa5f4d95ba80e04b484bd8",
    "transactionHash": "0x6d1fb0749863757778b5129aa36be83b7013806fa08534684c77658f59c09150",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 2460690,
        "transactionHash": "0x6d1fb0749863757778b5129aa36be83b7013806fa08534684c77658f59c09150",
        "address": "0x196Dd35b2D1Fae89AB5e4d67Beb69C1a2E89988a",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000057a37b57b4809582e8e52cc4602cb70143f3d76e"
        ],
        "data": "0x000000000000000000000000000000000000000000084595161401484a000000",
        "logIndex": 0,
        "blockHash": "0x6cb655adb51eba95fadd44a4f4ffe5644b678dc8caaa5f4d95ba80e04b484bd8"
      }
    ],
    "blockNumber": 2460690,
    "cumulativeGasUsed": "1527201",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x57a37B57b4809582E8E52Cc4602cb70143f3d76e"
  ],
  "numDeployments": 1,
  "solcInputHash": "d89ba6bd5d1c370bbf965df5987212b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"rawAmount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"constructor\":{\"params\":{\"account\":\"The initial account to grant all the tokens\"}},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"getPriorVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"transfer(address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"The standard EIP-20 approval event\"},\"DelegateChanged(address,address,address)\":{\"notice\":\"An event thats emitted when an account changes its delegate\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"notice\":\"An event thats emitted when a delegate account's vote balance changes\"},\"Transfer(address,address,uint256)\":{\"notice\":\"The standard EIP-20 transfer event\"}},\"kind\":\"user\",\"methods\":{\"DELEGATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkpoints(address,uint32)\":{\"notice\":\"A record of votes checkpoints for each account, by index\"},\"constructor\":{\"notice\":\"Construct a new JLend token\"},\"decimals()\":{\"notice\":\"EIP-20 token decimals for this token\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates votes from signatory to `delegatee`\"},\"delegates(address)\":{\"notice\":\"A record of each accounts delegate\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"name()\":{\"notice\":\"EIP-20 token name for this token\"},\"nonces(address)\":{\"notice\":\"A record of states for signing / validating signatures\"},\"numCheckpoints(address)\":{\"notice\":\"The number of checkpoints for each account\"},\"symbol()\":{\"notice\":\"EIP-20 token symbol for this token\"},\"totalSupply()\":{\"notice\":\"Total number of tokens in circulation\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Governance/JLEND.sol\":\"JLEND\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Governance/JLEND.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract JLEND {\\n  /// @notice EIP-20 token name for this token\\n  string public constant name = \\\"JLEND Token\\\";\\n\\n  /// @notice EIP-20 token symbol for this token\\n  string public constant symbol = \\\"JLEND\\\";\\n\\n  /// @notice EIP-20 token decimals for this token\\n  uint8 public constant decimals = 18;\\n\\n  /// @notice Total number of tokens in circulation\\n  uint public constant totalSupply = 10000000e18; // 10 million JLend\\n\\n  /// @notice Allowance amounts on behalf of others\\n  mapping(address => mapping(address => uint96)) internal allowances;\\n\\n  /// @notice Official record of token balances for each account\\n  mapping(address => uint96) internal balances;\\n\\n  /// @notice A record of each accounts delegate\\n  mapping(address => address) public delegates;\\n\\n  /// @notice A checkpoint for marking number of votes from a given block\\n  struct Checkpoint {\\n    uint32 fromBlock;\\n    uint96 votes;\\n  }\\n\\n  /// @notice A record of votes checkpoints for each account, by index\\n  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n  /// @notice The number of checkpoints for each account\\n  mapping(address => uint32) public numCheckpoints;\\n\\n  /// @notice The EIP-712 typehash for the contract's domain\\n  bytes32 public constant DOMAIN_TYPEHASH =\\n    keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATION_TYPEHASH =\\n    keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n  /// @notice A record of states for signing / validating signatures\\n  mapping(address => uint) public nonces;\\n\\n  /// @notice An event thats emitted when an account changes its delegate\\n  event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n  /// @notice An event thats emitted when a delegate account's vote balance changes\\n  event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n  /// @notice The standard EIP-20 transfer event\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /// @notice The standard EIP-20 approval event\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /**\\n   * @notice Construct a new JLend token\\n   * @param account The initial account to grant all the tokens\\n   */\\n  constructor(address account) public {\\n    balances[account] = uint96(totalSupply);\\n    emit Transfer(address(0), account, totalSupply);\\n  }\\n\\n  /**\\n   * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n   * @param account The address of the account holding the funds\\n   * @param spender The address of the account spending the funds\\n   * @return The number of tokens approved\\n   */\\n  function allowance(address account, address spender) external view returns (uint) {\\n    return allowances[account][spender];\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n   * @return Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint rawAmount) external returns (bool) {\\n    uint96 amount;\\n    if (rawAmount == type(uint).max) {\\n      amount = type(uint96).max;\\n    } else {\\n      amount = safe96(rawAmount, \\\"JLend::approve: amount exceeds 96 bits\\\");\\n    }\\n\\n    allowances[msg.sender][spender] = amount;\\n\\n    emit Approval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Get the number of tokens held by the `account`\\n   * @param account The address of the account to get the balance of\\n   * @return The number of tokens held\\n   */\\n  function balanceOf(address account) external view returns (uint) {\\n    return balances[account];\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param rawAmount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint rawAmount) external returns (bool) {\\n    uint96 amount = safe96(rawAmount, \\\"JLend::transfer: amount exceeds 96 bits\\\");\\n    _transferTokens(msg.sender, dst, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param rawAmount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\\n    address spender = msg.sender;\\n    uint96 spenderAllowance = allowances[src][spender];\\n    uint96 amount = safe96(rawAmount, \\\"JLend::approve: amount exceeds 96 bits\\\");\\n\\n    if (spender != src && spenderAllowance != type(uint96).max) {\\n      uint96 newAllowance = sub96(\\n        spenderAllowance,\\n        amount,\\n        \\\"JLend::transferFrom: transfer amount exceeds spender allowance\\\"\\n      );\\n      allowances[src][spender] = newAllowance;\\n\\n      emit Approval(src, spender, newAllowance);\\n    }\\n\\n    _transferTokens(src, dst, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Delegate votes from `msg.sender` to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   */\\n  function delegate(address delegatee) public {\\n    return _delegate(msg.sender, delegatee);\\n  }\\n\\n  /**\\n   * @notice Delegates votes from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\\n    bytes32 domainSeparator = keccak256(\\n      abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))\\n    );\\n    bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), \\\"JLend::delegateBySig: invalid signature\\\");\\n    require(nonce == nonces[signatory]++, \\\"JLend::delegateBySig: invalid nonce\\\");\\n    require(block.timestamp <= expiry, \\\"JLend::delegateBySig: signature expired\\\");\\n    return _delegate(signatory, delegatee);\\n  }\\n\\n  /**\\n   * @notice Gets the current votes balance for `account`\\n   * @param account The address to get votes balance\\n   * @return The number of current votes for `account`\\n   */\\n  function getCurrentVotes(address account) external view returns (uint96) {\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n  }\\n\\n  /**\\n   * @notice Determine the prior number of votes for an account as of a block number\\n   * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n   * @param account The address of the account to check\\n   * @param blockNumber The block number to get the vote balance at\\n   * @return The number of votes the account had as of the given block\\n   */\\n  function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\\n    require(blockNumber < block.number, \\\"JLend::getPriorVotes: not yet determined\\\");\\n\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    if (nCheckpoints == 0) {\\n      return 0;\\n    }\\n\\n    // First check most recent balance\\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n      return checkpoints[account][nCheckpoints - 1].votes;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (checkpoints[account][0].fromBlock > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint32 lower = 0;\\n    uint32 upper = nCheckpoints - 1;\\n    while (upper > lower) {\\n      uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Checkpoint memory cp = checkpoints[account][center];\\n      if (cp.fromBlock == blockNumber) {\\n        return cp.votes;\\n      } else if (cp.fromBlock < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return checkpoints[account][lower].votes;\\n  }\\n\\n  function _delegate(address delegator, address delegatee) internal {\\n    address currentDelegate = delegates[delegator];\\n    uint96 delegatorBalance = balances[delegator];\\n    delegates[delegator] = delegatee;\\n\\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n  }\\n\\n  function _transferTokens(address src, address dst, uint96 amount) internal {\\n    require(src != address(0), \\\"JLend::_transferTokens: cannot transfer from the zero address\\\");\\n    require(dst != address(0), \\\"JLend::_transferTokens: cannot transfer to the zero address\\\");\\n\\n    balances[src] = sub96(balances[src], amount, \\\"JLend::_transferTokens: transfer amount exceeds balance\\\");\\n    balances[dst] = add96(balances[dst], amount, \\\"JLend::_transferTokens: transfer amount overflows\\\");\\n    emit Transfer(src, dst, amount);\\n\\n    _moveDelegates(delegates[src], delegates[dst], amount);\\n  }\\n\\n  function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\n    if (srcRep != dstRep && amount > 0) {\\n      if (srcRep != address(0)) {\\n        uint32 srcRepNum = numCheckpoints[srcRep];\\n        uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n        uint96 srcRepNew = sub96(srcRepOld, amount, \\\"JLend::_moveVotes: vote amount underflows\\\");\\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n      }\\n\\n      if (dstRep != address(0)) {\\n        uint32 dstRepNum = numCheckpoints[dstRep];\\n        uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n        uint96 dstRepNew = add96(dstRepOld, amount, \\\"JLend::_moveVotes: vote amount overflows\\\");\\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n      }\\n    }\\n  }\\n\\n  function _writeCheckpoint(\\n    address delegatee,\\n    uint32 nCheckpoints,\\n    uint96 oldVotes,\\n    uint96 newVotes\\n  ) internal {\\n    uint32 blockNumber = safe32(block.number, \\\"JLend::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n    if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n    } else {\\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n      numCheckpoints[delegatee] = nCheckpoints + 1;\\n    }\\n\\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n  }\\n\\n  function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2 ** 32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\n    require(n < 2 ** 96, errorMessage);\\n    return uint96(n);\\n  }\\n\\n  function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n    uint96 c = a + b;\\n    require(c >= a, errorMessage);\\n    return c;\\n  }\\n\\n  function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n    require(b <= a, errorMessage);\\n    return a - b;\\n  }\\n\\n  function getChainId() internal view returns (uint) {\\n    uint256 chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n    return chainId;\\n  }\\n}\\n\",\"keccak256\":\"0xb3e692c46d3b20d1bb6c3dc75e023ca49b0615df4b7127dda3233a5ac161b668\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161191438038061191483398101604081905261002f916100a5565b6001600160a01b03811660008181526001602052604080822080546001600160601b0319166a084595161401484a00000090811790915590517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef916100979190815260200190565b60405180910390a3506100d5565b6000602082840312156100b757600080fd5b81516001600160a01b03811681146100ce57600080fd5b9392505050565b611830806100e46000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806370a08231116100ad578063b4b5ea5711610071578063b4b5ea5714610342578063c3cda52014610355578063dd62ed3e14610368578063e7a324dc146103a8578063f1127ed8146103cf57600080fd5b806370a082311461028e578063782d6fe1146102c05780637ecebe00146102eb57806395d89b411461030b578063a9059cbb1461032f57600080fd5b806323b872dd116100f457806323b872dd146101d0578063313ce567146101e3578063587cde1e146101fd5780635c19a95c1461023e5780636fcfff451461025357600080fd5b806306fdde0314610126578063095ea7b31461016657806318160ddd1461018957806320606b70146101a9575b600080fd5b6101506040518060400160405280600b81526020016a252622a722102a37b5b2b760a91b81525081565b60405161015d91906113e2565b60405180910390f35b61017961017436600461144c565b610436565b604051901515815260200161015d565b61019b6a084595161401484a00000081565b60405190815260200161015d565b61019b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6101796101de366004611476565b6104f4565b6101eb601281565b60405160ff909116815260200161015d565b61022661020b3660046114b2565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161015d565b61025161024c3660046114b2565b610635565b005b6102796102613660046114b2565b60046020526000908152604090205463ffffffff1681565b60405163ffffffff909116815260200161015d565b61019b61029c3660046114b2565b6001600160a01b03166000908152600160205260409020546001600160601b031690565b6102d36102ce36600461144c565b610642565b6040516001600160601b03909116815260200161015d565b61019b6102f93660046114b2565b60056020526000908152604090205481565b61015060405180604001604052806005815260200164129311539160da1b81525081565b61017961033d36600461144c565b6108d2565b6102d36103503660046114b2565b61090e565b6102516103633660046114cd565b61098c565b61019b61037636600461152d565b6001600160a01b039182166000908152602081815260408083209390941682529190915220546001600160601b031690565b61019b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b6104126103dd366004611560565b600360209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6040805163ffffffff90931683526001600160601b0390911660208301520161015d565b600080600019830361045057506001600160601b03610475565b610472836040518060600160405280602681526020016116de60269139610c7e565b90505b336000818152602081815260408083206001600160a01b0389168085529083529281902080546001600160601b0319166001600160601b03871690811790915590519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a360019150505b92915050565b6001600160a01b0383166000908152602081815260408083203380855290835281842054825160608101909352602680845291936001600160601b0390911692859261054a92889291906116de90830139610c7e565b9050866001600160a01b0316836001600160a01b03161415801561057757506001600160601b0382811614155b1561061d5760006105a183836040518060600160405280603e8152602001611704603e9139610cad565b6001600160a01b03898116600081815260208181526040808320948a168084529482529182902080546001600160601b0319166001600160601b0387169081179091559151918252939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610628878783610cf7565b5060019695505050505050565b61063f3382610f48565b50565b60004382106106a95760405162461bcd60e51b815260206004820152602860248201527f4a4c656e643a3a6765745072696f72566f7465733a206e6f74207965742064656044820152671d195c9b5a5b995960c21b60648201526084015b60405180910390fd5b6001600160a01b03831660009081526004602052604081205463ffffffff16908190036106da5760009150506104ee565b6001600160a01b038416600090815260036020526040812084916106ff6001856115b6565b63ffffffff90811682526020820192909252604001600020541611610772576001600160a01b0384166000908152600360205260408120906107426001846115b6565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b031691506104ee9050565b6001600160a01b038416600090815260036020908152604080832083805290915290205463ffffffff168310156107ad5760009150506104ee565b6000806107bb6001846115b6565b90505b8163ffffffff168163ffffffff16111561088d57600060026107e084846115b6565b6107ea91906115da565b6107f490836115b6565b6001600160a01b038816600090815260036020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b031691810191909152919250879003610861576020015194506104ee9350505050565b805163ffffffff1687111561087857819350610886565b6108836001836115b6565b92505b50506107be565b506001600160a01b038516600090815260036020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b6000806108f78360405180606001604052806027815260200161168260279139610c7e565b9050610904338583610cf7565b5060019392505050565b6001600160a01b03811660009081526004602052604081205463ffffffff1680610939576000610985565b6001600160a01b03831660009081526003602052604081209061095d6001846115b6565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b9392505050565b604080518082018252600b81526a252622a722102a37b5b2b760a91b60209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527f0164509d5bf8666fbf95f6f5e89dc4764ae12030efca1759159eae4d971e001481840152466060820152306080808301919091528351808303909101815260a0820184528051908301207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08301526001600160a01b038a1660e083015261010082018990526101208083018990528451808403909101815261014083019094528351939092019290922061190160f01b6101608401526101628301829052610182830181905290916000906101a20160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015610b12573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610b855760405162461bcd60e51b815260206004820152602760248201527f4a4c656e643a3a64656c656761746542795369673a20696e76616c6964207369604482015266676e617475726560c81b60648201526084016106a0565b6001600160a01b0381166000908152600560205260408120805491610ba98361160b565b919050558914610c075760405162461bcd60e51b815260206004820152602360248201527f4a4c656e643a3a64656c656761746542795369673a20696e76616c6964206e6f6044820152626e636560e81b60648201526084016106a0565b87421115610c675760405162461bcd60e51b815260206004820152602760248201527f4a4c656e643a3a64656c656761746542795369673a207369676e617475726520604482015266195e1c1a5c995960ca1b60648201526084016106a0565b610c71818b610f48565b505050505b505050505050565b600081600160601b8410610ca55760405162461bcd60e51b81526004016106a091906113e2565b509192915050565b6000836001600160601b0316836001600160601b031611158290610ce45760405162461bcd60e51b81526004016106a091906113e2565b50610cef8385611624565b949350505050565b6001600160a01b038316610d735760405162461bcd60e51b815260206004820152603d60248201527f4a4c656e643a3a5f7472616e73666572546f6b656e733a2063616e6e6f74207460448201527f72616e736665722066726f6d20746865207a65726f206164647265737300000060648201526084016106a0565b6001600160a01b038216610def5760405162461bcd60e51b815260206004820152603b60248201527f4a4c656e643a3a5f7472616e73666572546f6b656e733a2063616e6e6f74207460448201527f72616e7366657220746f20746865207a65726f2061646472657373000000000060648201526084016106a0565b6001600160a01b038316600090815260016020908152604091829020548251606081019093526037808452610e3a936001600160601b0390921692859291906117c490830139610cad565b6001600160a01b03848116600090815260016020908152604080832080546001600160601b0319166001600160601b03968716179055928616825290829020548251606081019093526031808452610ea2949190911692859290919061174290830139610fd2565b6001600160a01b0383811660008181526001602090815260409182902080546001600160601b0319166001600160601b03968716179055905193851684529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36001600160a01b03808416600090815260026020526040808220548584168352912054610f439291821691168361101f565b505050565b6001600160a01b03808316600081815260026020818152604080842080546001845282862054949093528787166001600160a01b031984168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610fcc82848361101f565b50505050565b600080610fdf8486611644565b9050846001600160601b0316816001600160601b0316101583906110165760405162461bcd60e51b81526004016106a091906113e2565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561104a57506000816001600160601b0316115b15610f43576001600160a01b0383161561110f576001600160a01b03831660009081526004602052604081205463ffffffff16908161108a5760006110d6565b6001600160a01b0385166000908152600360205260408120906110ae6001856115b6565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b905060006110fd828560405180606001604052806029815260200161179b60299139610cad565b905061110b868484846111c7565b5050505b6001600160a01b03821615610f43576001600160a01b03821660009081526004602052604081205463ffffffff16908161114a576000611196565b6001600160a01b03841660009081526003602052604081209061116e6001856115b6565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b905060006111bd828560405180606001604052806028815260200161177360289139610fd2565b9050610c76858484845b60006111eb436040518060600160405280603581526020016116a9603591396113bf565b905060008463ffffffff1611801561124557506001600160a01b038516600090815260036020526040812063ffffffff8316916112296001886115b6565b63ffffffff908116825260208201929092526040016000205416145b156112b9576001600160a01b0385166000908152600360205260408120839161126f6001886115b6565b63ffffffff168152602081019190915260400160002080546001600160601b0392909216600160201b026fffffffffffffffffffffffff000000001990921691909117905561136a565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000908152600382528681208b8616825290915294909420925183549451909116600160201b026fffffffffffffffffffffffffffffffff19909416911617919091179055611339846001611664565b6001600160a01b0386166000908152600460205260409020805463ffffffff191663ffffffff929092169190911790555b604080516001600160601b038086168252841660208201526001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a25050505050565b600081600160201b8410610ca55760405162461bcd60e51b81526004016106a091905b600060208083528351808285015260005b8181101561140f578581018301518582016040015282016113f3565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461144757600080fd5b919050565b6000806040838503121561145f57600080fd5b61146883611430565b946020939093013593505050565b60008060006060848603121561148b57600080fd5b61149484611430565b92506114a260208501611430565b9150604084013590509250925092565b6000602082840312156114c457600080fd5b61098582611430565b60008060008060008060c087890312156114e657600080fd5b6114ef87611430565b95506020870135945060408701359350606087013560ff8116811461151357600080fd5b9598949750929560808101359460a0909101359350915050565b6000806040838503121561154057600080fd5b61154983611430565b915061155760208401611430565b90509250929050565b6000806040838503121561157357600080fd5b61157c83611430565b9150602083013563ffffffff8116811461159557600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b63ffffffff8281168282160390808211156115d3576115d36115a0565b5092915050565b600063ffffffff808416806115ff57634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006001820161161d5761161d6115a0565b5060010190565b6001600160601b038281168282160390808211156115d3576115d36115a0565b6001600160601b038181168382160190808211156115d3576115d36115a0565b63ffffffff8181168382160190808211156115d3576115d36115a056fe4a4c656e643a3a7472616e736665723a20616d6f756e74206578636565647320393620626974734a4c656e643a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d626572206578636565647320333220626974734a4c656e643a3a617070726f76653a20616d6f756e74206578636565647320393620626974734a4c656e643a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e63654a4c656e643a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f77734a4c656e643a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f77734a4c656e643a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f77734a4c656e643a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365a2646970667358221220f6e4734eddcc473a76863e11dfe57373e8bfa4ab8b527728edc6e87278b80ad464736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806370a08231116100ad578063b4b5ea5711610071578063b4b5ea5714610342578063c3cda52014610355578063dd62ed3e14610368578063e7a324dc146103a8578063f1127ed8146103cf57600080fd5b806370a082311461028e578063782d6fe1146102c05780637ecebe00146102eb57806395d89b411461030b578063a9059cbb1461032f57600080fd5b806323b872dd116100f457806323b872dd146101d0578063313ce567146101e3578063587cde1e146101fd5780635c19a95c1461023e5780636fcfff451461025357600080fd5b806306fdde0314610126578063095ea7b31461016657806318160ddd1461018957806320606b70146101a9575b600080fd5b6101506040518060400160405280600b81526020016a252622a722102a37b5b2b760a91b81525081565b60405161015d91906113e2565b60405180910390f35b61017961017436600461144c565b610436565b604051901515815260200161015d565b61019b6a084595161401484a00000081565b60405190815260200161015d565b61019b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6101796101de366004611476565b6104f4565b6101eb601281565b60405160ff909116815260200161015d565b61022661020b3660046114b2565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161015d565b61025161024c3660046114b2565b610635565b005b6102796102613660046114b2565b60046020526000908152604090205463ffffffff1681565b60405163ffffffff909116815260200161015d565b61019b61029c3660046114b2565b6001600160a01b03166000908152600160205260409020546001600160601b031690565b6102d36102ce36600461144c565b610642565b6040516001600160601b03909116815260200161015d565b61019b6102f93660046114b2565b60056020526000908152604090205481565b61015060405180604001604052806005815260200164129311539160da1b81525081565b61017961033d36600461144c565b6108d2565b6102d36103503660046114b2565b61090e565b6102516103633660046114cd565b61098c565b61019b61037636600461152d565b6001600160a01b039182166000908152602081815260408083209390941682529190915220546001600160601b031690565b61019b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b6104126103dd366004611560565b600360209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6040805163ffffffff90931683526001600160601b0390911660208301520161015d565b600080600019830361045057506001600160601b03610475565b610472836040518060600160405280602681526020016116de60269139610c7e565b90505b336000818152602081815260408083206001600160a01b0389168085529083529281902080546001600160601b0319166001600160601b03871690811790915590519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a360019150505b92915050565b6001600160a01b0383166000908152602081815260408083203380855290835281842054825160608101909352602680845291936001600160601b0390911692859261054a92889291906116de90830139610c7e565b9050866001600160a01b0316836001600160a01b03161415801561057757506001600160601b0382811614155b1561061d5760006105a183836040518060600160405280603e8152602001611704603e9139610cad565b6001600160a01b03898116600081815260208181526040808320948a168084529482529182902080546001600160601b0319166001600160601b0387169081179091559151918252939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610628878783610cf7565b5060019695505050505050565b61063f3382610f48565b50565b60004382106106a95760405162461bcd60e51b815260206004820152602860248201527f4a4c656e643a3a6765745072696f72566f7465733a206e6f74207965742064656044820152671d195c9b5a5b995960c21b60648201526084015b60405180910390fd5b6001600160a01b03831660009081526004602052604081205463ffffffff16908190036106da5760009150506104ee565b6001600160a01b038416600090815260036020526040812084916106ff6001856115b6565b63ffffffff90811682526020820192909252604001600020541611610772576001600160a01b0384166000908152600360205260408120906107426001846115b6565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b031691506104ee9050565b6001600160a01b038416600090815260036020908152604080832083805290915290205463ffffffff168310156107ad5760009150506104ee565b6000806107bb6001846115b6565b90505b8163ffffffff168163ffffffff16111561088d57600060026107e084846115b6565b6107ea91906115da565b6107f490836115b6565b6001600160a01b038816600090815260036020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b031691810191909152919250879003610861576020015194506104ee9350505050565b805163ffffffff1687111561087857819350610886565b6108836001836115b6565b92505b50506107be565b506001600160a01b038516600090815260036020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b6000806108f78360405180606001604052806027815260200161168260279139610c7e565b9050610904338583610cf7565b5060019392505050565b6001600160a01b03811660009081526004602052604081205463ffffffff1680610939576000610985565b6001600160a01b03831660009081526003602052604081209061095d6001846115b6565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b9392505050565b604080518082018252600b81526a252622a722102a37b5b2b760a91b60209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527f0164509d5bf8666fbf95f6f5e89dc4764ae12030efca1759159eae4d971e001481840152466060820152306080808301919091528351808303909101815260a0820184528051908301207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08301526001600160a01b038a1660e083015261010082018990526101208083018990528451808403909101815261014083019094528351939092019290922061190160f01b6101608401526101628301829052610182830181905290916000906101a20160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015610b12573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610b855760405162461bcd60e51b815260206004820152602760248201527f4a4c656e643a3a64656c656761746542795369673a20696e76616c6964207369604482015266676e617475726560c81b60648201526084016106a0565b6001600160a01b0381166000908152600560205260408120805491610ba98361160b565b919050558914610c075760405162461bcd60e51b815260206004820152602360248201527f4a4c656e643a3a64656c656761746542795369673a20696e76616c6964206e6f6044820152626e636560e81b60648201526084016106a0565b87421115610c675760405162461bcd60e51b815260206004820152602760248201527f4a4c656e643a3a64656c656761746542795369673a207369676e617475726520604482015266195e1c1a5c995960ca1b60648201526084016106a0565b610c71818b610f48565b505050505b505050505050565b600081600160601b8410610ca55760405162461bcd60e51b81526004016106a091906113e2565b509192915050565b6000836001600160601b0316836001600160601b031611158290610ce45760405162461bcd60e51b81526004016106a091906113e2565b50610cef8385611624565b949350505050565b6001600160a01b038316610d735760405162461bcd60e51b815260206004820152603d60248201527f4a4c656e643a3a5f7472616e73666572546f6b656e733a2063616e6e6f74207460448201527f72616e736665722066726f6d20746865207a65726f206164647265737300000060648201526084016106a0565b6001600160a01b038216610def5760405162461bcd60e51b815260206004820152603b60248201527f4a4c656e643a3a5f7472616e73666572546f6b656e733a2063616e6e6f74207460448201527f72616e7366657220746f20746865207a65726f2061646472657373000000000060648201526084016106a0565b6001600160a01b038316600090815260016020908152604091829020548251606081019093526037808452610e3a936001600160601b0390921692859291906117c490830139610cad565b6001600160a01b03848116600090815260016020908152604080832080546001600160601b0319166001600160601b03968716179055928616825290829020548251606081019093526031808452610ea2949190911692859290919061174290830139610fd2565b6001600160a01b0383811660008181526001602090815260409182902080546001600160601b0319166001600160601b03968716179055905193851684529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36001600160a01b03808416600090815260026020526040808220548584168352912054610f439291821691168361101f565b505050565b6001600160a01b03808316600081815260026020818152604080842080546001845282862054949093528787166001600160a01b031984168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610fcc82848361101f565b50505050565b600080610fdf8486611644565b9050846001600160601b0316816001600160601b0316101583906110165760405162461bcd60e51b81526004016106a091906113e2565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561104a57506000816001600160601b0316115b15610f43576001600160a01b0383161561110f576001600160a01b03831660009081526004602052604081205463ffffffff16908161108a5760006110d6565b6001600160a01b0385166000908152600360205260408120906110ae6001856115b6565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b905060006110fd828560405180606001604052806029815260200161179b60299139610cad565b905061110b868484846111c7565b5050505b6001600160a01b03821615610f43576001600160a01b03821660009081526004602052604081205463ffffffff16908161114a576000611196565b6001600160a01b03841660009081526003602052604081209061116e6001856115b6565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b905060006111bd828560405180606001604052806028815260200161177360289139610fd2565b9050610c76858484845b60006111eb436040518060600160405280603581526020016116a9603591396113bf565b905060008463ffffffff1611801561124557506001600160a01b038516600090815260036020526040812063ffffffff8316916112296001886115b6565b63ffffffff908116825260208201929092526040016000205416145b156112b9576001600160a01b0385166000908152600360205260408120839161126f6001886115b6565b63ffffffff168152602081019190915260400160002080546001600160601b0392909216600160201b026fffffffffffffffffffffffff000000001990921691909117905561136a565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000908152600382528681208b8616825290915294909420925183549451909116600160201b026fffffffffffffffffffffffffffffffff19909416911617919091179055611339846001611664565b6001600160a01b0386166000908152600460205260409020805463ffffffff191663ffffffff929092169190911790555b604080516001600160601b038086168252841660208201526001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a25050505050565b600081600160201b8410610ca55760405162461bcd60e51b81526004016106a091905b600060208083528351808285015260005b8181101561140f578581018301518582016040015282016113f3565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461144757600080fd5b919050565b6000806040838503121561145f57600080fd5b61146883611430565b946020939093013593505050565b60008060006060848603121561148b57600080fd5b61149484611430565b92506114a260208501611430565b9150604084013590509250925092565b6000602082840312156114c457600080fd5b61098582611430565b60008060008060008060c087890312156114e657600080fd5b6114ef87611430565b95506020870135945060408701359350606087013560ff8116811461151357600080fd5b9598949750929560808101359460a0909101359350915050565b6000806040838503121561154057600080fd5b61154983611430565b915061155760208401611430565b90509250929050565b6000806040838503121561157357600080fd5b61157c83611430565b9150602083013563ffffffff8116811461159557600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b63ffffffff8281168282160390808211156115d3576115d36115a0565b5092915050565b600063ffffffff808416806115ff57634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006001820161161d5761161d6115a0565b5060010190565b6001600160601b038281168282160390808211156115d3576115d36115a0565b6001600160601b038181168382160190808211156115d3576115d36115a0565b63ffffffff8181168382160190808211156115d3576115d36115a056fe4a4c656e643a3a7472616e736665723a20616d6f756e74206578636565647320393620626974734a4c656e643a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d626572206578636565647320333220626974734a4c656e643a3a617070726f76653a20616d6f756e74206578636565647320393620626974734a4c656e643a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e63654a4c656e643a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f77734a4c656e643a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f77734a4c656e643a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f77734a4c656e643a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365a2646970667358221220f6e4734eddcc473a76863e11dfe57373e8bfa4ab8b527728edc6e87278b80ad464736f6c63430008140033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "params": {
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "constructor": {
        "params": {
          "account": "The initial account to grant all the tokens"
        }
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "The standard EIP-20 approval event"
      },
      "DelegateChanged(address,address,address)": {
        "notice": "An event thats emitted when an account changes its delegate"
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "notice": "An event thats emitted when a delegate account's vote balance changes"
      },
      "Transfer(address,address,uint256)": {
        "notice": "The standard EIP-20 transfer event"
      }
    },
    "kind": "user",
    "methods": {
      "DELEGATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the delegation struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkpoints(address,uint32)": {
        "notice": "A record of votes checkpoints for each account, by index"
      },
      "constructor": {
        "notice": "Construct a new JLend token"
      },
      "decimals()": {
        "notice": "EIP-20 token decimals for this token"
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`"
      },
      "delegates(address)": {
        "notice": "A record of each accounts delegate"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "name()": {
        "notice": "EIP-20 token name for this token"
      },
      "nonces(address)": {
        "notice": "A record of states for signing / validating signatures"
      },
      "numCheckpoints(address)": {
        "notice": "The number of checkpoints for each account"
      },
      "symbol()": {
        "notice": "EIP-20 token symbol for this token"
      },
      "totalSupply()": {
        "notice": "Total number of tokens in circulation"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15427,
        "contract": "contracts/Governance/JLEND.sol:JLEND",
        "label": "allowances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint96))"
      },
      {
        "astId": 15432,
        "contract": "contracts/Governance/JLEND.sol:JLEND",
        "label": "balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint96)"
      },
      {
        "astId": 15437,
        "contract": "contracts/Governance/JLEND.sol:JLEND",
        "label": "delegates",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 15451,
        "contract": "contracts/Governance/JLEND.sol:JLEND",
        "label": "checkpoints",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)15443_storage))"
      },
      {
        "astId": 15456,
        "contract": "contracts/Governance/JLEND.sol:JLEND",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 15473,
        "contract": "contracts/Governance/JLEND.sol:JLEND",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint96))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint96))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint96)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)15443_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct JLEND.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)15443_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_address,t_uint96)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)15443_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct JLEND.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)15443_storage"
      },
      "t_struct(Checkpoint)15443_storage": {
        "encoding": "inplace",
        "label": "struct JLEND.Checkpoint",
        "members": [
          {
            "astId": 15440,
            "contract": "contracts/Governance/JLEND.sol:JLEND",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 15442,
            "contract": "contracts/Governance/JLEND.sol:JLEND",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}