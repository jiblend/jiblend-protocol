{
  "address": "0xca929F69826dE364BCd81AC9B5A48d997093BEa1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ComptrollerLensInterface",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLimits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract JToken[]",
              "name": "markets",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shortfall",
              "type": "uint256"
            }
          ],
          "internalType": "struct JLendLens.AccountLimits",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract GovernorBravoInterface",
          "name": "governor",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "proposalIds",
          "type": "uint256[]"
        }
      ],
      "name": "getGovBravoProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "eta",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "string[]",
              "name": "signatures",
              "type": "string[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "forVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "againstVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "abstainVotes",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "canceled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct JLendLens.GovBravoProposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract GovernorBravoInterface",
          "name": "governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "proposalIds",
          "type": "uint256[]"
        }
      ],
      "name": "getGovBravoReceipts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "support",
              "type": "uint8"
            },
            {
              "internalType": "uint96",
              "name": "votes",
              "type": "uint96"
            }
          ],
          "internalType": "struct JLendLens.GovBravoReceipt[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract GovernorAlpha",
          "name": "governor",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "proposalIds",
          "type": "uint256[]"
        }
      ],
      "name": "getGovProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "eta",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "string[]",
              "name": "signatures",
              "type": "string[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "forVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "againstVotes",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "canceled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct JLendLens.GovProposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract GovernorAlpha",
          "name": "governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "proposalIds",
          "type": "uint256[]"
        }
      ],
      "name": "getGovReceipts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "support",
              "type": "bool"
            },
            {
              "internalType": "uint96",
              "name": "votes",
              "type": "uint96"
            }
          ],
          "internalType": "struct JLendLens.GovReceipt[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JLEND",
          "name": "jLend",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getJLendBalanceMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct JLendLens.JLendBalanceMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JLEND",
          "name": "jLend",
          "type": "address"
        },
        {
          "internalType": "contract ComptrollerLensInterface",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getJLendBalanceMetadataExt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allocated",
              "type": "uint256"
            }
          ],
          "internalType": "struct JLendLens.JLendBalanceMetadataExt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JLEND",
          "name": "jLend",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "blockNumbers",
          "type": "uint32[]"
        }
      ],
      "name": "getJLendVotes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            }
          ],
          "internalType": "struct JLendLens.JLendVotes[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "jTokenBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "jToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowBalanceCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOfUnderlying",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAllowance",
              "type": "uint256"
            }
          ],
          "internalType": "struct JLendLens.JTokenBalances",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JToken[]",
          "name": "jTokens",
          "type": "address[]"
        },
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "jTokenBalancesAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "jToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowBalanceCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOfUnderlying",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAllowance",
              "type": "uint256"
            }
          ],
          "internalType": "struct JLendLens.JTokenBalances[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        }
      ],
      "name": "jTokenMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "jToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "exchangeRateCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCash",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAssetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "jTokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jLendSupplySpeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jLendBorrowSpeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct JLendLens.JTokenMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JToken[]",
          "name": "jTokens",
          "type": "address[]"
        }
      ],
      "name": "jTokenMetadataAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "jToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "exchangeRateCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCash",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAssetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "jTokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jLendSupplySpeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jLendBorrowSpeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct JLendLens.JTokenMetadata[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JToken",
          "name": "jToken",
          "type": "address"
        }
      ],
      "name": "jTokenUnderlyingPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "jToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "underlyingPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct JLendLens.JTokenUnderlyingPrice",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract JToken[]",
          "name": "jTokens",
          "type": "address[]"
        }
      ],
      "name": "jTokenUnderlyingPriceAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "jToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "underlyingPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct JLendLens.JTokenUnderlyingPrice[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x68d3e59e60bf6d631eb8bdac116fb3c642e743dc4224480c8373d782bd46341f",
  "receipt": {
    "to": null,
    "from": "0x57a37B57b4809582E8E52Cc4602cb70143f3d76e",
    "contractAddress": "0xca929F69826dE364BCd81AC9B5A48d997093BEa1",
    "transactionIndex": 2,
    "gasUsed": "3262067",
    "logsBloom": "0x
    "blockHash": "0x14583f89e7c64b0df3376f1beef130183592ead9bfdcd14bfe21a5a51956c360",
    "transactionHash": "0x68d3e59e60bf6d631eb8bdac116fb3c642e743dc4224480c8373d782bd46341f",
    "logs": [],
    "blockNumber": 2460689,
    "cumulativeGasUsed": "3394896",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cac86029a31a1be5a662eb0d1a16a703",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"contract JToken[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortfall\",\"type\":\"uint256\"}],\"internalType\":\"struct JLendLens.AccountLimits\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract GovernorBravoInterface\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"proposalIds\",\"type\":\"uint256[]\"}],\"name\":\"getGovBravoProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct JLendLens.GovBravoProposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract GovernorBravoInterface\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"proposalIds\",\"type\":\"uint256[]\"}],\"name\":\"getGovBravoReceipts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct JLendLens.GovBravoReceipt[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract GovernorAlpha\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"proposalIds\",\"type\":\"uint256[]\"}],\"name\":\"getGovProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct JLendLens.GovProposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract GovernorAlpha\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"proposalIds\",\"type\":\"uint256[]\"}],\"name\":\"getGovReceipts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct JLendLens.GovReceipt[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JLEND\",\"name\":\"jLend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getJLendBalanceMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct JLendLens.JLendBalanceMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JLEND\",\"name\":\"jLend\",\"type\":\"address\"},{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getJLendBalanceMetadataExt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocated\",\"type\":\"uint256\"}],\"internalType\":\"struct JLendLens.JLendBalanceMetadataExt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JLEND\",\"name\":\"jLend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"blockNumbers\",\"type\":\"uint32[]\"}],\"name\":\"getJLendVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"internalType\":\"struct JLendLens.JLendVotes[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"jTokenBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct JLendLens.JTokenBalances\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JToken[]\",\"name\":\"jTokens\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"jTokenBalancesAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct JLendLens.JTokenBalances[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"}],\"name\":\"jTokenMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jLendSupplySpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jLendBorrowSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"}],\"internalType\":\"struct JLendLens.JTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JToken[]\",\"name\":\"jTokens\",\"type\":\"address[]\"}],\"name\":\"jTokenMetadataAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jLendSupplySpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jLendBorrowSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"}],\"internalType\":\"struct JLendLens.JTokenMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JToken\",\"name\":\"jToken\",\"type\":\"address\"}],\"name\":\"jTokenUnderlyingPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct JLendLens.JTokenUnderlyingPrice\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract JToken[]\",\"name\":\"jTokens\",\"type\":\"address[]\"}],\"name\":\"jTokenUnderlyingPriceAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"jToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct JLendLens.JTokenUnderlyingPrice[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lens/JLendLens.sol\":\"JLendLens\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nabstract contract ComptrollerInterface {\\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\\n  bool public constant isComptroller = true;\\n\\n  /*** Assets You Are In ***/\\n\\n  function enterMarkets(address[] calldata jTokens) external virtual returns (uint[] memory);\\n\\n  function exitMarket(address jToken) external virtual returns (uint);\\n\\n  /*** Policy Hooks ***/\\n\\n  function mintAllowed(address jToken, address minter, uint mintAmount) external virtual returns (uint);\\n\\n  function mintVerify(address jToken, address minter, uint mintAmount, uint mintTokens) external virtual;\\n\\n  function redeemAllowed(address jToken, address redeemer, uint redeemTokens) external virtual returns (uint);\\n\\n  function redeemVerify(\\n    address jToken,\\n    address redeemer,\\n    uint redeemAmount,\\n    uint redeemTokens\\n  ) external virtual;\\n\\n  function borrowAllowed(address jToken, address borrower, uint borrowAmount) external virtual returns (uint);\\n\\n  function borrowVerify(address jToken, address borrower, uint borrowAmount) external virtual;\\n\\n  function repayBorrowAllowed(\\n    address jToken,\\n    address payer,\\n    address borrower,\\n    uint repayAmount\\n  ) external virtual returns (uint);\\n\\n  function repayBorrowVerify(\\n    address jToken,\\n    address payer,\\n    address borrower,\\n    uint repayAmount,\\n    uint borrowerIndex\\n  ) external virtual;\\n\\n  function liquidateBorrowAllowed(\\n    address jTokenBorrowed,\\n    address jTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint repayAmount\\n  ) external virtual returns (uint);\\n\\n  function liquidateBorrowVerify(\\n    address jTokenBorrowed,\\n    address jTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint repayAmount,\\n    uint seizeTokens\\n  ) external virtual;\\n\\n  function seizeAllowed(\\n    address jTokenCollateral,\\n    address jTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint seizeTokens\\n  ) external virtual returns (uint);\\n\\n  function seizeVerify(\\n    address jTokenCollateral,\\n    address jTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint seizeTokens\\n  ) external virtual;\\n\\n  function transferAllowed(\\n    address jToken,\\n    address src,\\n    address dst,\\n    uint transferTokens\\n  ) external virtual returns (uint);\\n\\n  function transferVerify(address jToken, address src, address dst, uint transferTokens) external virtual;\\n\\n  /*** Liquidity/Liquidation Calculations ***/\\n\\n  function liquidateCalculateSeizeTokens(\\n    address jTokenBorrowed,\\n    address jTokenCollateral,\\n    uint repayAmount\\n  ) external view virtual returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xd7a6263c7699e9931f48359a761a6885b618eb69a6bddee7abad0f2370583dfb\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return success Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xf44fc7783d4a0060119f0096a122c3f305c7a03da75aa21408393d8d7a2e649b\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return success Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x5ce25bb36a4ec9490617567a24b55bc813e943bcd4411e060afffe122bea0416\",\"license\":\"BSD-3-Clause\"},\"contracts/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    uint public constant NO_ERROR = 0; // support legacy return codes\\n\\n    error TransferComptrollerRejection(uint256 errorCode);\\n    error TransferNotAllowed();\\n    error TransferNotEnough();\\n    error TransferTooMuch();\\n\\n    error MintComptrollerRejection(uint256 errorCode);\\n    error MintFreshnessCheck();\\n\\n    error RedeemComptrollerRejection(uint256 errorCode);\\n    error RedeemFreshnessCheck();\\n    error RedeemTransferOutNotPossible();\\n\\n    error BorrowComptrollerRejection(uint256 errorCode);\\n    error BorrowFreshnessCheck();\\n    error BorrowCashNotAvailable();\\n\\n    error RepayBorrowComptrollerRejection(uint256 errorCode);\\n    error RepayBorrowFreshnessCheck();\\n\\n    error LiquidateComptrollerRejection(uint256 errorCode);\\n    error LiquidateFreshnessCheck();\\n    error LiquidateCollateralFreshnessCheck();\\n    error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\\n    error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\\n    error LiquidateLiquidatorIsBorrower();\\n    error LiquidateCloseAmountIsZero();\\n    error LiquidateCloseAmountIsUintMax();\\n    error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\\n\\n    error LiquidateSeizeComptrollerRejection(uint256 errorCode);\\n    error LiquidateSeizeLiquidatorIsBorrower();\\n\\n    error AcceptAdminPendingAdminCheck();\\n\\n    error SetComptrollerOwnerCheck();\\n    error SetPendingAdminOwnerCheck();\\n\\n    error SetReserveFactorAdminCheck();\\n    error SetReserveFactorFreshCheck();\\n    error SetReserveFactorBoundsCheck();\\n\\n    error AddReservesFactorFreshCheck(uint256 actualAddAmount);\\n\\n    error ReduceReservesAdminCheck();\\n    error ReduceReservesFreshCheck();\\n    error ReduceReservesCashNotAvailable();\\n    error ReduceReservesCashValidation();\\n\\n    error SetInterestRateModelOwnerCheck();\\n    error SetInterestRateModelFreshCheck();\\n}\\n\",\"keccak256\":\"0xc565694807fce4d9eb218b77d2e7eb7665e0d6950cbfa9edd1e3c09e417b809c\",\"license\":\"BSD-3-Clause\"},\"contracts/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author JLEND\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n  uint constant expScale = 1e18;\\n  uint constant doubleScale = 1e36;\\n  uint constant halfExpScale = expScale / 2;\\n  uint constant mantissaOne = expScale;\\n\\n  struct Exp {\\n    uint mantissa;\\n  }\\n\\n  struct Double {\\n    uint mantissa;\\n  }\\n\\n  /**\\n   * @dev Truncates the given exp to a whole number value.\\n   *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n   */\\n  function truncate(Exp memory exp) internal pure returns (uint) {\\n    // Note: We are not using careful math here as we're performing a division that cannot fail\\n    return exp.mantissa / expScale;\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n   */\\n  function mul_ScalarTruncate(Exp memory a, uint scalar) internal pure returns (uint) {\\n    Exp memory product = mul_(a, scalar);\\n    return truncate(product);\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n   */\\n  function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (uint) {\\n    Exp memory product = mul_(a, scalar);\\n    return add_(truncate(product), addend);\\n  }\\n\\n  /**\\n   * @dev Checks if first Exp is less than second Exp.\\n   */\\n  function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa < right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp <= right Exp.\\n   */\\n  function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa <= right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp > right Exp.\\n   */\\n  function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa > right.mantissa;\\n  }\\n\\n  /**\\n   * @dev returns true if Exp is exactly zero\\n   */\\n  function isZeroExp(Exp memory value) internal pure returns (bool) {\\n    return value.mantissa == 0;\\n  }\\n\\n  function safe224(uint n, string memory errorMessage) internal pure returns (uint224) {\\n    require(n < 2 ** 224, errorMessage);\\n    return uint224(n);\\n  }\\n\\n  function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2 ** 32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n  }\\n\\n  function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n  }\\n\\n  function add_(uint a, uint b) internal pure returns (uint) {\\n    return a + b;\\n  }\\n\\n  function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n  }\\n\\n  function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n  }\\n\\n  function sub_(uint a, uint b) internal pure returns (uint) {\\n    return a - b;\\n  }\\n\\n  function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n  }\\n\\n  function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: mul_(a.mantissa, b)});\\n  }\\n\\n  function mul_(uint a, Exp memory b) internal pure returns (uint) {\\n    return mul_(a, b.mantissa) / expScale;\\n  }\\n\\n  function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n  }\\n\\n  function mul_(Double memory a, uint b) internal pure returns (Double memory) {\\n    return Double({mantissa: mul_(a.mantissa, b)});\\n  }\\n\\n  function mul_(uint a, Double memory b) internal pure returns (uint) {\\n    return mul_(a, b.mantissa) / doubleScale;\\n  }\\n\\n  function mul_(uint a, uint b) internal pure returns (uint) {\\n    return a * b;\\n  }\\n\\n  function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n  }\\n\\n  function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: div_(a.mantissa, b)});\\n  }\\n\\n  function div_(uint a, Exp memory b) internal pure returns (uint) {\\n    return div_(mul_(a, expScale), b.mantissa);\\n  }\\n\\n  function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n  }\\n\\n  function div_(Double memory a, uint b) internal pure returns (Double memory) {\\n    return Double({mantissa: div_(a.mantissa, b)});\\n  }\\n\\n  function div_(uint a, Double memory b) internal pure returns (uint) {\\n    return div_(mul_(a, doubleScale), b.mantissa);\\n  }\\n\\n  function div_(uint a, uint b) internal pure returns (uint) {\\n    return a / b;\\n  }\\n\\n  function fraction(uint a, uint b) internal pure returns (Double memory) {\\n    return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n  }\\n}\\n\",\"keccak256\":\"0xc2ea5f95930e34e53eb465cb0c71df10b4dddca68eeb85f80ce0ce38efdd918b\",\"license\":\"BSD-3-Clause\"},\"contracts/Governance/GovernorAlpha.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract GovernorAlpha {\\n  /// @notice The name of this contract\\n  string public constant name = \\\"JLEND Governor Alpha\\\";\\n\\n  /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\\n  function quorumVotes() public pure returns (uint) {\\n    return 400000e18;\\n  } // 400,000 = 4% of JLEND\\n\\n  /// @notice The number of votes required in order for a voter to become a proposer\\n  function proposalThreshold() public pure returns (uint) {\\n    return 100000e18;\\n  } // 100,000 = 1% of JLEND\\n\\n  /// @notice The maximum number of actions that can be included in a proposal\\n  function proposalMaxOperations() public pure returns (uint) {\\n    return 10;\\n  } // 10 actions\\n\\n  /// @notice The delay before voting on a proposal may take place, once proposed\\n  function votingDelay() public pure returns (uint) {\\n    return 1;\\n  } // 1 block\\n\\n  /// @notice The duration of voting on a proposal, in blocks\\n  function votingPeriod() public pure virtual returns (uint) {\\n    return 17280;\\n  } // ~3 days in blocks (assuming 15s blocks)\\n\\n  /// @notice The address of the JLEND Protocol Timelock\\n  TimelockInterface public timelock;\\n\\n  /// @notice The address of the JLEND governance token\\n  JLendInterface public jLend;\\n\\n  /// @notice The address of the Governor Guardian\\n  address public guardian;\\n\\n  /// @notice The total number of proposals\\n  uint public proposalCount;\\n\\n  struct Proposal {\\n    /// @notice Unique id for looking up a proposal\\n    uint id;\\n    /// @notice Creator of the proposal\\n    address proposer;\\n    /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\\n    uint eta;\\n    /// @notice the ordered list of target addresses for calls to be made\\n    address[] targets;\\n    /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n    uint[] values;\\n    /// @notice The ordered list of function signatures to be called\\n    string[] signatures;\\n    /// @notice The ordered list of calldata to be passed to each call\\n    bytes[] calldatas;\\n    /// @notice The block at which voting begins: holders must delegate their votes prior to this block\\n    uint startBlock;\\n    /// @notice The block at which voting ends: votes must be cast prior to this block\\n    uint endBlock;\\n    /// @notice Current number of votes in favor of this proposal\\n    uint forVotes;\\n    /// @notice Current number of votes in opposition to this proposal\\n    uint againstVotes;\\n    /// @notice Flag marking whether the proposal has been canceled\\n    bool canceled;\\n    /// @notice Flag marking whether the proposal has been executed\\n    bool executed;\\n    /// @notice Receipts of ballots for the entire set of voters\\n    mapping(address => Receipt) receipts;\\n  }\\n\\n  /// @notice Ballot receipt record for a voter\\n  struct Receipt {\\n    /// @notice Whether or not a vote has been cast\\n    bool hasVoted;\\n    /// @notice Whether or not the voter supports the proposal\\n    bool support;\\n    /// @notice The number of votes the voter had, which were cast\\n    uint96 votes;\\n  }\\n\\n  /// @notice Possible states that a proposal may be in\\n  enum ProposalState {\\n    Pending,\\n    Active,\\n    Canceled,\\n    Defeated,\\n    Succeeded,\\n    Queued,\\n    Expired,\\n    Executed\\n  }\\n\\n  /// @notice The official record of all proposals ever proposed\\n  mapping(uint => Proposal) public proposals;\\n\\n  /// @notice The latest proposal for each proposer\\n  mapping(address => uint) public latestProposalIds;\\n\\n  /// @notice The EIP-712 typehash for the contract's domain\\n  bytes32 public constant DOMAIN_TYPEHASH =\\n    keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n  /// @notice The EIP-712 typehash for the ballot struct used by the contract\\n  bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,bool support)\\\");\\n\\n  /// @notice An event emitted when a new proposal is created\\n  event ProposalCreated(\\n    uint id,\\n    address proposer,\\n    address[] targets,\\n    uint[] values,\\n    string[] signatures,\\n    bytes[] calldatas,\\n    uint startBlock,\\n    uint endBlock,\\n    string description\\n  );\\n\\n  /// @notice An event emitted when a vote has been cast on a proposal\\n  event VoteCast(address voter, uint proposalId, bool support, uint votes);\\n\\n  /// @notice An event emitted when a proposal has been canceled\\n  event ProposalCanceled(uint id);\\n\\n  /// @notice An event emitted when a proposal has been queued in the Timelock\\n  event ProposalQueued(uint id, uint eta);\\n\\n  /// @notice An event emitted when a proposal has been executed in the Timelock\\n  event ProposalExecuted(uint id);\\n\\n  constructor(address timelock_, address jLend_, address guardian_) public {\\n    timelock = TimelockInterface(timelock_);\\n    jLend = JLendInterface(jLend_);\\n    guardian = guardian_;\\n  }\\n\\n  function propose(\\n    address[] memory targets,\\n    uint[] memory values,\\n    string[] memory signatures,\\n    bytes[] memory calldatas,\\n    string memory description\\n  ) public returns (uint) {\\n    require(\\n      jLend.getPriorVotes(msg.sender, sub256(block.number, 1)) > proposalThreshold(),\\n      \\\"GovernorAlpha::propose: proposer votes below proposal threshold\\\"\\n    );\\n    require(\\n      targets.length == values.length &&\\n        targets.length == signatures.length &&\\n        targets.length == calldatas.length,\\n      \\\"GovernorAlpha::propose: proposal function information arity mismatch\\\"\\n    );\\n    require(targets.length != 0, \\\"GovernorAlpha::propose: must provide actions\\\");\\n    require(targets.length <= proposalMaxOperations(), \\\"GovernorAlpha::propose: too many actions\\\");\\n\\n    uint latestProposalId = latestProposalIds[msg.sender];\\n    if (latestProposalId != 0) {\\n      ProposalState proposersLatestProposalState = state(latestProposalId);\\n      require(\\n        proposersLatestProposalState != ProposalState.Active,\\n        \\\"GovernorAlpha::propose: one live proposal per proposer, found an already active proposal\\\"\\n      );\\n      require(\\n        proposersLatestProposalState != ProposalState.Pending,\\n        \\\"GovernorAlpha::propose: one live proposal per proposer, found an already pending proposal\\\"\\n      );\\n    }\\n\\n    uint startBlock = add256(block.number, votingDelay());\\n    uint endBlock = add256(startBlock, votingPeriod());\\n\\n    proposalCount++;\\n    uint proposalId = proposalCount;\\n    Proposal storage newProposal = proposals[proposalId];\\n    // This should never happen but add a check in case.\\n    require(newProposal.id == 0, \\\"GovernorAlpha::propose: ProposalID collsion\\\");\\n    newProposal.id = proposalId;\\n    newProposal.proposer = msg.sender;\\n    newProposal.eta = 0;\\n    newProposal.targets = targets;\\n    newProposal.values = values;\\n    newProposal.signatures = signatures;\\n    newProposal.calldatas = calldatas;\\n    newProposal.startBlock = startBlock;\\n    newProposal.endBlock = endBlock;\\n    newProposal.forVotes = 0;\\n    newProposal.againstVotes = 0;\\n    newProposal.canceled = false;\\n    newProposal.executed = false;\\n\\n    latestProposalIds[newProposal.proposer] = newProposal.id;\\n\\n    emit ProposalCreated(\\n      newProposal.id,\\n      msg.sender,\\n      targets,\\n      values,\\n      signatures,\\n      calldatas,\\n      startBlock,\\n      endBlock,\\n      description\\n    );\\n    return newProposal.id;\\n  }\\n\\n  function queue(uint proposalId) public {\\n    require(\\n      state(proposalId) == ProposalState.Succeeded,\\n      \\\"GovernorAlpha::queue: proposal can only be queued if it is succeeded\\\"\\n    );\\n    Proposal storage proposal = proposals[proposalId];\\n    uint eta = add256(block.timestamp, timelock.delay());\\n    for (uint i = 0; i < proposal.targets.length; i++) {\\n      _queueOrRevert(\\n        proposal.targets[i],\\n        proposal.values[i],\\n        proposal.signatures[i],\\n        proposal.calldatas[i],\\n        eta\\n      );\\n    }\\n    proposal.eta = eta;\\n    emit ProposalQueued(proposalId, eta);\\n  }\\n\\n  function _queueOrRevert(\\n    address target,\\n    uint value,\\n    string memory signature,\\n    bytes memory data,\\n    uint eta\\n  ) internal {\\n    require(\\n      !timelock.queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))),\\n      \\\"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\\\"\\n    );\\n    timelock.queueTransaction(target, value, signature, data, eta);\\n  }\\n\\n  function execute(uint proposalId) public payable {\\n    require(\\n      state(proposalId) == ProposalState.Queued,\\n      \\\"GovernorAlpha::execute: proposal can only be executed if it is queued\\\"\\n    );\\n    Proposal storage proposal = proposals[proposalId];\\n    proposal.executed = true;\\n    for (uint i = 0; i < proposal.targets.length; i++) {\\n      timelock.executeTransaction{value: proposal.values[i]}(\\n        proposal.targets[i],\\n        proposal.values[i],\\n        proposal.signatures[i],\\n        proposal.calldatas[i],\\n        proposal.eta\\n      );\\n    }\\n    emit ProposalExecuted(proposalId);\\n  }\\n\\n  function cancel(uint proposalId) public {\\n    ProposalState state = state(proposalId);\\n    require(state != ProposalState.Executed, \\\"GovernorAlpha::cancel: cannot cancel executed proposal\\\");\\n\\n    Proposal storage proposal = proposals[proposalId];\\n    require(\\n      msg.sender == guardian ||\\n        jLend.getPriorVotes(proposal.proposer, sub256(block.number, 1)) < proposalThreshold(),\\n      \\\"GovernorAlpha::cancel: proposer above threshold\\\"\\n    );\\n\\n    proposal.canceled = true;\\n    for (uint i = 0; i < proposal.targets.length; i++) {\\n      timelock.cancelTransaction(\\n        proposal.targets[i],\\n        proposal.values[i],\\n        proposal.signatures[i],\\n        proposal.calldatas[i],\\n        proposal.eta\\n      );\\n    }\\n\\n    emit ProposalCanceled(proposalId);\\n  }\\n\\n  function getActions(\\n    uint proposalId\\n  )\\n    public\\n    view\\n    returns (\\n      address[] memory targets,\\n      uint[] memory values,\\n      string[] memory signatures,\\n      bytes[] memory calldatas\\n    )\\n  {\\n    Proposal storage p = proposals[proposalId];\\n    return (p.targets, p.values, p.signatures, p.calldatas);\\n  }\\n\\n  function getReceipt(uint proposalId, address voter) public view returns (Receipt memory) {\\n    return proposals[proposalId].receipts[voter];\\n  }\\n\\n  function state(uint proposalId) public view returns (ProposalState) {\\n    require(proposalCount >= proposalId && proposalId > 0, \\\"GovernorAlpha::state: invalid proposal id\\\");\\n    Proposal storage proposal = proposals[proposalId];\\n    if (proposal.canceled) {\\n      return ProposalState.Canceled;\\n    } else if (block.number <= proposal.startBlock) {\\n      return ProposalState.Pending;\\n    } else if (block.number <= proposal.endBlock) {\\n      return ProposalState.Active;\\n    } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes()) {\\n      return ProposalState.Defeated;\\n    } else if (proposal.eta == 0) {\\n      return ProposalState.Succeeded;\\n    } else if (proposal.executed) {\\n      return ProposalState.Executed;\\n    } else if (block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())) {\\n      return ProposalState.Expired;\\n    } else {\\n      return ProposalState.Queued;\\n    }\\n  }\\n\\n  function castVote(uint proposalId, bool support) public {\\n    return _castVote(msg.sender, proposalId, support);\\n  }\\n\\n  function castVoteBySig(uint proposalId, bool support, uint8 v, bytes32 r, bytes32 s) public {\\n    bytes32 domainSeparator = keccak256(\\n      abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))\\n    );\\n    bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), \\\"GovernorAlpha::castVoteBySig: invalid signature\\\");\\n    return _castVote(signatory, proposalId, support);\\n  }\\n\\n  function _castVote(address voter, uint proposalId, bool support) internal {\\n    require(state(proposalId) == ProposalState.Active, \\\"GovernorAlpha::_castVote: voting is closed\\\");\\n    Proposal storage proposal = proposals[proposalId];\\n    Receipt storage receipt = proposal.receipts[voter];\\n    require(receipt.hasVoted == false, \\\"GovernorAlpha::_castVote: voter already voted\\\");\\n    uint96 votes = jLend.getPriorVotes(voter, proposal.startBlock);\\n\\n    if (support) {\\n      proposal.forVotes = add256(proposal.forVotes, votes);\\n    } else {\\n      proposal.againstVotes = add256(proposal.againstVotes, votes);\\n    }\\n\\n    receipt.hasVoted = true;\\n    receipt.support = support;\\n    receipt.votes = votes;\\n\\n    emit VoteCast(voter, proposalId, support, votes);\\n  }\\n\\n  function __acceptAdmin() public {\\n    require(msg.sender == guardian, \\\"GovernorAlpha::__acceptAdmin: sender must be gov guardian\\\");\\n    timelock.acceptAdmin();\\n  }\\n\\n  function __abdicate() public {\\n    require(msg.sender == guardian, \\\"GovernorAlpha::__abdicate: sender must be gov guardian\\\");\\n    guardian = address(0);\\n  }\\n\\n  function __queueSetTimelockPendingAdmin(address newPendingAdmin, uint eta) public {\\n    require(\\n      msg.sender == guardian,\\n      \\\"GovernorAlpha::__queueSetTimelockPendingAdmin: sender must be gov guardian\\\"\\n    );\\n    timelock.queueTransaction(\\n      address(timelock),\\n      0,\\n      \\\"setPendingAdmin(address)\\\",\\n      abi.encode(newPendingAdmin),\\n      eta\\n    );\\n  }\\n\\n  function __executeSetTimelockPendingAdmin(address newPendingAdmin, uint eta) public {\\n    require(\\n      msg.sender == guardian,\\n      \\\"GovernorAlpha::__executeSetTimelockPendingAdmin: sender must be gov guardian\\\"\\n    );\\n    timelock.executeTransaction(\\n      address(timelock),\\n      0,\\n      \\\"setPendingAdmin(address)\\\",\\n      abi.encode(newPendingAdmin),\\n      eta\\n    );\\n  }\\n\\n  function add256(uint256 a, uint256 b) internal pure returns (uint) {\\n    uint c = a + b;\\n    require(c >= a, \\\"addition overflow\\\");\\n    return c;\\n  }\\n\\n  function sub256(uint256 a, uint256 b) internal pure returns (uint) {\\n    require(b <= a, \\\"subtraction underflow\\\");\\n    return a - b;\\n  }\\n\\n  function getChainId() internal view returns (uint) {\\n    uint chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n    return chainId;\\n  }\\n}\\n\\ninterface TimelockInterface {\\n  function delay() external view returns (uint);\\n\\n  function GRACE_PERIOD() external view returns (uint);\\n\\n  function acceptAdmin() external;\\n\\n  function queuedTransactions(bytes32 hash) external view returns (bool);\\n\\n  function queueTransaction(\\n    address target,\\n    uint value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint eta\\n  ) external returns (bytes32);\\n\\n  function cancelTransaction(\\n    address target,\\n    uint value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint eta\\n  ) external;\\n\\n  function executeTransaction(\\n    address target,\\n    uint value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint eta\\n  ) external payable returns (bytes memory);\\n}\\n\\ninterface JLendInterface {\\n  function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\\n}\\n\",\"keccak256\":\"0x6fd166b742e298967c29e205c4141546713971774c85f9102942b792046e26e1\",\"license\":\"BSD-3-Clause\"},\"contracts/Governance/JLEND.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract JLEND {\\n  /// @notice EIP-20 token name for this token\\n  string public constant name = \\\"JLEND Token\\\";\\n\\n  /// @notice EIP-20 token symbol for this token\\n  string public constant symbol = \\\"JLEND\\\";\\n\\n  /// @notice EIP-20 token decimals for this token\\n  uint8 public constant decimals = 18;\\n\\n  /// @notice Total number of tokens in circulation\\n  uint public constant totalSupply = 10000000e18; // 10 million JLend\\n\\n  /// @notice Allowance amounts on behalf of others\\n  mapping(address => mapping(address => uint96)) internal allowances;\\n\\n  /// @notice Official record of token balances for each account\\n  mapping(address => uint96) internal balances;\\n\\n  /// @notice A record of each accounts delegate\\n  mapping(address => address) public delegates;\\n\\n  /// @notice A checkpoint for marking number of votes from a given block\\n  struct Checkpoint {\\n    uint32 fromBlock;\\n    uint96 votes;\\n  }\\n\\n  /// @notice A record of votes checkpoints for each account, by index\\n  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n  /// @notice The number of checkpoints for each account\\n  mapping(address => uint32) public numCheckpoints;\\n\\n  /// @notice The EIP-712 typehash for the contract's domain\\n  bytes32 public constant DOMAIN_TYPEHASH =\\n    keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATION_TYPEHASH =\\n    keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n  /// @notice A record of states for signing / validating signatures\\n  mapping(address => uint) public nonces;\\n\\n  /// @notice An event thats emitted when an account changes its delegate\\n  event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n  /// @notice An event thats emitted when a delegate account's vote balance changes\\n  event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n  /// @notice The standard EIP-20 transfer event\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /// @notice The standard EIP-20 approval event\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /**\\n   * @notice Construct a new JLend token\\n   * @param account The initial account to grant all the tokens\\n   */\\n  constructor(address account) public {\\n    balances[account] = uint96(totalSupply);\\n    emit Transfer(address(0), account, totalSupply);\\n  }\\n\\n  /**\\n   * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n   * @param account The address of the account holding the funds\\n   * @param spender The address of the account spending the funds\\n   * @return The number of tokens approved\\n   */\\n  function allowance(address account, address spender) external view returns (uint) {\\n    return allowances[account][spender];\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n   * @return Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint rawAmount) external returns (bool) {\\n    uint96 amount;\\n    if (rawAmount == type(uint).max) {\\n      amount = type(uint96).max;\\n    } else {\\n      amount = safe96(rawAmount, \\\"JLend::approve: amount exceeds 96 bits\\\");\\n    }\\n\\n    allowances[msg.sender][spender] = amount;\\n\\n    emit Approval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Get the number of tokens held by the `account`\\n   * @param account The address of the account to get the balance of\\n   * @return The number of tokens held\\n   */\\n  function balanceOf(address account) external view returns (uint) {\\n    return balances[account];\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param rawAmount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint rawAmount) external returns (bool) {\\n    uint96 amount = safe96(rawAmount, \\\"JLend::transfer: amount exceeds 96 bits\\\");\\n    _transferTokens(msg.sender, dst, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param rawAmount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\\n    address spender = msg.sender;\\n    uint96 spenderAllowance = allowances[src][spender];\\n    uint96 amount = safe96(rawAmount, \\\"JLend::approve: amount exceeds 96 bits\\\");\\n\\n    if (spender != src && spenderAllowance != type(uint96).max) {\\n      uint96 newAllowance = sub96(\\n        spenderAllowance,\\n        amount,\\n        \\\"JLend::transferFrom: transfer amount exceeds spender allowance\\\"\\n      );\\n      allowances[src][spender] = newAllowance;\\n\\n      emit Approval(src, spender, newAllowance);\\n    }\\n\\n    _transferTokens(src, dst, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Delegate votes from `msg.sender` to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   */\\n  function delegate(address delegatee) public {\\n    return _delegate(msg.sender, delegatee);\\n  }\\n\\n  /**\\n   * @notice Delegates votes from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\\n    bytes32 domainSeparator = keccak256(\\n      abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))\\n    );\\n    bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), \\\"JLend::delegateBySig: invalid signature\\\");\\n    require(nonce == nonces[signatory]++, \\\"JLend::delegateBySig: invalid nonce\\\");\\n    require(block.timestamp <= expiry, \\\"JLend::delegateBySig: signature expired\\\");\\n    return _delegate(signatory, delegatee);\\n  }\\n\\n  /**\\n   * @notice Gets the current votes balance for `account`\\n   * @param account The address to get votes balance\\n   * @return The number of current votes for `account`\\n   */\\n  function getCurrentVotes(address account) external view returns (uint96) {\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n  }\\n\\n  /**\\n   * @notice Determine the prior number of votes for an account as of a block number\\n   * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n   * @param account The address of the account to check\\n   * @param blockNumber The block number to get the vote balance at\\n   * @return The number of votes the account had as of the given block\\n   */\\n  function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\\n    require(blockNumber < block.number, \\\"JLend::getPriorVotes: not yet determined\\\");\\n\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    if (nCheckpoints == 0) {\\n      return 0;\\n    }\\n\\n    // First check most recent balance\\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n      return checkpoints[account][nCheckpoints - 1].votes;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (checkpoints[account][0].fromBlock > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint32 lower = 0;\\n    uint32 upper = nCheckpoints - 1;\\n    while (upper > lower) {\\n      uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Checkpoint memory cp = checkpoints[account][center];\\n      if (cp.fromBlock == blockNumber) {\\n        return cp.votes;\\n      } else if (cp.fromBlock < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return checkpoints[account][lower].votes;\\n  }\\n\\n  function _delegate(address delegator, address delegatee) internal {\\n    address currentDelegate = delegates[delegator];\\n    uint96 delegatorBalance = balances[delegator];\\n    delegates[delegator] = delegatee;\\n\\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n  }\\n\\n  function _transferTokens(address src, address dst, uint96 amount) internal {\\n    require(src != address(0), \\\"JLend::_transferTokens: cannot transfer from the zero address\\\");\\n    require(dst != address(0), \\\"JLend::_transferTokens: cannot transfer to the zero address\\\");\\n\\n    balances[src] = sub96(balances[src], amount, \\\"JLend::_transferTokens: transfer amount exceeds balance\\\");\\n    balances[dst] = add96(balances[dst], amount, \\\"JLend::_transferTokens: transfer amount overflows\\\");\\n    emit Transfer(src, dst, amount);\\n\\n    _moveDelegates(delegates[src], delegates[dst], amount);\\n  }\\n\\n  function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\n    if (srcRep != dstRep && amount > 0) {\\n      if (srcRep != address(0)) {\\n        uint32 srcRepNum = numCheckpoints[srcRep];\\n        uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n        uint96 srcRepNew = sub96(srcRepOld, amount, \\\"JLend::_moveVotes: vote amount underflows\\\");\\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n      }\\n\\n      if (dstRep != address(0)) {\\n        uint32 dstRepNum = numCheckpoints[dstRep];\\n        uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n        uint96 dstRepNew = add96(dstRepOld, amount, \\\"JLend::_moveVotes: vote amount overflows\\\");\\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n      }\\n    }\\n  }\\n\\n  function _writeCheckpoint(\\n    address delegatee,\\n    uint32 nCheckpoints,\\n    uint96 oldVotes,\\n    uint96 newVotes\\n  ) internal {\\n    uint32 blockNumber = safe32(block.number, \\\"JLend::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n    if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n    } else {\\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n      numCheckpoints[delegatee] = nCheckpoints + 1;\\n    }\\n\\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n  }\\n\\n  function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2 ** 32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\n    require(n < 2 ** 96, errorMessage);\\n    return uint96(n);\\n  }\\n\\n  function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n    uint96 c = a + b;\\n    require(c >= a, errorMessage);\\n    return c;\\n  }\\n\\n  function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n    require(b <= a, errorMessage);\\n    return a - b;\\n  }\\n\\n  function getChainId() internal view returns (uint) {\\n    uint256 chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n    return chainId;\\n  }\\n}\\n\",\"keccak256\":\"0xb3e692c46d3b20d1bb6c3dc75e023ca49b0615df4b7127dda3233a5ac161b668\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title JLEND's InterestRateModel Interface\\n * @author JLEND\\n */\\nabstract contract InterestRateModel {\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n  bool public constant isInterestRateModel = true;\\n\\n  /**\\n   * @notice Calculates the current borrow interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getBorrowRate(uint cash, uint borrows, uint reserves) external view virtual returns (uint);\\n\\n  /**\\n   * @notice Calculates the current supply interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @param reserveFactorMantissa The current reserve factor the market has\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint cash,\\n    uint borrows,\\n    uint reserves,\\n    uint reserveFactorMantissa\\n  ) external view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x52139203b262483398066a0d6100691d5d738b87aced3159b9b5ea7a400b42c0\",\"license\":\"BSD-3-Clause\"},\"contracts/JErc20.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./JToken.sol\\\";\\n\\ninterface JLendLike {\\n  function delegate(address delegatee) external;\\n}\\n\\n/**\\n * @title JLEND's JErc20 Contract\\n * @notice JTokens which wrap an EIP-20 underlying\\n * @author JLEND\\n */\\ncontract JErc20 is JToken, JErc20Interface {\\n  /**\\n   * @notice Initialize the new money market\\n   * @param underlying_ The address of the underlying asset\\n   * @param comptroller_ The address of the Comptroller\\n   * @param interestRateModel_ The address of the interest rate model\\n   * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n   * @param name_ ERC-20 name of this token\\n   * @param symbol_ ERC-20 symbol of this token\\n   * @param decimals_ ERC-20 decimal precision of this token\\n   */\\n  function initialize(\\n    address underlying_,\\n    ComptrollerInterface comptroller_,\\n    InterestRateModel interestRateModel_,\\n    uint initialExchangeRateMantissa_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) public {\\n    // JToken initialize does the bulk of the work\\n    super.initialize(\\n      comptroller_,\\n      interestRateModel_,\\n      initialExchangeRateMantissa_,\\n      name_,\\n      symbol_,\\n      decimals_\\n    );\\n\\n    // Set underlying and sanity check it\\n    underlying = underlying_;\\n    EIP20Interface(underlying).totalSupply();\\n  }\\n\\n  /*** User Interface ***/\\n\\n  /**\\n   * @notice Sender supplies assets into the market and receives jTokens in exchange\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param mintAmount The amount of the underlying asset to supply\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function mint(uint mintAmount) external override returns (uint) {\\n    mintInternal(mintAmount);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sender redeems jTokens in exchange for the underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemTokens The number of jTokens to redeem into underlying\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeem(uint redeemTokens) external override returns (uint) {\\n    redeemInternal(redeemTokens);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sender redeems jTokens in exchange for a specified amount of underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemAmount The amount of underlying to redeem\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemUnderlying(uint redeemAmount) external override returns (uint) {\\n    redeemUnderlyingInternal(redeemAmount);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sender borrows assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function borrow(uint borrowAmount) external override returns (uint) {\\n    borrowInternal(borrowAmount);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sender repays their own borrow\\n   * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function repayBorrow(uint repayAmount) external override returns (uint) {\\n    repayBorrowInternal(repayAmount);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sender repays a borrow belonging to borrower\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function repayBorrowBehalf(address borrower, uint repayAmount) external override returns (uint) {\\n    repayBorrowBehalfInternal(borrower, repayAmount);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice The sender liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this jToken to be liquidated\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   * @param jTokenCollateral The market in which to seize collateral from the borrower\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function liquidateBorrow(\\n    address borrower,\\n    uint repayAmount,\\n    JTokenInterface jTokenCollateral\\n  ) external override returns (uint) {\\n    liquidateBorrowInternal(borrower, repayAmount, jTokenCollateral);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\\n   * @param token The address of the ERC-20 token to sweep\\n   */\\n  function sweepToken(EIP20NonStandardInterface token) external override {\\n    require(msg.sender == admin, \\\"JErc20::sweepToken: only admin can sweep tokens\\\");\\n    require(address(token) != underlying, \\\"JErc20::sweepToken: can not sweep underlying token\\\");\\n    uint256 balance = token.balanceOf(address(this));\\n    token.transfer(admin, balance);\\n  }\\n\\n  /**\\n   * @notice The sender adds to reserves.\\n   * @param addAmount The amount fo underlying token to add as reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _addReserves(uint addAmount) external override returns (uint) {\\n    return _addReservesInternal(addAmount);\\n  }\\n\\n  /*** Safe Token ***/\\n\\n  /**\\n   * @notice Gets balance of this contract in terms of the underlying\\n   * @dev This excludes the value of the current message, if any\\n   * @return The quantity of underlying tokens owned by this contract\\n   */\\n  function getCashPrior() internal view virtual override returns (uint) {\\n    EIP20Interface token = EIP20Interface(underlying);\\n    return token.balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\n   *      This will revert due to insufficient balance or insufficient allowance.\\n   *      This function returns the actual amount received,\\n   *      which may be less than `amount` if there is a fee attached to the transfer.\\n   *\\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n   */\\n  function doTransferIn(address from, uint amount) internal virtual override returns (uint) {\\n    // Read from storage once\\n    address underlying_ = underlying;\\n    EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying_);\\n    uint balanceBefore = EIP20Interface(underlying_).balanceOf(address(this));\\n    token.transferFrom(from, address(this), amount);\\n\\n    bool success;\\n    assembly {\\n      switch returndatasize()\\n      case 0 {\\n        // This is a non-standard ERC-20\\n        success := not(0) // set success to true\\n      }\\n      case 32 {\\n        // This is a compliant ERC-20\\n        returndatacopy(0, 0, 32)\\n        success := mload(0) // Set `success = returndata` of override external call\\n      }\\n      default {\\n        // This is an excessively non-compliant ERC-20, revert.\\n        revert(0, 0)\\n      }\\n    }\\n    require(success, \\\"TOKEN_TRANSFER_IN_FAILED\\\");\\n\\n    // Calculate the amount that was *actually* transferred\\n    uint balanceAfter = EIP20Interface(underlying_).balanceOf(address(this));\\n    return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n  }\\n\\n  /**\\n   * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\n   *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\\n   *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\\n   *      it is >= amount, this should not revert in normal conditions.\\n   *\\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n   */\\n  function doTransferOut(address payable to, uint amount) internal virtual override {\\n    EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\n    token.transfer(to, amount);\\n\\n    bool success;\\n    assembly {\\n      switch returndatasize()\\n      case 0 {\\n        // This is a non-standard ERC-20\\n        success := not(0) // set success to true\\n      }\\n      case 32 {\\n        // This is a compliant ERC-20\\n        returndatacopy(0, 0, 32)\\n        success := mload(0) // Set `success = returndata` of override external call\\n      }\\n      default {\\n        // This is an excessively non-compliant ERC-20, revert.\\n        revert(0, 0)\\n      }\\n    }\\n    require(success, \\\"TOKEN_TRANSFER_OUT_FAILED\\\");\\n  }\\n\\n  /**\\n   * @notice Admin call to delegate the votes of the JLEND-like underlying\\n   * @param jLendLikeDelegatee The address to delegate votes to\\n   * @dev JTokens whose underlying are not JLendLike should revert here\\n   */\\n  function _delegateJLendLikeTo(address jLendLikeDelegatee) external {\\n    require(msg.sender == admin, \\\"only the admin may set the jLend-like delegate\\\");\\n    JLendLike(underlying).delegate(jLendLikeDelegatee);\\n  }\\n}\\n\",\"keccak256\":\"0x99f4de8782e6bbe6c1cece472211e8661ddfb1ae344d9f3772a04738be15e592\",\"license\":\"BSD-3-Clause\"},\"contracts/JToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./JTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title JLEND's JToken Contract\\n * @notice Abstract base for JTokens\\n * @author JLEND\\n */\\nabstract contract JToken is JTokenInterface, ExponentialNoError, TokenErrorReporter {\\n  /**\\n   * @notice Initialize the money market\\n   * @param comptroller_ The address of the Comptroller\\n   * @param interestRateModel_ The address of the interest rate model\\n   * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n   * @param name_ EIP-20 name of this token\\n   * @param symbol_ EIP-20 symbol of this token\\n   * @param decimals_ EIP-20 decimal precision of this token\\n   */\\n  function initialize(\\n    ComptrollerInterface comptroller_,\\n    InterestRateModel interestRateModel_,\\n    uint initialExchangeRateMantissa_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) public {\\n    require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n    require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n    // Set initial exchange rate\\n    initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n    require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n    // Set the comptroller\\n    uint err = _setComptroller(comptroller_);\\n    require(err == NO_ERROR, \\\"setting comptroller failed\\\");\\n\\n    // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n    accrualBlockNumber = getBlockNumber();\\n    borrowIndex = mantissaOne;\\n\\n    // Set the interest rate model (depends on block number / borrow index)\\n    err = _setInterestRateModelFresh(interestRateModel_);\\n    require(err == NO_ERROR, \\\"setting interest rate model failed\\\");\\n\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n\\n    // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n    _notEntered = true;\\n  }\\n\\n  /**\\n   * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n   * @dev Called by both `transfer` and `transferFrom` internally\\n   * @param spender The address of the account performing the transfer\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param tokens The number of tokens to transfer\\n   * @return 0 if the transfer succeeded, else revert\\n   */\\n  function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n    /* Fail if transfer not allowed */\\n    uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n    if (allowed != 0) {\\n      revert TransferComptrollerRejection(allowed);\\n    }\\n\\n    /* Do not allow self-transfers */\\n    if (src == dst) {\\n      revert TransferNotAllowed();\\n    }\\n\\n    /* Get the allowance, infinite for the account owner */\\n    uint startingAllowance = 0;\\n    if (spender == src) {\\n      startingAllowance = type(uint).max;\\n    } else {\\n      startingAllowance = transferAllowances[src][spender];\\n    }\\n\\n    /* Do the calculations, checking for {under,over}flow */\\n    uint allowanceNew = startingAllowance - tokens;\\n    uint srjTokensNew = accountTokens[src] - tokens;\\n    uint dstTokensNew = accountTokens[dst] + tokens;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    accountTokens[src] = srjTokensNew;\\n    accountTokens[dst] = dstTokensNew;\\n\\n    /* Eat some of the allowance (if necessary) */\\n    if (startingAllowance != type(uint).max) {\\n      transferAllowances[src][spender] = allowanceNew;\\n    }\\n\\n    /* We emit a Transfer event */\\n    emit Transfer(src, dst, tokens);\\n\\n    // unused function\\n    // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external override nonReentrant returns (bool) {\\n    return transferTokens(msg.sender, msg.sender, dst, amount) == NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external override nonReentrant returns (bool) {\\n    return transferTokens(msg.sender, src, dst, amount) == NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (uint256.max means infinite)\\n   * @return Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    address src = msg.sender;\\n    transferAllowances[src][spender] = amount;\\n    emit Approval(src, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return transferAllowances[owner][spender];\\n  }\\n\\n  /**\\n   * @notice Get the token balance of the `owner`\\n   * @param owner The address of the account to query\\n   * @return The number of tokens owned by `owner`\\n   */\\n  function balanceOf(address owner) external view override returns (uint256) {\\n    return accountTokens[owner];\\n  }\\n\\n  /**\\n   * @notice Get the underlying balance of the `owner`\\n   * @dev This also accrues interest in a transaction\\n   * @param owner The address of the account to query\\n   * @return The amount of underlying owned by `owner`\\n   */\\n  function balanceOfUnderlying(address owner) external override returns (uint) {\\n    Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n    return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\n  }\\n\\n  /**\\n   * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n   * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n   * @param account Address of the account to snapshot\\n   * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n   */\\n  function getAccountSnapshot(address account) external view override returns (uint, uint, uint, uint) {\\n    return (\\n      NO_ERROR,\\n      accountTokens[account],\\n      borrowBalanceStoredInternal(account),\\n      exchangeRateStoredInternal()\\n    );\\n  }\\n\\n  /**\\n   * @dev Function to simply retrieve block number\\n   *  This exists mainly for inheriting test contracts to stub this result.\\n   */\\n  function getBlockNumber() internal view virtual returns (uint) {\\n    return block.number;\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block borrow interest rate for this jToken\\n   * @return The borrow interest rate per block, scaled by 1e18\\n   */\\n  function borrowRatePerBlock() external view override returns (uint) {\\n    return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block supply interest rate for this jToken\\n   * @return The supply interest rate per block, scaled by 1e18\\n   */\\n  function supplyRatePerBlock() external view override returns (uint) {\\n    return\\n      interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n  }\\n\\n  /**\\n   * @notice Returns the current total borrows plus accrued interest\\n   * @return The total borrows with interest\\n   */\\n  function totalBorrowsCurrent() external override nonReentrant returns (uint) {\\n    accrueInterest();\\n    return totalBorrows;\\n  }\\n\\n  /**\\n   * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n   * @param account The address whose balance should be calculated after updating borrowIndex\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceCurrent(address account) external override nonReentrant returns (uint) {\\n    accrueInterest();\\n    return borrowBalanceStored(account);\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceStored(address account) public view override returns (uint) {\\n    return borrowBalanceStoredInternal(account);\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return (error code, the calculated balance or 0 if error code is non-zero)\\n   */\\n  function borrowBalanceStoredInternal(address account) internal view returns (uint) {\\n    /* Get borrowBalance and borrowIndex */\\n    BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n    /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n     * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n     */\\n    if (borrowSnapshot.principal == 0) {\\n      return 0;\\n    }\\n\\n    /* Calculate new borrow balance using the interest index:\\n     *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n     */\\n    uint principalTimesIndex = borrowSnapshot.principal * borrowIndex;\\n    return principalTimesIndex / borrowSnapshot.interestIndex;\\n  }\\n\\n  /**\\n   * @notice Accrue interest then return the up-to-date exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateCurrent() public override nonReentrant returns (uint) {\\n    accrueInterest();\\n    return exchangeRateStored();\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the JToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStored() public view override returns (uint) {\\n    return exchangeRateStoredInternal();\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the JToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStoredInternal() internal view virtual returns (uint) {\\n    uint _totalSupply = totalSupply;\\n    if (_totalSupply == 0) {\\n      /*\\n       * If there are no tokens minted:\\n       *  exchangeRate = initialExchangeRate\\n       */\\n      return initialExchangeRateMantissa;\\n    } else {\\n      /*\\n       * Otherwise:\\n       *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n       */\\n      uint totalCash = getCashPrior();\\n      uint cashPlusBorrowsMinusReserves = totalCash + totalBorrows - totalReserves;\\n      uint exchangeRate = (cashPlusBorrowsMinusReserves * expScale) / _totalSupply;\\n\\n      return exchangeRate;\\n    }\\n  }\\n\\n  /**\\n   * @notice Get cash balance of this jToken in the underlying asset\\n   * @return The quantity of underlying asset owned by this contract\\n   */\\n  function getCash() external view override returns (uint) {\\n    return getCashPrior();\\n  }\\n\\n  /**\\n   * @notice Applies accrued interest to total borrows and reserves\\n   * @dev This calculates interest accrued from the last checkpointed block\\n   *   up to the current block and writes new checkpoint to storage.\\n   */\\n  function accrueInterest() public virtual override returns (uint) {\\n    /* Remember the initial block number */\\n    uint currentBlockNumber = getBlockNumber();\\n    uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n    /* Short-circuit accumulating 0 interest */\\n    if (accrualBlockNumberPrior == currentBlockNumber) {\\n      return NO_ERROR;\\n    }\\n\\n    /* Read the previous values out of storage */\\n    uint cashPrior = getCashPrior();\\n    uint borrowsPrior = totalBorrows;\\n    uint reservesPrior = totalReserves;\\n    uint borrowIndexPrior = borrowIndex;\\n\\n    /* Calculate the current borrow interest rate */\\n    uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n    require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n    /* Calculate the number of blocks elapsed since the last accrual */\\n    uint blockDelta = currentBlockNumber - accrualBlockNumberPrior;\\n\\n    /*\\n     * Calculate the interest accumulated into borrows and reserves and the new index:\\n     *  simpleInterestFactor = borrowRate * blockDelta\\n     *  interestAccumulated = simpleInterestFactor * totalBorrows\\n     *  totalBorrowsNew = interestAccumulated + totalBorrows\\n     *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n     *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n     */\\n\\n    Exp memory simpleInterestFactor = mul_(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n    uint interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, borrowsPrior);\\n    uint totalBorrowsNew = interestAccumulated + borrowsPrior;\\n    uint totalReservesNew = mul_ScalarTruncateAddUInt(\\n      Exp({mantissa: reserveFactorMantissa}),\\n      interestAccumulated,\\n      reservesPrior\\n    );\\n    uint borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the previously calculated values into storage */\\n    accrualBlockNumber = currentBlockNumber;\\n    borrowIndex = borrowIndexNew;\\n    totalBorrows = totalBorrowsNew;\\n    totalReserves = totalReservesNew;\\n\\n    /* We emit an AccrueInterest event */\\n    emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sender supplies assets into the market and receives jTokens in exchange\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param mintAmount The amount of the underlying asset to supply\\n   */\\n  function mintInternal(uint mintAmount) internal nonReentrant {\\n    accrueInterest();\\n    // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n    mintFresh(msg.sender, mintAmount);\\n  }\\n\\n  /**\\n   * @notice User supplies assets into the market and receives jTokens in exchange\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param minter The address of the account which is supplying the assets\\n   * @param mintAmount The amount of the underlying asset to supply\\n   */\\n  function mintFresh(address minter, uint mintAmount) internal {\\n    /* Fail if mint not allowed */\\n    uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n    if (allowed != 0) {\\n      revert MintComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert MintFreshnessCheck();\\n    }\\n\\n    Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     *  We call `doTransferIn` for the minter and the mintAmount.\\n     *  Note: The jToken must handle variations between ERC-20 and ETH underlying.\\n     *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n     *  side-effects occurred. The function returns the amount actually transferred,\\n     *  in case of a fee. On success, the jToken holds an additional `actualMintAmount`\\n     *  of cash.\\n     */\\n    uint actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n    /*\\n     * We get the current exchange rate and calculate the number of jTokens to be minted:\\n     *  mintTokens = actualMintAmount / exchangeRate\\n     */\\n\\n    uint mintTokens = div_(actualMintAmount, exchangeRate);\\n\\n    /*\\n     * We calculate the new total supply of jTokens and minter token balance, checking for overflow:\\n     *  totalSupplyNew = totalSupply + mintTokens\\n     *  accountTokensNew = accountTokens[minter] + mintTokens\\n     * And write them into storage\\n     */\\n    totalSupply = totalSupply + mintTokens;\\n    accountTokens[minter] = accountTokens[minter] + mintTokens;\\n\\n    /* We emit a Mint event, and a Transfer event */\\n    emit Mint(minter, actualMintAmount, mintTokens);\\n    emit Transfer(address(this), minter, mintTokens);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.mintVerify(address(this), minter, actualMintAmount, mintTokens);\\n  }\\n\\n  /**\\n   * @notice Sender redeems jTokens in exchange for the underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemTokens The number of jTokens to redeem into underlying\\n   */\\n  function redeemInternal(uint redeemTokens) internal nonReentrant {\\n    accrueInterest();\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    redeemFresh(payable(msg.sender), redeemTokens, 0);\\n  }\\n\\n  /**\\n   * @notice Sender redeems jTokens in exchange for a specified amount of underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemAmount The amount of underlying to receive from redeeming jTokens\\n   */\\n  function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant {\\n    accrueInterest();\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    redeemFresh(payable(msg.sender), 0, redeemAmount);\\n  }\\n\\n  /**\\n   * @notice User redeems jTokens in exchange for the underlying asset\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param redeemer The address of the account which is redeeming the tokens\\n   * @param redeemTokensIn The number of jTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   * @param redeemAmountIn The number of underlying tokens to receive from redeeming jTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   */\\n  function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal {\\n    require(\\n      redeemTokensIn == 0 || redeemAmountIn == 0,\\n      \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\"\\n    );\\n\\n    /* exchangeRate = invoke Exchange Rate Stored() */\\n    Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\n\\n    uint redeemTokens;\\n    uint redeemAmount;\\n    /* If redeemTokensIn > 0: */\\n    if (redeemTokensIn > 0) {\\n      /*\\n       * We calculate the exchange rate and the amount of underlying to be redeemed:\\n       *  redeemTokens = redeemTokensIn\\n       *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n       */\\n      redeemTokens = redeemTokensIn;\\n      redeemAmount = mul_ScalarTruncate(exchangeRate, redeemTokensIn);\\n    } else {\\n      /*\\n       * We get the current exchange rate and calculate the amount to be redeemed:\\n       *  redeemTokens = redeemAmountIn / exchangeRate\\n       *  redeemAmount = redeemAmountIn\\n       */\\n      redeemTokens = div_(redeemAmountIn, exchangeRate);\\n      redeemAmount = redeemAmountIn;\\n    }\\n\\n    /* Fail if redeem not allowed */\\n    uint allowed = comptroller.redeemAllowed(address(this), redeemer, redeemTokens);\\n    if (allowed != 0) {\\n      revert RedeemComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert RedeemFreshnessCheck();\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient cash */\\n    if (getCashPrior() < redeemAmount) {\\n      revert RedeemTransferOutNotPossible();\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We write the previously calculated values into storage.\\n     *  Note: Avoid token reentrancy attacks by writing reduced supply before external transfer.\\n     */\\n    totalSupply = totalSupply - redeemTokens;\\n    accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens;\\n\\n    /*\\n     * We invoke doTransferOut for the redeemer and the redeemAmount.\\n     *  Note: The jToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the jToken has redeemAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(redeemer, redeemAmount);\\n\\n    /* We emit a Transfer event, and a Redeem event */\\n    emit Transfer(redeemer, address(this), redeemTokens);\\n    emit Redeem(redeemer, redeemAmount, redeemTokens);\\n\\n    /* We call the defense hook */\\n    comptroller.redeemVerify(address(this), redeemer, redeemAmount, redeemTokens);\\n  }\\n\\n  /**\\n   * @notice Sender borrows assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   */\\n  function borrowInternal(uint borrowAmount) internal nonReentrant {\\n    accrueInterest();\\n    // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n    borrowFresh(payable(msg.sender), borrowAmount);\\n  }\\n\\n  /**\\n   * @notice Users borrow assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   */\\n  function borrowFresh(address payable borrower, uint borrowAmount) internal {\\n    /* Fail if borrow not allowed */\\n    uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n    if (allowed != 0) {\\n      revert BorrowComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert BorrowFreshnessCheck();\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient underlying cash */\\n    if (getCashPrior() < borrowAmount) {\\n      revert BorrowCashNotAvailable();\\n    }\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on overflow:\\n     *  accountBorrowNew = accountBorrow + borrowAmount\\n     *  totalBorrowsNew = totalBorrows + borrowAmount\\n     */\\n    uint accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n    uint accountBorrowsNew = accountBorrowsPrev + borrowAmount;\\n    uint totalBorrowsNew = totalBorrows + borrowAmount;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n         * We write the previously calculated values into storage.\\n         *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\\n        `*/\\n    accountBorrows[borrower].principal = accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = totalBorrowsNew;\\n\\n    /*\\n     * We invoke doTransferOut for the borrower and the borrowAmount.\\n     *  Note: The jToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the jToken borrowAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(borrower, borrowAmount);\\n\\n    /* We emit a Borrow event */\\n    emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\\n  }\\n\\n  /**\\n   * @notice Sender repays their own borrow\\n   * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n   */\\n  function repayBorrowInternal(uint repayAmount) internal nonReentrant {\\n    accrueInterest();\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n  }\\n\\n  /**\\n   * @notice Sender repays a borrow belonging to borrower\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n   */\\n  function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant {\\n    accrueInterest();\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    repayBorrowFresh(msg.sender, borrower, repayAmount);\\n  }\\n\\n  /**\\n   * @notice Borrows are repaid by another user (possibly the borrower).\\n   * @param payer the account paying off the borrow\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\\n   * @return (uint) the actual repayment amount.\\n   */\\n  function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint) {\\n    /* Fail if repayBorrow not allowed */\\n    uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n    if (allowed != 0) {\\n      revert RepayBorrowComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert RepayBorrowFreshnessCheck();\\n    }\\n\\n    /* We fetch the amount the borrower owes, with accumulated interest */\\n    uint accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n\\n    /* If repayAmount == -1, repayAmount = accountBorrows */\\n    uint repayAmountFinal = repayAmount == type(uint).max ? accountBorrowsPrev : repayAmount;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We call doTransferIn for the payer and the repayAmount\\n     *  Note: The jToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the jToken holds an additional repayAmount of cash.\\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     *   it returns the amount actually transferred, in case of a fee.\\n     */\\n    uint actualRepayAmount = doTransferIn(payer, repayAmountFinal);\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on underflow:\\n     *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n     *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n     */\\n    uint accountBorrowsNew = accountBorrowsPrev - actualRepayAmount;\\n    uint totalBorrowsNew = totalBorrows - actualRepayAmount;\\n\\n    /* We write the previously calculated values into storage */\\n    accountBorrows[borrower].principal = accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = totalBorrowsNew;\\n\\n    /* We emit a RepayBorrow event */\\n    emit RepayBorrow(payer, borrower, actualRepayAmount, accountBorrowsNew, totalBorrowsNew);\\n\\n    return actualRepayAmount;\\n  }\\n\\n  /**\\n   * @notice The sender liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this jToken to be liquidated\\n   * @param jTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   */\\n  function liquidateBorrowInternal(\\n    address borrower,\\n    uint repayAmount,\\n    JTokenInterface jTokenCollateral\\n  ) internal nonReentrant {\\n    accrueInterest();\\n\\n    uint error = jTokenCollateral.accrueInterest();\\n    if (error != NO_ERROR) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n      revert LiquidateAccrueCollateralInterestFailed(error);\\n    }\\n\\n    // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n    liquidateBorrowFresh(msg.sender, borrower, repayAmount, jTokenCollateral);\\n  }\\n\\n  /**\\n   * @notice The liquidator liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this jToken to be liquidated\\n   * @param liquidator The address repaying the borrow and seizing collateral\\n   * @param jTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   */\\n  function liquidateBorrowFresh(\\n    address liquidator,\\n    address borrower,\\n    uint repayAmount,\\n    JTokenInterface jTokenCollateral\\n  ) internal {\\n    /* Fail if liquidate not allowed */\\n    uint allowed = comptroller.liquidateBorrowAllowed(\\n      address(this),\\n      address(jTokenCollateral),\\n      liquidator,\\n      borrower,\\n      repayAmount\\n    );\\n    if (allowed != 0) {\\n      revert LiquidateComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert LiquidateFreshnessCheck();\\n    }\\n\\n    /* Verify jTokenCollateral market's block number equals current block number */\\n    if (jTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n      revert LiquidateCollateralFreshnessCheck();\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      revert LiquidateLiquidatorIsBorrower();\\n    }\\n\\n    /* Fail if repayAmount = 0 */\\n    if (repayAmount == 0) {\\n      revert LiquidateCloseAmountIsZero();\\n    }\\n\\n    /* Fail if repayAmount = -1 */\\n    if (repayAmount == type(uint).max) {\\n      revert LiquidateCloseAmountIsUintMax();\\n    }\\n\\n    /* Fail if repayBorrow fails */\\n    uint actualRepayAmount = repayBorrowFresh(liquidator, borrower, repayAmount);\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We calculate the number of collateral tokens that will be seized */\\n    (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n      address(this),\\n      address(jTokenCollateral),\\n      actualRepayAmount\\n    );\\n    require(amountSeizeError == NO_ERROR, \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n    /* Revert if borrower collateral token balance < seizeTokens */\\n    require(jTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n    // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n    if (address(jTokenCollateral) == address(this)) {\\n      seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n    } else {\\n      require(jTokenCollateral.seize(liquidator, borrower, seizeTokens) == NO_ERROR, \\\"token seizure failed\\\");\\n    }\\n\\n    /* We emit a LiquidateBorrow event */\\n    emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(jTokenCollateral), seizeTokens);\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Will fail unless called by another jToken during the process of liquidation.\\n   *  Its absolutely critical to use msg.sender as the borrowed jToken and not a parameter.\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of jTokens to seize\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint seizeTokens\\n  ) external override nonReentrant returns (uint) {\\n    seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another JToken.\\n   *  Its absolutely critical to use msg.sender as the seizer jToken and not a parameter.\\n   * @param seizerToken The contract seizing the collateral (i.e. borrowed jToken)\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of jTokens to seize\\n   */\\n  function seizeInternal(\\n    address seizerToken,\\n    address liquidator,\\n    address borrower,\\n    uint seizeTokens\\n  ) internal {\\n    /* Fail if seize not allowed */\\n    uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n    if (allowed != 0) {\\n      revert LiquidateSeizeComptrollerRejection(allowed);\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      revert LiquidateSeizeLiquidatorIsBorrower();\\n    }\\n\\n    /*\\n     * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n     *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n     *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n     */\\n    uint protocolSeizeTokens = mul_(seizeTokens, Exp({mantissa: protocolSeizeShareMantissa}));\\n    uint liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens;\\n    Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\n    uint protocolSeizeAmount = mul_ScalarTruncate(exchangeRate, protocolSeizeTokens);\\n    uint totalReservesNew = totalReserves + protocolSeizeAmount;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the calculated values into storage */\\n    totalReserves = totalReservesNew;\\n    totalSupply = totalSupply - protocolSeizeTokens;\\n    accountTokens[borrower] = accountTokens[borrower] - seizeTokens;\\n    accountTokens[liquidator] = accountTokens[liquidator] + liquidatorSeizeTokens;\\n\\n    /* Emit a Transfer event */\\n    emit Transfer(borrower, liquidator, liquidatorSeizeTokens);\\n    emit Transfer(borrower, address(this), protocolSeizeTokens);\\n    emit ReservesAdded(address(this), protocolSeizeAmount, totalReservesNew);\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  /**\\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @param newPendingAdmin New pending admin.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setPendingAdmin(address payable newPendingAdmin) external override returns (uint) {\\n    // Check caller = admin\\n    if (msg.sender != admin) {\\n      revert SetPendingAdminOwnerCheck();\\n    }\\n\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store pendingAdmin with value newPendingAdmin\\n    pendingAdmin = newPendingAdmin;\\n\\n    // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n   * @dev Admin function for pending admin to accept role and update admin\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptAdmin() external override returns (uint) {\\n    // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n      revert AcceptAdminPendingAdminCheck();\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldAdmin = admin;\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store admin with value pendingAdmin\\n    admin = pendingAdmin;\\n\\n    // Clear the pending value\\n    pendingAdmin = payable(address(0));\\n\\n    emit NewAdmin(oldAdmin, admin);\\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sets a new comptroller for the market\\n   * @dev Admin function to set a new comptroller\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setComptroller(ComptrollerInterface newComptroller) public override returns (uint) {\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert SetComptrollerOwnerCheck();\\n    }\\n\\n    ComptrollerInterface oldComptroller = comptroller;\\n    // Ensure invoke comptroller.isComptroller() returns true\\n    require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n    // Set market's comptroller to newComptroller\\n    comptroller = newComptroller;\\n\\n    // Emit NewComptroller(oldComptroller, newComptroller)\\n    emit NewComptroller(oldComptroller, newComptroller);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n   * @dev Admin function to accrue interest and set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactor(uint newReserveFactorMantissa) external override nonReentrant returns (uint) {\\n    accrueInterest();\\n    // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n    return _setReserveFactorFresh(newReserveFactorMantissa);\\n  }\\n\\n  /**\\n   * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n   * @dev Admin function to set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert SetReserveFactorAdminCheck();\\n    }\\n\\n    // Verify market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert SetReserveFactorFreshCheck();\\n    }\\n\\n    // Check newReserveFactor \\u2264 maxReserveFactor\\n    if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n      revert SetReserveFactorBoundsCheck();\\n    }\\n\\n    uint oldReserveFactorMantissa = reserveFactorMantissa;\\n    reserveFactorMantissa = newReserveFactorMantissa;\\n\\n    emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n   * @param addAmount Amount of addition to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n    accrueInterest();\\n\\n    // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n    _addReservesFresh(addAmount);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Add reserves by transferring from caller\\n   * @dev Requires fresh interest accrual\\n   * @param addAmount Amount of addition to reserves\\n   * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n   */\\n  function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n    // totalReserves + actualAddAmount\\n    uint totalReservesNew;\\n    uint actualAddAmount;\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert AddReservesFactorFreshCheck(actualAddAmount);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We call doTransferIn for the caller and the addAmount\\n     *  Note: The jToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the jToken holds an additional addAmount of cash.\\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     *  it returns the amount actually transferred, in case of a fee.\\n     */\\n\\n    actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n    totalReservesNew = totalReserves + actualAddAmount;\\n\\n    // Store reserves[n+1] = reserves[n] + actualAddAmount\\n    totalReserves = totalReservesNew;\\n\\n    /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n    emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n    /* Return (NO_ERROR, actualAddAmount) */\\n    return (NO_ERROR, actualAddAmount);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces reserves by transferring to admin\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReserves(uint reduceAmount) external override nonReentrant returns (uint) {\\n    accrueInterest();\\n    // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n    return _reduceReservesFresh(reduceAmount);\\n  }\\n\\n  /**\\n   * @notice Reduces reserves by transferring to admin\\n   * @dev Requires fresh interest accrual\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n    // totalReserves - reduceAmount\\n    uint totalReservesNew;\\n\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert ReduceReservesAdminCheck();\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert ReduceReservesFreshCheck();\\n    }\\n\\n    // Fail gracefully if protocol has insufficient underlying cash\\n    if (getCashPrior() < reduceAmount) {\\n      revert ReduceReservesCashNotAvailable();\\n    }\\n\\n    // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n    if (reduceAmount > totalReserves) {\\n      revert ReduceReservesCashValidation();\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    totalReservesNew = totalReserves - reduceAmount;\\n\\n    // Store reserves[n+1] = reserves[n] - reduceAmount\\n    totalReserves = totalReservesNew;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(admin, reduceAmount);\\n\\n    emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n   * @dev Admin function to accrue interest and update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) public override returns (uint) {\\n    accrueInterest();\\n    // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n    return _setInterestRateModelFresh(newInterestRateModel);\\n  }\\n\\n  /**\\n   * @notice updates the interest rate model (*requires fresh interest accrual)\\n   * @dev Admin function to update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n    // Used to store old model for use in the event that is emitted on success\\n    InterestRateModel oldInterestRateModel;\\n\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert SetInterestRateModelOwnerCheck();\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert SetInterestRateModelFreshCheck();\\n    }\\n\\n    // Track the market's current interest rate model\\n    oldInterestRateModel = interestRateModel;\\n\\n    // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n    require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n    // Set the interest rate model to newInterestRateModel\\n    interestRateModel = newInterestRateModel;\\n\\n    // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n    emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /*** Safe Token ***/\\n\\n  /**\\n   * @notice Gets balance of this contract in terms of the underlying\\n   * @dev This excludes the value of the current message, if any\\n   * @return The quantity of underlying owned by this contract\\n   */\\n  function getCashPrior() internal view virtual returns (uint);\\n\\n  /**\\n   * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n   *  This may revert due to insufficient balance or insufficient allowance.\\n   */\\n  function doTransferIn(address from, uint amount) internal virtual returns (uint);\\n\\n  /**\\n   * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n   *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n   *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n   */\\n  function doTransferOut(address payable to, uint amount) internal virtual;\\n\\n  /*** Reentrancy Guard ***/\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   */\\n  modifier nonReentrant() {\\n    require(_notEntered, \\\"re-entered\\\");\\n    _notEntered = false;\\n    _;\\n    _notEntered = true; // get a gas-refund post-Istanbul\\n  }\\n}\\n\",\"keccak256\":\"0x4d7ece0465e7f0a0c12ea858f61123e522f2b49794f67f697627c2b8aa1db9dd\",\"license\":\"BSD-3-Clause\"},\"contracts/JTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\n\\ncontract JTokenStorage {\\n  /**\\n   * @dev Guard variable for re-entrancy checks\\n   */\\n  bool internal _notEntered;\\n\\n  /**\\n   * @notice EIP-20 token name for this token\\n   */\\n  string public name;\\n\\n  /**\\n   * @notice EIP-20 token symbol for this token\\n   */\\n  string public symbol;\\n\\n  /**\\n   * @notice EIP-20 token decimals for this token\\n   */\\n  uint8 public decimals;\\n\\n  // Maximum borrow rate that can ever be applied (.0005% / block)\\n  uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n  // Maximum fraction of interest that can be set aside for reserves\\n  uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n  /**\\n   * @notice Administrator for this contract\\n   */\\n  address payable public admin;\\n\\n  /**\\n   * @notice Pending administrator for this contract\\n   */\\n  address payable public pendingAdmin;\\n\\n  /**\\n   * @notice Contract which oversees inter-jToken operations\\n   */\\n  ComptrollerInterface public comptroller;\\n\\n  /**\\n   * @notice Model which tells what the current interest rate should be\\n   */\\n  InterestRateModel public interestRateModel;\\n\\n  // Initial exchange rate used when minting the first JTokens (used when totalSupply = 0)\\n  uint internal initialExchangeRateMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for reserves\\n   */\\n  uint public reserveFactorMantissa;\\n\\n  /**\\n   * @notice Block number that interest was last accrued at\\n   */\\n  uint public accrualBlockNumber;\\n\\n  /**\\n   * @notice Accumulator of the total earned interest rate since the opening of the market\\n   */\\n  uint public borrowIndex;\\n\\n  /**\\n   * @notice Total amount of outstanding borrows of the underlying in this market\\n   */\\n  uint public totalBorrows;\\n\\n  /**\\n   * @notice Total amount of reserves of the underlying held in this market\\n   */\\n  uint public totalReserves;\\n\\n  /**\\n   * @notice Total number of tokens in circulation\\n   */\\n  uint public totalSupply;\\n\\n  // Official record of token balances for each account\\n  mapping(address => uint) internal accountTokens;\\n\\n  // Approved token transfer amounts on behalf of others\\n  mapping(address => mapping(address => uint)) internal transferAllowances;\\n\\n  /**\\n   * @notice Container for borrow balance information\\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n   */\\n  struct BorrowSnapshot {\\n    uint principal;\\n    uint interestIndex;\\n  }\\n\\n  // Mapping of account addresses to outstanding borrow balances\\n  mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n  /**\\n   * @notice Share of seized collateral that is added to reserves\\n   */\\n  uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n}\\n\\nabstract contract JTokenInterface is JTokenStorage {\\n  /**\\n   * @notice Indicator that this is a JToken contract (for inspection)\\n   */\\n  bool public constant isJToken = true;\\n\\n  /*** Market Events ***/\\n\\n  /**\\n   * @notice Event emitted when interest is accrued\\n   */\\n  event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when tokens are minted\\n   */\\n  event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n  /**\\n   * @notice Event emitted when tokens are redeemed\\n   */\\n  event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n  /**\\n   * @notice Event emitted when underlying is borrowed\\n   */\\n  event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is repaid\\n   */\\n  event RepayBorrow(\\n    address payer,\\n    address borrower,\\n    uint repayAmount,\\n    uint accountBorrows,\\n    uint totalBorrows\\n  );\\n\\n  /**\\n   * @notice Event emitted when a borrow is liquidated\\n   */\\n  event LiquidateBorrow(\\n    address liquidator,\\n    address borrower,\\n    uint repayAmount,\\n    address jTokenCollateral,\\n    uint seizeTokens\\n  );\\n\\n  /*** Admin Events ***/\\n\\n  /**\\n   * @notice Event emitted when pendingAdmin is changed\\n   */\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /**\\n   * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n   */\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  /**\\n   * @notice Event emitted when comptroller is changed\\n   */\\n  event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n  /**\\n   * @notice Event emitted when interestRateModel is changed\\n   */\\n  event NewMarketInterestRateModel(\\n    InterestRateModel oldInterestRateModel,\\n    InterestRateModel newInterestRateModel\\n  );\\n\\n  /**\\n   * @notice Event emitted when the reserve factor is changed\\n   */\\n  event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n  /**\\n   * @notice Event emitted when the reserves are added\\n   */\\n  event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n  /**\\n   * @notice Event emitted when the reserves are reduced\\n   */\\n  event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n  /**\\n   * @notice EIP20 Transfer event\\n   */\\n  event Transfer(address indexed from, address indexed to, uint amount);\\n\\n  /**\\n   * @notice EIP20 Approval event\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n  /*** User Interface ***/\\n\\n  function transfer(address dst, uint amount) external virtual returns (bool);\\n\\n  function transferFrom(address src, address dst, uint amount) external virtual returns (bool);\\n\\n  function approve(address spender, uint amount) external virtual returns (bool);\\n\\n  function allowance(address owner, address spender) external view virtual returns (uint);\\n\\n  function balanceOf(address owner) external view virtual returns (uint);\\n\\n  function balanceOfUnderlying(address owner) external virtual returns (uint);\\n\\n  function getAccountSnapshot(address account) external view virtual returns (uint, uint, uint, uint);\\n\\n  function borrowRatePerBlock() external view virtual returns (uint);\\n\\n  function supplyRatePerBlock() external view virtual returns (uint);\\n\\n  function totalBorrowsCurrent() external virtual returns (uint);\\n\\n  function borrowBalanceCurrent(address account) external virtual returns (uint);\\n\\n  function borrowBalanceStored(address account) external view virtual returns (uint);\\n\\n  function exchangeRateCurrent() external virtual returns (uint);\\n\\n  function exchangeRateStored() external view virtual returns (uint);\\n\\n  function getCash() external view virtual returns (uint);\\n\\n  function accrueInterest() external virtual returns (uint);\\n\\n  function seize(address liquidator, address borrower, uint seizeTokens) external virtual returns (uint);\\n\\n  /*** Admin Functions ***/\\n\\n  function _setPendingAdmin(address payable newPendingAdmin) external virtual returns (uint);\\n\\n  function _acceptAdmin() external virtual returns (uint);\\n\\n  function _setComptroller(ComptrollerInterface newComptroller) external virtual returns (uint);\\n\\n  function _setReserveFactor(uint newReserveFactorMantissa) external virtual returns (uint);\\n\\n  function _reduceReserves(uint reduceAmount) external virtual returns (uint);\\n\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) external virtual returns (uint);\\n}\\n\\ncontract JErc20Storage {\\n  /**\\n   * @notice Underlying asset for this JToken\\n   */\\n  address public underlying;\\n}\\n\\nabstract contract JErc20Interface is JErc20Storage {\\n  /*** User Interface ***/\\n\\n  function mint(uint mintAmount) external virtual returns (uint);\\n\\n  function redeem(uint redeemTokens) external virtual returns (uint);\\n\\n  function redeemUnderlying(uint redeemAmount) external virtual returns (uint);\\n\\n  function borrow(uint borrowAmount) external virtual returns (uint);\\n\\n  function repayBorrow(uint repayAmount) external virtual returns (uint);\\n\\n  function repayBorrowBehalf(address borrower, uint repayAmount) external virtual returns (uint);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint repayAmount,\\n    JTokenInterface jTokenCollateral\\n  ) external virtual returns (uint);\\n\\n  function sweepToken(EIP20NonStandardInterface token) external virtual;\\n\\n  /*** Admin Functions ***/\\n\\n  function _addReserves(uint addAmount) external virtual returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n  /**\\n   * @notice Implementation address for this contract\\n   */\\n  address public implementation;\\n}\\n\\nabstract contract CDelegatorInterface is CDelegationStorage {\\n  /**\\n   * @notice Emitted when implementation is changed\\n   */\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /**\\n   * @notice Called by the admin to update the implementation of the delegator\\n   * @param implementation_ The address of the new implementation for delegation\\n   * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n   */\\n  function _setImplementation(\\n    address implementation_,\\n    bool allowResign,\\n    bytes memory becomeImplementationData\\n  ) external virtual;\\n}\\n\\nabstract contract CDelegateInterface is CDelegationStorage {\\n  /**\\n   * @notice Called by the delegator on a delegate to initialize it for duty\\n   * @dev Should revert if any issues arise which make it unfit for delegation\\n   * @param data The encoded bytes data for any initialization\\n   */\\n  function _becomeImplementation(bytes memory data) external virtual;\\n\\n  /**\\n   * @notice Called by the delegator on a delegate to forfeit its responsibility\\n   */\\n  function _resignImplementation() external virtual;\\n}\\n\",\"keccak256\":\"0x5033fd168f53b972d746a4ca5127d24c7631deeaa835809097dee788d8427d95\",\"license\":\"BSD-3-Clause\"},\"contracts/Lens/JLendLens.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"../JErc20.sol\\\";\\nimport \\\"../JToken.sol\\\";\\nimport \\\"../PriceOracle.sol\\\";\\nimport \\\"../EIP20Interface.sol\\\";\\nimport \\\"../Governance/GovernorAlpha.sol\\\";\\nimport \\\"../Governance/JLEND.sol\\\";\\n\\ninterface ComptrollerLensInterface {\\n  function markets(address) external view returns (bool, uint);\\n\\n  function oracle() external view returns (PriceOracle);\\n\\n  function getAccountLiquidity(address) external view returns (uint, uint, uint);\\n\\n  function getAssetsIn(address) external view returns (JToken[] memory);\\n\\n  function claimJLend(address) external;\\n\\n  function jLendAccrued(address) external view returns (uint);\\n\\n  function jLendSpeeds(address) external view returns (uint);\\n\\n  function jLendSupplySpeeds(address) external view returns (uint);\\n\\n  function jLendBorrowSpeeds(address) external view returns (uint);\\n\\n  function borrowCaps(address) external view returns (uint);\\n}\\n\\ninterface GovernorBravoInterface {\\n  struct Receipt {\\n    bool hasVoted;\\n    uint8 support;\\n    uint96 votes;\\n  }\\n  struct Proposal {\\n    uint id;\\n    address proposer;\\n    uint eta;\\n    uint startBlock;\\n    uint endBlock;\\n    uint forVotes;\\n    uint againstVotes;\\n    uint abstainVotes;\\n    bool canceled;\\n    bool executed;\\n  }\\n\\n  function getActions(\\n    uint proposalId\\n  )\\n    external\\n    view\\n    returns (\\n      address[] memory targets,\\n      uint[] memory values,\\n      string[] memory signatures,\\n      bytes[] memory calldatas\\n    );\\n\\n  function proposals(uint proposalId) external view returns (Proposal memory);\\n\\n  function getReceipt(uint proposalId, address voter) external view returns (Receipt memory);\\n}\\n\\ncontract JLendLens {\\n  struct JTokenMetadata {\\n    address jToken;\\n    uint exchangeRateCurrent;\\n    uint supplyRatePerBlock;\\n    uint borrowRatePerBlock;\\n    uint reserveFactorMantissa;\\n    uint totalBorrows;\\n    uint totalReserves;\\n    uint totalSupply;\\n    uint totalCash;\\n    bool isListed;\\n    uint collateralFactorMantissa;\\n    address underlyingAssetAddress;\\n    uint jTokenDecimals;\\n    uint underlyingDecimals;\\n    uint jLendSupplySpeed;\\n    uint jLendBorrowSpeed;\\n    uint borrowCap;\\n  }\\n\\n  function getJLendSpeeds(ComptrollerLensInterface comptroller, JToken jToken) internal returns (uint, uint) {\\n    // Getting jLend speeds is gnarly due to not every network having the\\n    // split jLend speeds from Proposal 62 and other networks don't even\\n    // have jLend speeds.\\n    uint jLendSupplySpeed = 0;\\n    (bool jLendSupplySpeedSuccess, bytes memory jLendSupplySpeedReturnData) = address(comptroller).call(\\n      abi.encodePacked(comptroller.jLendSupplySpeeds.selector, abi.encode(address(jToken)))\\n    );\\n    if (jLendSupplySpeedSuccess) {\\n      jLendSupplySpeed = abi.decode(jLendSupplySpeedReturnData, (uint));\\n    }\\n\\n    uint jLendBorrowSpeed = 0;\\n    (bool jLendBorrowSpeedSuccess, bytes memory jLendBorrowSpeedReturnData) = address(comptroller).call(\\n      abi.encodePacked(comptroller.jLendBorrowSpeeds.selector, abi.encode(address(jToken)))\\n    );\\n    if (jLendBorrowSpeedSuccess) {\\n      jLendBorrowSpeed = abi.decode(jLendBorrowSpeedReturnData, (uint));\\n    }\\n\\n    // If the split jLend speeds call doesn't work, try the  oldest non-spit version.\\n    if (!jLendSupplySpeedSuccess || !jLendBorrowSpeedSuccess) {\\n      (bool jLendSpeedSuccess, bytes memory jLendSpeedReturnData) = address(comptroller).call(\\n        abi.encodePacked(comptroller.jLendSpeeds.selector, abi.encode(address(jToken)))\\n      );\\n      if (jLendSpeedSuccess) {\\n        jLendSupplySpeed = jLendBorrowSpeed = abi.decode(jLendSpeedReturnData, (uint));\\n      }\\n    }\\n    return (jLendSupplySpeed, jLendBorrowSpeed);\\n  }\\n\\n  function jTokenMetadata(JToken jToken) public returns (JTokenMetadata memory) {\\n    uint exchangeRateCurrent = jToken.exchangeRateCurrent();\\n    ComptrollerLensInterface comptroller = ComptrollerLensInterface(address(jToken.comptroller()));\\n    (bool isListed, uint collateralFactorMantissa) = comptroller.markets(address(jToken));\\n    address underlyingAssetAddress;\\n    uint underlyingDecimals;\\n\\n    if (compareStrings(jToken.symbol(), \\\"jJBC\\\")) {\\n      underlyingAssetAddress = address(0);\\n      underlyingDecimals = 18;\\n    } else {\\n      JErc20 cErc20 = JErc20(address(jToken));\\n      underlyingAssetAddress = cErc20.underlying();\\n      underlyingDecimals = EIP20Interface(cErc20.underlying()).decimals();\\n    }\\n\\n    (uint jLendSupplySpeed, uint jLendBorrowSpeed) = getJLendSpeeds(comptroller, jToken);\\n\\n    uint borrowCap = 0;\\n    (bool borrowCapSuccess, bytes memory borrowCapReturnData) = address(comptroller).call(\\n      abi.encodePacked(comptroller.borrowCaps.selector, abi.encode(address(jToken)))\\n    );\\n    if (borrowCapSuccess) {\\n      borrowCap = abi.decode(borrowCapReturnData, (uint));\\n    }\\n\\n    return\\n      JTokenMetadata({\\n        jToken: address(jToken),\\n        exchangeRateCurrent: exchangeRateCurrent,\\n        supplyRatePerBlock: jToken.supplyRatePerBlock(),\\n        borrowRatePerBlock: jToken.borrowRatePerBlock(),\\n        reserveFactorMantissa: jToken.reserveFactorMantissa(),\\n        totalBorrows: jToken.totalBorrows(),\\n        totalReserves: jToken.totalReserves(),\\n        totalSupply: jToken.totalSupply(),\\n        totalCash: jToken.getCash(),\\n        isListed: isListed,\\n        collateralFactorMantissa: collateralFactorMantissa,\\n        underlyingAssetAddress: underlyingAssetAddress,\\n        jTokenDecimals: jToken.decimals(),\\n        underlyingDecimals: underlyingDecimals,\\n        jLendSupplySpeed: jLendSupplySpeed,\\n        jLendBorrowSpeed: jLendBorrowSpeed,\\n        borrowCap: borrowCap\\n      });\\n  }\\n\\n  function jTokenMetadataAll(JToken[] calldata jTokens) external returns (JTokenMetadata[] memory) {\\n    uint jTokenCount = jTokens.length;\\n    JTokenMetadata[] memory res = new JTokenMetadata[](jTokenCount);\\n    for (uint i = 0; i < jTokenCount; i++) {\\n      res[i] = jTokenMetadata(jTokens[i]);\\n    }\\n    return res;\\n  }\\n\\n  struct JTokenBalances {\\n    address jToken;\\n    uint balanceOf;\\n    uint borrowBalanceCurrent;\\n    uint balanceOfUnderlying;\\n    uint tokenBalance;\\n    uint tokenAllowance;\\n  }\\n\\n  function jTokenBalances(JToken jToken, address payable account) public returns (JTokenBalances memory) {\\n    uint balanceOf = jToken.balanceOf(account);\\n    uint borrowBalanceCurrent = jToken.borrowBalanceCurrent(account);\\n    uint balanceOfUnderlying = jToken.balanceOfUnderlying(account);\\n    uint tokenBalance;\\n    uint tokenAllowance;\\n\\n    if (compareStrings(jToken.symbol(), \\\"jJBC\\\")) {\\n      tokenBalance = account.balance;\\n      tokenAllowance = account.balance;\\n    } else {\\n      JErc20 cErc20 = JErc20(address(jToken));\\n      EIP20Interface underlying = EIP20Interface(cErc20.underlying());\\n      tokenBalance = underlying.balanceOf(account);\\n      tokenAllowance = underlying.allowance(account, address(jToken));\\n    }\\n\\n    return\\n      JTokenBalances({\\n        jToken: address(jToken),\\n        balanceOf: balanceOf,\\n        borrowBalanceCurrent: borrowBalanceCurrent,\\n        balanceOfUnderlying: balanceOfUnderlying,\\n        tokenBalance: tokenBalance,\\n        tokenAllowance: tokenAllowance\\n      });\\n  }\\n\\n  function jTokenBalancesAll(\\n    JToken[] calldata jTokens,\\n    address payable account\\n  ) external returns (JTokenBalances[] memory) {\\n    uint jTokenCount = jTokens.length;\\n    JTokenBalances[] memory res = new JTokenBalances[](jTokenCount);\\n    for (uint i = 0; i < jTokenCount; i++) {\\n      res[i] = jTokenBalances(jTokens[i], account);\\n    }\\n    return res;\\n  }\\n\\n  struct JTokenUnderlyingPrice {\\n    address jToken;\\n    uint underlyingPrice;\\n  }\\n\\n  function jTokenUnderlyingPrice(JToken jToken) public returns (JTokenUnderlyingPrice memory) {\\n    ComptrollerLensInterface comptroller = ComptrollerLensInterface(address(jToken.comptroller()));\\n    PriceOracle priceOracle = comptroller.oracle();\\n\\n    return\\n      JTokenUnderlyingPrice({\\n        jToken: address(jToken),\\n        underlyingPrice: priceOracle.getUnderlyingPrice(jToken)\\n      });\\n  }\\n\\n  function jTokenUnderlyingPriceAll(\\n    JToken[] calldata jTokens\\n  ) external returns (JTokenUnderlyingPrice[] memory) {\\n    uint jTokenCount = jTokens.length;\\n    JTokenUnderlyingPrice[] memory res = new JTokenUnderlyingPrice[](jTokenCount);\\n    for (uint i = 0; i < jTokenCount; i++) {\\n      res[i] = jTokenUnderlyingPrice(jTokens[i]);\\n    }\\n    return res;\\n  }\\n\\n  struct AccountLimits {\\n    JToken[] markets;\\n    uint liquidity;\\n    uint shortfall;\\n  }\\n\\n  function getAccountLimits(\\n    ComptrollerLensInterface comptroller,\\n    address account\\n  ) public returns (AccountLimits memory) {\\n    (uint errorCode, uint liquidity, uint shortfall) = comptroller.getAccountLiquidity(account);\\n    require(errorCode == 0);\\n\\n    return\\n      AccountLimits({markets: comptroller.getAssetsIn(account), liquidity: liquidity, shortfall: shortfall});\\n  }\\n\\n  struct GovReceipt {\\n    uint proposalId;\\n    bool hasVoted;\\n    bool support;\\n    uint96 votes;\\n  }\\n\\n  function getGovReceipts(\\n    GovernorAlpha governor,\\n    address voter,\\n    uint[] memory proposalIds\\n  ) public view returns (GovReceipt[] memory) {\\n    uint proposalCount = proposalIds.length;\\n    GovReceipt[] memory res = new GovReceipt[](proposalCount);\\n    for (uint i = 0; i < proposalCount; i++) {\\n      GovernorAlpha.Receipt memory receipt = governor.getReceipt(proposalIds[i], voter);\\n      res[i] = GovReceipt({\\n        proposalId: proposalIds[i],\\n        hasVoted: receipt.hasVoted,\\n        support: receipt.support,\\n        votes: receipt.votes\\n      });\\n    }\\n    return res;\\n  }\\n\\n  struct GovBravoReceipt {\\n    uint proposalId;\\n    bool hasVoted;\\n    uint8 support;\\n    uint96 votes;\\n  }\\n\\n  function getGovBravoReceipts(\\n    GovernorBravoInterface governor,\\n    address voter,\\n    uint[] memory proposalIds\\n  ) public view returns (GovBravoReceipt[] memory) {\\n    uint proposalCount = proposalIds.length;\\n    GovBravoReceipt[] memory res = new GovBravoReceipt[](proposalCount);\\n    for (uint i = 0; i < proposalCount; i++) {\\n      GovernorBravoInterface.Receipt memory receipt = governor.getReceipt(proposalIds[i], voter);\\n      res[i] = GovBravoReceipt({\\n        proposalId: proposalIds[i],\\n        hasVoted: receipt.hasVoted,\\n        support: receipt.support,\\n        votes: receipt.votes\\n      });\\n    }\\n    return res;\\n  }\\n\\n  struct GovProposal {\\n    uint proposalId;\\n    address proposer;\\n    uint eta;\\n    address[] targets;\\n    uint[] values;\\n    string[] signatures;\\n    bytes[] calldatas;\\n    uint startBlock;\\n    uint endBlock;\\n    uint forVotes;\\n    uint againstVotes;\\n    bool canceled;\\n    bool executed;\\n  }\\n\\n  function setProposal(GovProposal memory res, GovernorAlpha governor, uint proposalId) internal view {\\n    (\\n      ,\\n      address proposer,\\n      uint eta,\\n      uint startBlock,\\n      uint endBlock,\\n      uint forVotes,\\n      uint againstVotes,\\n      bool canceled,\\n      bool executed\\n    ) = governor.proposals(proposalId);\\n    res.proposalId = proposalId;\\n    res.proposer = proposer;\\n    res.eta = eta;\\n    res.startBlock = startBlock;\\n    res.endBlock = endBlock;\\n    res.forVotes = forVotes;\\n    res.againstVotes = againstVotes;\\n    res.canceled = canceled;\\n    res.executed = executed;\\n  }\\n\\n  function getGovProposals(\\n    GovernorAlpha governor,\\n    uint[] calldata proposalIds\\n  ) external view returns (GovProposal[] memory) {\\n    GovProposal[] memory res = new GovProposal[](proposalIds.length);\\n    for (uint i = 0; i < proposalIds.length; i++) {\\n      (\\n        address[] memory targets,\\n        uint[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas\\n      ) = governor.getActions(proposalIds[i]);\\n      res[i] = GovProposal({\\n        proposalId: 0,\\n        proposer: address(0),\\n        eta: 0,\\n        targets: targets,\\n        values: values,\\n        signatures: signatures,\\n        calldatas: calldatas,\\n        startBlock: 0,\\n        endBlock: 0,\\n        forVotes: 0,\\n        againstVotes: 0,\\n        canceled: false,\\n        executed: false\\n      });\\n      setProposal(res[i], governor, proposalIds[i]);\\n    }\\n    return res;\\n  }\\n\\n  struct GovBravoProposal {\\n    uint proposalId;\\n    address proposer;\\n    uint eta;\\n    address[] targets;\\n    uint[] values;\\n    string[] signatures;\\n    bytes[] calldatas;\\n    uint startBlock;\\n    uint endBlock;\\n    uint forVotes;\\n    uint againstVotes;\\n    uint abstainVotes;\\n    bool canceled;\\n    bool executed;\\n  }\\n\\n  function setBravoProposal(\\n    GovBravoProposal memory res,\\n    GovernorBravoInterface governor,\\n    uint proposalId\\n  ) internal view {\\n    GovernorBravoInterface.Proposal memory p = governor.proposals(proposalId);\\n\\n    res.proposalId = proposalId;\\n    res.proposer = p.proposer;\\n    res.eta = p.eta;\\n    res.startBlock = p.startBlock;\\n    res.endBlock = p.endBlock;\\n    res.forVotes = p.forVotes;\\n    res.againstVotes = p.againstVotes;\\n    res.abstainVotes = p.abstainVotes;\\n    res.canceled = p.canceled;\\n    res.executed = p.executed;\\n  }\\n\\n  function getGovBravoProposals(\\n    GovernorBravoInterface governor,\\n    uint[] calldata proposalIds\\n  ) external view returns (GovBravoProposal[] memory) {\\n    GovBravoProposal[] memory res = new GovBravoProposal[](proposalIds.length);\\n    for (uint i = 0; i < proposalIds.length; i++) {\\n      (\\n        address[] memory targets,\\n        uint[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas\\n      ) = governor.getActions(proposalIds[i]);\\n      res[i] = GovBravoProposal({\\n        proposalId: 0,\\n        proposer: address(0),\\n        eta: 0,\\n        targets: targets,\\n        values: values,\\n        signatures: signatures,\\n        calldatas: calldatas,\\n        startBlock: 0,\\n        endBlock: 0,\\n        forVotes: 0,\\n        againstVotes: 0,\\n        abstainVotes: 0,\\n        canceled: false,\\n        executed: false\\n      });\\n      setBravoProposal(res[i], governor, proposalIds[i]);\\n    }\\n    return res;\\n  }\\n\\n  struct JLendBalanceMetadata {\\n    uint balance;\\n    uint votes;\\n    address delegate;\\n  }\\n\\n  function getJLendBalanceMetadata(\\n    JLEND jLend,\\n    address account\\n  ) external view returns (JLendBalanceMetadata memory) {\\n    return\\n      JLendBalanceMetadata({\\n        balance: jLend.balanceOf(account),\\n        votes: uint256(jLend.getCurrentVotes(account)),\\n        delegate: jLend.delegates(account)\\n      });\\n  }\\n\\n  struct JLendBalanceMetadataExt {\\n    uint balance;\\n    uint votes;\\n    address delegate;\\n    uint allocated;\\n  }\\n\\n  function getJLendBalanceMetadataExt(\\n    JLEND jLend,\\n    ComptrollerLensInterface comptroller,\\n    address account\\n  ) external returns (JLendBalanceMetadataExt memory) {\\n    uint balance = jLend.balanceOf(account);\\n    comptroller.claimJLend(account);\\n    uint newBalance = jLend.balanceOf(account);\\n    uint accrued = comptroller.jLendAccrued(account);\\n    uint total = add(accrued, newBalance, \\\"sum jLend total\\\");\\n    uint allocated = sub(total, balance, \\\"sub allocated\\\");\\n\\n    return\\n      JLendBalanceMetadataExt({\\n        balance: balance,\\n        votes: uint256(jLend.getCurrentVotes(account)),\\n        delegate: jLend.delegates(account),\\n        allocated: allocated\\n      });\\n  }\\n\\n  struct JLendVotes {\\n    uint blockNumber;\\n    uint votes;\\n  }\\n\\n  function getJLendVotes(\\n    JLEND jLend,\\n    address account,\\n    uint32[] calldata blockNumbers\\n  ) external view returns (JLendVotes[] memory) {\\n    JLendVotes[] memory res = new JLendVotes[](blockNumbers.length);\\n    for (uint i = 0; i < blockNumbers.length; i++) {\\n      res[i] = JLendVotes({\\n        blockNumber: uint256(blockNumbers[i]),\\n        votes: uint256(jLend.getPriorVotes(account, blockNumbers[i]))\\n      });\\n    }\\n    return res;\\n  }\\n\\n  function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n    return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n  }\\n\\n  function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n    uint c = a + b;\\n    require(c >= a, errorMessage);\\n    return c;\\n  }\\n\\n  function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n    require(b <= a, errorMessage);\\n    uint c = a - b;\\n    return c;\\n  }\\n}\\n\",\"keccak256\":\"0x41a2cc480e6ed2d428707388b98210238f02c579e40fa825cdb9eaf8c1a7b521\",\"license\":\"BSD-3-Clause\"},\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./JToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n  /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n  bool public constant isPriceOracle = true;\\n\\n  /**\\n   * @notice Get the underlying price of a jToken asset\\n   * @param jToken The jToken to get the underlying price of\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getUnderlyingPrice(JToken jToken) external view virtual returns (uint);\\n\\n  /**\\n   * @notice Get the price of a specific asset\\n   * @param asset The asset to get the price of\\n   * @return The asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getAssetPrice(address asset) external view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x01b3177ee4b79bae046885ced531584dce7e1f95945048fa8e36fa6699ec30bc\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100e95760003560e01c806375738b9b1161008c5780638861311111610066578063886131111461028457806396994869146102a4578063995ed99f146102c4578063d9ca3c9c146102e457600080fd5b806375738b9b1461022457806375d80e90146102445780637dd8f6d91461026457600080fd5b8063455ffd7f116100c8578063455ffd7f146101575780634affc33e146101775780634c45802c146101b557806357553afb1461020457600080fd5b8062673b0c146100ee57806337757ad41461011757806343c811cc14610137575b600080fd5b6101016100fc3660046127ff565b610304565b60405161010e9190612895565b60405180910390f35b61012a6101253660046128e3565b6103d4565b60405161010e9190612947565b61014a610145366004612ab5565b610570565b60405161010e9190612b16565b61016a610165366004612b7b565b610712565b60405161010e9190612b98565b61018a610185366004612bb8565b61087c565b604080518251815260208084015190820152918101516001600160a01b03169082015260600161010e565b6101c86101c3366004612bf1565b610a1f565b60405161010e919081518152602080830151908201526040808301516001600160a01b0316908201526060918201519181019190915260800190565b610217610212366004612bb8565b610d81565b60405161010e9190612c31565b610237610232366004612c3f565b611114565b60405161010e9190612c80565b610257610252366004612cd3565b6111e7565b60405161010e9190612e33565b610277610272366004612bb8565b61143f565b60405161010e9190612f6d565b610297610292366004612c3f565b611579565b60405161010e91906130a8565b6102b76102b2366004612cd3565b611637565b60405161010e91906130eb565b6102d76102d2366004612ab5565b611881565b60405161010e919061320c565b6102f76102f2366004612b7b565b611a22565b60405161010e9190613270565b6060826000816001600160401b0381111561032157610321612996565b60405190808252806020026020018201604052801561035a57816020015b6103476126cc565b81526020019060019003908161033f5790505b50905060005b828110156103c85761039887878381811061037d5761037d61327f565b90506020020160208101906103929190612b7b565b86610d81565b8282815181106103aa576103aa61327f565b602002602001018190525080806103c0906132ab565b915050610360565b509150505b9392505050565b60606000826001600160401b038111156103f0576103f0612996565b60405190808252806020026020018201604052801561043557816020015b604080518082019091526000808252602082015281526020019060019003908161040e5790505b50905060005b838110156105665760405180604001604052808686848181106104605761046061327f565b905060200201602081019061047591906132c4565b63ffffffff168152602001886001600160a01b031663782d6fe1898989878181106104a2576104a261327f565b90506020020160208101906104b791906132c4565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015263ffffffff166024820152604401602060405180830381865afa158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a9190613306565b6001600160601b03168152508282815181106105485761054861327f565b6020026020010181905250808061055e906132ab565b91505061043b565b5095945050505050565b80516060906000816001600160401b0381111561058f5761058f612996565b6040519080825280602002602001820160405280156105e157816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816105ad5790505b50905060005b828110156103c8576000876001600160a01b031663e23a9a528784815181106106125761061261327f565b6020026020010151896040518363ffffffff1660e01b815260040161064a9291909182526001600160a01b0316602082015260400190565b606060405180830381865afa158015610667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068b9190613342565b905060405180608001604052808784815181106106aa576106aa61327f565b60200260200101518152602001826000015115158152602001826020015160ff16815260200182604001516001600160601b03168152508383815181106106f3576106f361327f565b602002602001018190525050808061070a906132ab565b9150506105e7565b60408051808201909152600080825260208201526000826001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078a9190613390565b90506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f09190613390565b6040805180820182526001600160a01b03808816808352925163fc57d4df60e01b815260048101939093529293509160208301919084169063fc57d4df90602401602060405180830381865afa15801561084e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087291906133ad565b9052949350505050565b6108a96040518060600160405280600081526020016000815260200160006001600160a01b031681525090565b6040805160608101918290526370a0823160e01b9091526001600160a01b038381166064830152819085166370a0823160848301602060405180830381865afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e91906133ad565b815260405163b4b5ea5760e01b81526001600160a01b03858116600483015260209092019186169063b4b5ea5790602401602060405180830381865afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109909190613306565b6001600160601b03168152604051632c3e6f0f60e11b81526001600160a01b03858116600483015260209092019186169063587cde1e90602401602060405180830381865afa1580156109e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0b9190613390565b6001600160a01b0316905290505b92915050565b610a536040518060800160405280600081526020016000815260200160006001600160a01b03168152602001600081525090565b6040516370a0823160e01b81526001600160a01b038381166004830152600091908616906370a0823190602401602060405180830381865afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac191906133ad565b604051632dd85f8d60e01b81526001600160a01b03858116600483015291925090851690632dd85f8d90602401600060405180830381600087803b158015610b0857600080fd5b505af1158015610b1c573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b03868116600483015260009350881691506370a0823190602401602060405180830381865afa158015610b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8d91906133ad565b60405163dd68f89560e01b81526001600160a01b03868116600483015291925060009187169063dd68f89590602401602060405180830381865afa158015610bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfd91906133ad565b90506000610c3382846040518060400160405280600f81526020016e1cdd5b481a93195b99081d1bdd185b608a1b815250612178565b90506000610c6782866040518060400160405280600d81526020016c1cdd5888185b1b1bd8d85d1959609a1b8152506121b2565b60408051608081018252878152905163b4b5ea5760e01b81526001600160a01b038a8116600483015292935090916020830191908c169063b4b5ea5790602401602060405180830381865afa158015610cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce89190613306565b6001600160601b03168152604051632c3e6f0f60e11b81526001600160a01b038a811660048301526020909201918c169063587cde1e90602401602060405180830381865afa158015610d3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d639190613390565b6001600160a01b031681526020019190915298975050505050505050565b610d896126cc565b6040516370a0823160e01b81526001600160a01b038381166004830152600091908516906370a0823190602401602060405180830381865afa158015610dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df791906133ad565b6040516305eff7ef60e21b81526001600160a01b0385811660048301529192506000918616906317bfdfbc906024016020604051808303816000875af1158015610e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6991906133ad565b604051633af9e66960e01b81526001600160a01b038681166004830152919250600091871690633af9e669906024016020604051808303816000875af1158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb91906133ad565b9050600080610f6b886001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610f21573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f49919081019061343f565b604051806040016040528060048152602001636a4a424360e01b8152506121ec565b15610f855750506001600160a01b038516803190316110d7565b60008890506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fee9190613390565b6040516370a0823160e01b81526001600160a01b038b81166004830152919250908216906370a0823190602401602060405180830381865afa158015611038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105c91906133ad565b604051636eb1769f60e11b81526001600160a01b038b811660048301528c811660248301529195509082169063dd62ed3e90604401602060405180830381865afa1580156110ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d291906133ad565b925050505b6040805160c0810182526001600160a01b039990991689526020890195909552938701929092526060860152608085015260a08401525090919050565b6060816000816001600160401b0381111561113157611131612996565b60405190808252806020026020018201604052801561117657816020015b604080518082019091526000808252602082015281526020019060019003908161114f5790505b50905060005b828110156111de576111ae8686838181106111995761119961327f565b90506020020160208101906101659190612b7b565b8282815181106111c0576111c061327f565b602002602001018190525080806111d6906132ab565b91505061117c565b50949350505050565b60606000826001600160401b0381111561120357611203612996565b6040519080825280602002602001820160405280156112b357816020015b6112a0604051806101c001604052806000815260200160006001600160a01b03168152602001600081526020016060815260200160608152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b8152602001906001900390816112215790505b50905060005b838110156111de57600080600080896001600160a01b031663328dd9828a8a888181106112e8576112e861327f565b905060200201356040518263ffffffff1660e01b815260040161130d91815260200190565b600060405180830381865afa15801561132a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261135291908101906135e9565b9350935093509350604051806101c001604052806000815260200160006001600160a01b03168152602001600081526020018581526020018481526020018381526020018281526020016000815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152508686815181106113e1576113e161327f565b60200260200101819052506114288686815181106114015761140161327f565b60200260200101518b8b8b8981811061141c5761141c61327f565b90506020020135612245565b505050508080611437906132ab565b9150506112b9565b61146360405180606001604052806060815260200160008152602001600081525090565b604051635ec88c7960e01b81526001600160a01b0383811660048301526000918291829190871690635ec88c7990602401606060405180830381865afa1580156114b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d591906136f6565b925092509250826000146114e857600080fd5b604080516060810191829052632aff3bff60e21b9091526001600160a01b0386811660648301528190881663abfceffc60848301600060405180830381865afa158015611539573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115619190810190613724565b81526020810193909352604090920152949350505050565b6060816000816001600160401b0381111561159657611596612996565b6040519080825280602002602001820160405280156115cf57816020015b6115bc61270b565b8152602001906001900390816115b45790505b50905060005b828110156111de576116078686838181106115f2576115f261327f565b90506020020160208101906102f29190612b7b565b8282815181106116195761161961327f565b6020026020010181905250808061162f906132ab565b9150506115d5565b60606000826001600160401b0381111561165357611653612996565b6040519080825280602002602001820160405280156116fc57816020015b6116e9604051806101a001604052806000815260200160006001600160a01b031681526020016000815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b8152602001906001900390816116715790505b50905060005b838110156111de57600080600080896001600160a01b031663328dd9828a8a888181106117315761173161327f565b905060200201356040518263ffffffff1660e01b815260040161175691815260200190565b600060405180830381865afa158015611773573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261179b91908101906135e9565b9350935093509350604051806101a001604052806000815260200160006001600160a01b031681526020016000815260200185815260200184815260200183815260200182815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152508686815181106118235761182361327f565b602002602001018190525061186a8686815181106118435761184361327f565b60200260200101518b8b8b8981811061185e5761185e61327f565b90506020020135612330565b505050508080611879906132ab565b915050611702565b80516060906000816001600160401b038111156118a0576118a0612996565b6040519080825280602002602001820160405280156118f257816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816118be5790505b50905060005b828110156103c8576000876001600160a01b031663e23a9a528784815181106119235761192361327f565b6020026020010151896040518363ffffffff1660e01b815260040161195b9291909182526001600160a01b0316602082015260400190565b606060405180830381865afa158015611978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199c91906137bd565b905060405180608001604052808784815181106119bb576119bb61327f565b6020026020010151815260200182600001511515815260200182602001511515815260200182604001516001600160601b0316815250838381518110611a0357611a0361327f565b6020026020010181905250508080611a1a906132ab565b9150506118f8565b611a2a61270b565b6000826001600160a01b031663bd6d894d6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9091906133ad565b90506000836001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af69190613390565b604051638e8f294b60e01b81526001600160a01b038681166004830152919250600091829190841690638e8f294b906024016040805180830381865afa158015611b44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6891906137ee565b91509150600080611bb0886001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610f21573d6000803e3d6000fd5b15611bc15750600090506012611cf4565b6000889050806001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c289190613390565b9250806001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8c9190613390565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ced919061381a565b60ff169150505b600080611d01878b612449565b9150915060008080896001600160a01b0316634a58443260e01b8e604051602001611d3b91906001600160a01b0391909116815260200190565b60408051601f1981840301815290829052611d599291602001613835565b60408051601f1981840301815290829052611d7391613866565b6000604051808303816000865af19150503d8060008114611db0576040519150601f19603f3d011682016040523d82523d6000602084013e611db5565b606091505b50915091508115611dd75780806020019051810190611dd491906133ad565b92505b6040518061022001604052808e6001600160a01b031681526020018c81526020018e6001600160a01b031663ae9d70b06040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5a91906133ad565b81526020018e6001600160a01b031663f8f9da286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec191906133ad565b81526020018e6001600160a01b031663173b99046040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2891906133ad565b81526020018e6001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8f91906133ad565b81526020018e6001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff691906133ad565b81526020018e6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205d91906133ad565b81526020018e6001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c491906133ad565b81526020018a15158152602001898152602001886001600160a01b031681526020018e6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612124573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612148919061381a565b60ff168152602001878152602001868152602001858152602001848152509b505050505050505050505050919050565b6000806121858486613882565b905082858210156111de5760405162461bcd60e51b81526004016121a99190613895565b60405180910390fd5b600081848411156121d65760405162461bcd60e51b81526004016121a99190613895565b5060006121e384866138a8565b95945050505050565b6000816040516020016121ff9190613866565b60405160208183030381529060405280519060200120836040516020016122269190613866565b6040516020818303038152906040528051906020012014905092915050565b60405163013cf08b60e01b8152600481018290526000906001600160a01b0384169063013cf08b9060240161014060405180830381865afa15801561228e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b291906138bb565b918452506020808201516001600160a01b03169084015260408082015190840152606081015160e08085019190915260808201516101008086019190915260a08301516101208087019190915260c0840151610140870152918301516101608601528201511515610180850152015115156101a09092019190915250565b600080600080600080600080896001600160a01b031663013cf08b8a6040518263ffffffff1660e01b815260040161236a91815260200190565b61012060405180830381865afa158015612388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ac9190613952565b9850985098509850985098509850985050888b6000018181525050878b602001906001600160a01b031690816001600160a01b031681525050868b6040018181525050858b60e0018181525050848b610100018181525050838b610120018181525050828b610140018181525050818b610160019015159081151581525050808b6101800190151590811515815250505050505050505050505050565b60008060008080866001600160a01b031663bda19a9d60e01b8760405160200161248291906001600160a01b0391909116815260200190565b60408051601f19818403018152908290526124a09291602001613835565b60408051601f19818403018152908290526124ba91613866565b6000604051808303816000865af19150503d80600081146124f7576040519150601f19603f3d011682016040523d82523d6000602084013e6124fc565b606091505b5091509150811561251e578080602001905181019061251b91906133ad565b92505b604080516001600160a01b038881166020830152600092839283928c1691633c08d43160e21b910160408051601f19818403018152908290526125649291602001613835565b60408051601f198184030181529082905261257e91613866565b6000604051808303816000865af19150503d80600081146125bb576040519150601f19603f3d011682016040523d82523d6000602084013e6125c0565b606091505b509150915081156125e257808060200190518101906125df91906133ad565b92505b8415806125ed575081155b156126bb57604080516001600160a01b038b811660208301526000928392918e16916321a89c5560e01b910160408051601f19818403018152908290526126379291602001613835565b60408051601f198184030181529082905261265191613866565b6000604051808303816000865af19150503d806000811461268e576040519150601f19603f3d011682016040523d82523d6000602084013e612693565b606091505b509150915081156126b857808060200190518101906126b291906133ad565b94508497505b50505b5093955093505050505b9250929050565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180610220016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008083601f8401126127b557600080fd5b5081356001600160401b038111156127cc57600080fd5b6020830191508360208260051b85010111156126c557600080fd5b6001600160a01b03811681146127fc57600080fd5b50565b60008060006040848603121561281457600080fd5b83356001600160401b0381111561282a57600080fd5b612836868287016127a3565b909450925050602084013561284a816127e7565b809150509250925092565b80516001600160a01b031682526020808201519083015260408082015190830152606080820151908301526080808201519083015260a090810151910152565b6020808252825182820181905260009190848201906040850190845b818110156128d7576128c4838551612855565b9284019260c092909201916001016128b1565b50909695505050505050565b600080600080606085870312156128f957600080fd5b8435612904816127e7565b93506020850135612914816127e7565b925060408501356001600160401b0381111561292f57600080fd5b61293b878288016127a3565b95989497509550505050565b602080825282518282018190526000919060409081850190868401855b8281101561298957815180518552860151868501529284019290850190600101612964565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156129ce576129ce612996565b60405290565b60405161014081016001600160401b03811182821017156129ce576129ce612996565b604051601f8201601f191681016001600160401b0381118282101715612a1f57612a1f612996565b604052919050565b60006001600160401b03821115612a4057612a40612996565b5060051b60200190565b600082601f830112612a5b57600080fd5b81356020612a70612a6b83612a27565b6129f7565b82815260059290921b84018101918181019086841115612a8f57600080fd5b8286015b84811015612aaa5780358352918301918301612a93565b509695505050505050565b600080600060608486031215612aca57600080fd5b8335612ad5816127e7565b92506020840135612ae5816127e7565b915060408401356001600160401b03811115612b0057600080fd5b612b0c86828701612a4a565b9150509250925092565b602080825282518282018190526000919060409081850190868401855b8281101561298957815180518552868101511515878601528581015160ff16868601526060908101516001600160601b03169085015260809093019290850190600101612b33565b600060208284031215612b8d57600080fd5b81356103cd816127e7565b81516001600160a01b031681526020808301519082015260408101610a19565b60008060408385031215612bcb57600080fd5b8235612bd6816127e7565b91506020830135612be6816127e7565b809150509250929050565b600080600060608486031215612c0657600080fd5b8335612c11816127e7565b92506020840135612c21816127e7565b9150604084013561284a816127e7565b60c08101610a198284612855565b60008060208385031215612c5257600080fd5b82356001600160401b03811115612c6857600080fd5b612c74858286016127a3565b90969095509350505050565b602080825282518282018190526000919060409081850190868401855b8281101561298957612cc384835180516001600160a01b03168252602090810151910152565b9284019290850190600101612c9d565b600080600060408486031215612ce857600080fd5b8335612cf3816127e7565b925060208401356001600160401b03811115612d0e57600080fd5b612d1a868287016127a3565b9497909650939450505050565b600081518084526020808501945080840160005b83811015612d605781516001600160a01b031687529582019590820190600101612d3b565b509495945050505050565b600081518084526020808501945080840160005b83811015612d6057815187529582019590820190600101612d7f565b60005b83811015612db6578181015183820152602001612d9e565b50506000910152565b60008151808452612dd7816020860160208601612d9b565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612989578284038952612e21848351612dbf565b98850198935090840190600101612e09565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612f5f57888303603f19018552815180518452878101516001600160a01b038116898601526101c0905087820151888601526060808301518282880152612ea783880182612d27565b9250505060808083015186830382880152612ec28382612d6b565b9250505060a08083015186830382880152612edd8382612deb565b9250505060c08083015186830382880152612ef88382612deb565b60e085810151908901526101008086015190890152610120808601519089015261014080860151908901526101608086015190890152610180808601511515908901526101a094850151151594909701939093525050509386019390860190600101612e5a565b509098975050505050505050565b6020808252825160608383015280516080840181905260009291820190839060a08601905b80831015612fbb5783516001600160a01b03168252928401926001929092019190840190612f92565b50838701516040870152604087015160608701528094505050505092915050565b80516001600160a01b031682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015161304f8285018215159052565b50506101408181015190830152610160808201516001600160a01b03169083015261018080820151908301526101a080820151908301526101c080820151908301526101e0808201519083015261020090810151910152565b6020808252825182820181905260009190848201906040850190845b818110156128d7576130d7838551612fdc565b9284019261022092909201916001016130c4565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612f5f57888303603f19018552815180518452878101516001600160a01b038116898601526101a090508782015188860152606080830151828288015261315f83880182612d27565b925050506080808301518683038288015261317a8382612d6b565b9250505060a080830151868303828801526131958382612deb565b9250505060c080830151868303828801526131b08382612deb565b60e085810151908901526101008086015190890152610120808601519089015261014080860151908901526101608086015115159089015261018094850151151594909701939093525050509386019390860190600101613112565b602080825282518282018190526000919060409081850190868401855b828110156129895781518051855286810151151587860152858101511515868601526060908101516001600160601b03169085015260809093019290850190600101613229565b6102208101610a198284612fdc565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016132bd576132bd613295565b5060010190565b6000602082840312156132d657600080fd5b813563ffffffff811681146103cd57600080fd5b80516001600160601b038116811461330157600080fd5b919050565b60006020828403121561331857600080fd5b6103cd826132ea565b8051801515811461330157600080fd5b805160ff8116811461330157600080fd5b60006060828403121561335457600080fd5b61335c6129ac565b61336583613321565b815261337360208401613331565b6020820152613384604084016132ea565b60408201529392505050565b6000602082840312156133a257600080fd5b81516103cd816127e7565b6000602082840312156133bf57600080fd5b5051919050565b8051613301816127e7565b60006001600160401b038311156133ea576133ea612996565b6133fd601f8401601f19166020016129f7565b905082815283838301111561341157600080fd5b6103cd836020830184612d9b565b600082601f83011261343057600080fd5b6103cd838351602085016133d1565b60006020828403121561345157600080fd5b81516001600160401b0381111561346757600080fd5b6134738482850161341f565b949350505050565b600082601f83011261348c57600080fd5b8151602061349c612a6b83612a27565b82815260059290921b840181019181810190868411156134bb57600080fd5b8286015b84811015612aaa57805183529183019183016134bf565b600082601f8301126134e757600080fd5b815160206134f7612a6b83612a27565b82815260059290921b8401810191818101908684111561351657600080fd5b8286015b84811015612aaa5780516001600160401b038111156135395760008081fd5b6135478986838b010161341f565b84525091830191830161351a565b600082601f83011261356657600080fd5b81516020613576612a6b83612a27565b82815260059290921b8401810191818101908684111561359557600080fd5b8286015b84811015612aaa5780516001600160401b038111156135b85760008081fd5b8701603f810189136135ca5760008081fd5b6135db8986830151604084016133d1565b845250918301918301613599565b600080600080608085870312156135ff57600080fd5b84516001600160401b038082111561361657600080fd5b818701915087601f83011261362a57600080fd5b8151602061363a612a6b83612a27565b82815260059290921b8401810191818101908b84111561365957600080fd5b948201945b83861015613680578551613671816127e7565b8252948201949082019061365e565b918a015191985090935050508082111561369957600080fd5b6136a58883890161347b565b945060408701519150808211156136bb57600080fd5b6136c7888389016134d6565b935060608701519150808211156136dd57600080fd5b506136ea87828801613555565b91505092959194509250565b60008060006060848603121561370b57600080fd5b8351925060208401519150604084015190509250925092565b6000602080838503121561373757600080fd5b82516001600160401b0381111561374d57600080fd5b8301601f8101851361375e57600080fd5b805161376c612a6b82612a27565b81815260059190911b8201830190838101908783111561378b57600080fd5b928401925b828410156137b25783516137a3816127e7565b82529284019290840190613790565b979650505050505050565b6000606082840312156137cf57600080fd5b6137d76129ac565b6137e083613321565b815261337360208401613321565b6000806040838503121561380157600080fd5b61380a83613321565b9150602083015190509250929050565b60006020828403121561382c57600080fd5b6103cd82613331565b6001600160e01b0319831681528151600090613858816004850160208701612d9b565b919091016004019392505050565b60008251613878818460208701612d9b565b9190910192915050565b80820180821115610a1957610a19613295565b6020815260006103cd6020830184612dbf565b81810381811115610a1957610a19613295565b600061014082840312156138ce57600080fd5b6138d66129d4565b825181526138e6602084016133c6565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100613935818501613321565b90820152610120613947848201613321565b908201529392505050565b60008060008060008060008060006101208a8c03121561397157600080fd5b8951985060208a0151613983816127e7565b8098505060408a0151965060608a0151955060808a0151945060a08a0151935060c08a015192506139b660e08b01613321565b91506139c56101008b01613321565b9050929598509295985092959856fea26469706673582212207531877fa1f763d94dd9f886a0dea0e6ab338b01aabb7e037b81c71eb23959d164736f6c63430008140033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}